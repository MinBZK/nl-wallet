require 'active_support'
require 'active_support/core_ext'

# taken from previous GitHub repository
BUILD_OFFSET = 861
DEFAULT_APP_NAME = "NL Wallet"

# opt out of analytics
opt_out_usage

# do not generate README.md
skip_docs

private_lane :get_app_identifier do
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  UI.user_error!("No app_identifier set") if app_identifier.blank?

  app_identifier
end

private_lane :get_local_version_and_build do
  yaml_data = YAML.load_file("../wallet_app/pubspec.yaml")
  version_parts = yaml_data["version"].split("-", 2)

  # If building locally, and 2nd part of version is nil or "dev", rewrite to 0.
  if version_parts[1].nil? || version_parts[1] == "dev"
    puts  "App version_part[1] is \"#{version_parts[1]}\", rewriting to \"0\""
    version_parts[1] = "0"
  end
  version_parts
end

private_lane :ci_get_basic_auth do
  registry_user = ENV["CI_REGISTRY_USER"]
  UI.user_error!("No CI_REGISTRY_USER environment variable set") if registry_user.blank?

  job_token = ENV["CI_JOB_TOKEN"]
  UI.user_error!("No CI_JOB_TOKEN environment variable set") if job_token.blank?

  Base64.strict_encode64("#{registry_user}:#{job_token}")
end

private_lane :flutter_cmd do
  begin
    sh("which", "fvm")
    ["fvm", "flutter"]
  rescue
    begin
      sh("which", "flutter")
      ["flutter"]
    rescue
      UI.user_error!('Neither "fvm" nor "flutter" command found')
    end
  end
end

private_lane :get_newest_file do |options|
  Dir.chdir("..") do
    Dir.glob("*.#{options[:extension]}").max_by {|f| File.mtime(f)}
  end
end

# Upload debug symbols to Sentry.
# Requires the following environment variables: [SENTRY_AUTH_TOKEN, SENTRY_ORG, SENTRY_PROJECT, SENTRY_URL].
# SENTRY_AUTH_TOKEN enables the sentry_dart_plugin, after which the existense of the other variables is checked.
private_lane :upload_sentry_symbols do
  unless ENV["SENTRY_AUTH_TOKEN"].blank? then
    UI.user_error!("Missing environment variable 'SENTRY_ORG'") if ENV["SENTRY_ORG"].blank?
    UI.user_error!("Missing environment variable 'SENTRY_PROJECT'") if ENV["SENTRY_PROJECT"].blank?
    UI.user_error!("Missing environment variable 'SENTRY_URL'") if ENV["SENTRY_URL"].blank?
    sh(*flutter_cmd, "packages", "pub", "run", "sentry_dart_plugin")
  end
end

lane :upload_to_play_store_internal_track do |options|
  package_name = options[:package_name]
  version = options[:version]
  json_key_data = options[:json_key_data]

  upload_to_play_store(
    package_name: package_name,
    track: "internal",
    json_key_data: json_key_data,
    aab: "#{package_name}-#{version}-release.aab",
    skip_upload_apk: true
  )
end

private_lane :upload_to_browserstack do |options|
  Dir.chdir("..") do
    sh(
      "curl",
      "-u", "#{options[:user]}:#{options[:key]}",
      "-X", "POST",
      "https://api-cloud.browserstack.com/app-automate/upload",
      "-F", "file=@#{options[:file]}",
      "-F", "custom_id=#{options[:custom_id]}",
      log: false
    )
  end
end

lane :disable_flutter_analytics do
  sh("dart", "--disable-analytics")
  sh(*flutter_cmd, "config", "--no-analytics")
end

platform :android do
  desc "Build and sign Android app"
  lane :build do |options|

    if options[:build_mode].nil? || options[:build_mode] == "release"
      ensure_env_vars(
        env_vars: ['CONFIG_ENV']
      )
    end

    package_name = options[:package_name] || get_app_identifier
    UI.user_error!("No package_name option set") if package_name.blank?

    app_name = options[:app_name] || DEFAULT_APP_NAME

    universal_link_base = options[:universal_link_base]
    sentry_dsn = ENV["SENTRY_DSN"]
    sentry_environment = ENV["SENTRY_ENVIRONMENT"]
    sentry_release = ENV["SENTRY_RELEASE"]

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version].blank? ? local_version : options[:version]
    file_format = options[:file_format] || "aab"
    build_mode = options[:build_mode] || "release"
    mock_repositories = options[:mock] || false
    mock_relying_party_url = options[:mock_relying_party_url] || ""

    UI.user_error!("Invalid file_format: #{file_format}") unless ["aab", "apk"].include? file_format
    UI.user_error!("Invalid build_mode: #{build_mode}") unless ["release", "profile", "debug"].include? build_mode

    file_format_command = file_format == "aab" ? "appbundle" : file_format
    file_format_path = file_format == "aab" ? "bundle" : file_format

    flutter = flutter_cmd

    Dir.chdir("../wallet_app") do
      sh(*flutter, "pub", "get")

      sh(*flutter, "pub", "run", "rename", "setBundleId", "--targets", "android", "--value", package_name)
      sh(*flutter, "pub", "run", "rename", "setAppName", "--targets", "android", "--value", app_name)

      sh(*flutter, "build", file_format_command,
            "--build-number", build.to_s,
            "--build-name", version.to_s,
            "--#{build_mode}",
            "--dart-define=MOCK_REPOSITORIES=#{mock_repositories}",
            "--dart-define=MOCK_RELYING_PARTY_URL=#{mock_relying_party_url}",
            "--dart-define=UL_HOSTNAME=#{universal_link_base}",
            "--dart-define=SENTRY_DSN=#{sentry_dsn}",
            "--dart-define=SENTRY_ENVIRONMENT=#{sentry_environment}",
            "--dart-define=SENTRY_RELEASE=#{sentry_release}",
      )

      upload_sentry_symbols

      source_filepath = "build/app/outputs/#{file_format_path}/#{build_mode}/app-#{build_mode}.#{file_format}"
      target_filepath = "../#{package_name}-#{version}-#{build_mode}.#{file_format}"

      if File.file?(source_filepath)
        sh("mv", source_filepath, target_filepath)
      else
        UI.user_error!("Failed to find #{source_filepath}, aborting...")
      end
    end
  end

  desc "Deploy Android app from GitLab CI"
  lane :ci_deploy do |options|
    json_key_data = ENV["JSON_KEY_DATA"]
    UI.user_error!("No JSON_KEY_DATA environment variable given") if json_key_data.blank?

    package_name = options[:package_name]
    UI.user_error!("No package_name given") if package_name.blank?

    # Retrieve local version
    local_version, _ = get_local_version_and_build
    version = options[:version].blank? ? local_version : options[:version]

    # upload non-mock app
    upload_to_play_store_internal_track(package_name: package_name, version: version, json_key_data: json_key_data)
  end

  desc "Upload Android app to BrowserStack from GitLab CI"
  lane :ci_browserstack do |options|
    browserstack_user = ENV["BROWSERSTACK_USER"]
    browserstack_key = ENV["BROWSERSTACK_KEY"]
    commit_sha = ENV["CI_COMMIT_SHA"]

    UI.user_error!("No BROWSERSTACK_USER environment variable set") if browserstack_user.blank?
    UI.user_error!("No BROWSERSTACK_KEY environment variable set") if browserstack_key.blank?

    package_name = options[:package_name]
    UI.user_error!("No package_name or package_name option set") if package_name.blank?

    local_version, _ = get_local_version_and_build
    version = options[:version].blank? ? local_version : options[:version]

    browserstack(
      file: "#{package_name}-#{version || local_version}-profile.apk",
      user: browserstack_user,
      key: browserstack_key,
      package_name: package_name,
      commit_sha: commit_sha
    )
  end

  desc "Upload Android app to BrowserStack"
  lane :browserstack do |options|
    file = options[:file]
    user = options[:user]
    key = options[:key]
    package_name = options[:package_name]
    commit_sha = options[:commit_sha]

    upload_to_browserstack(file: file, user: user, key: key, custom_id: "NLWalletAndroid_#{package_name}_#{commit_sha}")
  end
end

platform :ios do
  desc "Build and sign iOS app from CI"
  lane :ci_build do |options|

    if options[:build_mode].nil? || options[:build_mode] == "release"
      ensure_env_vars(
        env_vars: ['CONFIG_ENV']
      )
    end

    match_basic_auth = ci_get_basic_auth
    match_keychain_password = ENV["MATCH_KEYCHAIN_PASSWORD"]

    options[:app_store] = true
    options[:match_basic_auth] = match_basic_auth
    options[:keychain_password] = match_keychain_password

    build(options)
  end

  desc "Deploy iOS app from GitLab CI"
  lane :ci_deploy do |options|
    # Get app identifier
    app_identifier = options[:app_identifier]
    UI.user_error!("No app_identifier given") if app_identifier.blank?

    # Parse API key values and convert to a Fastlane API key object
    asc_secrets_base64_json = ENV["APP_STORE_CONNECT_SECRETS_BASE64_JSON"]
    UI.user_error!("No APP_STORE_CONNECT_API_KEY_SECRETS_BASE64 environment variable given") if asc_secrets_base64_json.blank?

    asc_secrets = begin
      JSON.parse(asc_secrets_base64_json).map{ |k, v| [k, Base64.strict_decode64(v)] }.to_h
    rescue JSON::ParserError
      UI.user_error!("Unable to JSON parse APP_STORE_CONNECT_SECRETS_BASE64_JSON")
    rescue ArgumentError
      UI.user_error!("Unable to base64 decode values in APP_STORE_CONNECT_SECRETS_BASE64_JSON")
    end

    api_key = app_store_connect_api_key(
      key_id: asc_secrets["key_id"],
      issuer_id: asc_secrets["issuer_id"],
      key_content: asc_secrets["private_key"],
    )

    upload_to_testflight(
      skip_submission: true,
      skip_waiting_for_build_processing: true,
      app_identifier: app_identifier,
      api_key: api_key,
    )
  end

  desc "Test iOS app"
  lane :test do
    run_tests(
      project: "wallet_core/platform_support/ios/PlatformSupport.xcodeproj",
      scheme: "PlatformSupport",
    )

    # This adjust the working directory so that the "wallet_core/platform_support/ios/"
    # path prefix is not present in the coverage output file. Note that we need to be one
    # directory higher, because of how Fastlane determines the current working directory.
    Dir.chdir("../wallet_core/platform_support/ios/PlatformSupport") do
      slather(
        output_directory: "../../../fastlane/test_output",
        proj: "PlatformSupport.xcodeproj",
        scheme: "PlatformSupport",
        binary_basename: "libPlatformSupport",
        ignore: "../**", # ignore files outside of the project dir
        arch: "arm64", # pick an architecture because of universal binary
        sonarqube_xml: true,
      )

      slather(
        output_directory: "../../../fastlane/test_output",
        proj: "PlatformSupport.xcodeproj",
        scheme: "PlatformSupport",
        binary_basename: "libPlatformSupport",
        ignore: "../**", # ignore files outside of the project dir
        arch: "arm64", # pick an architecture because of universal binary
        cobertura_xml: true,
      )
    end
  end

  desc "Build and sign iOS app"
  lane :build do |options|

    if options[:build_mode].nil? || options[:build_mode] == "release"
      ensure_env_vars(
        env_vars: ['CONFIG_ENV']
      )
    end

    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") if bundle_id.blank?

    app_name = options[:app_name] || DEFAULT_APP_NAME

    universal_link_base = options[:universal_link_base]
    sentry_dsn = ENV["SENTRY_DSN"]
    sentry_environment = ENV["SENTRY_ENVIRONMENT"]
    sentry_release = ENV["SENTRY_RELEASE"]

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version].blank? ? local_version : options[:version]
    build_mode = options[:build_mode] || "release"
    fake_attestation = !!options[:fake_attestation]
    mock_repositories = options[:mock] || false
    mock_relying_party_url = options[:mock_relying_party_url] || ""

    UI.user_error!("Invalid build_mode: #{build_mode}") unless ["release", "profile", "debug"].include? build_mode

    export_method = options[:app_store] ? "app-store" : "ad-hoc"

    flutter = flutter_cmd

    UI.message("Going to build iOS bundleID #{bundle_id}, name #{app_name}, build name #{version} with number #{build} in mode #{build_mode}, signing for #{export_method}")
    UI.message("Using UL hostname \"#{universal_link_base}\", #{fake_attestation ? "fake" : "real"} key/app attestation and #{mock_repositories ? "mock repositories" : "Rust core"}")

    # Set up provisioning profiles using match
    match(
      type: options[:app_store] ? "appstore" : "adhoc",
      readonly: true,
      git_basic_authorization: options[:match_basic_auth],
      keychain_password: options[:keychain_password]
    )

    # Update the Xcode project so that Flutter can produce a signed build archive
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "wallet_app/ios/Runner.xcodeproj",
      bundle_identifier: bundle_id,
      code_sign_identity: "iPhone Distribution",
      profile_name: Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING][bundle_id]
    )

    # Set the app name and have Flutter build it
    Dir.chdir("../wallet_app") do
      sh(*flutter, "pub", "get")

      sh(*flutter, "pub", "run", "rename", "setAppName", "--targets", "ios", "--value", app_name)

      sh(*flutter, "build", "ipa",
            "--build-number", build.to_s,
            "--build-name", version.to_s,
            "--#{build_mode}",
            "--export-method", export_method,
            "--dart-define=FAKE_ATTESTATION=#{fake_attestation}",
            "--dart-define=MOCK_REPOSITORIES=#{mock_repositories}",
            "--dart-define=MOCK_RELYING_PARTY_URL=#{mock_relying_party_url}",
            "--dart-define=UL_HOSTNAME=#{universal_link_base}",
            "--dart-define=SENTRY_DSN=#{sentry_dsn}",
            "--dart-define=SENTRY_ENVIRONMENT=#{sentry_environment}",
            "--dart-define=SENTRY_RELEASE=#{sentry_release}",
      )

      upload_sentry_symbols
    end

    # Create an .ipa file from the archive produce by Flutter
    build_app(
      skip_build_archive: true,
      archive_path: "wallet_app/build/ios/archive/Runner.xcarchive",
      output_name: "#{bundle_id}-#{version}.ipa"
    )
  end

  desc "Deploy iOS app"
  lane :deploy do |options|
    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") if bundle_id.blank?

    upload_to_testflight(skip_submission: true, app_identifier: bundle_id)
  end

  desc "Upload iOS app to BrowserStack"
  lane :browserstack do |options|
    ipa_file = options[:ipa_file]
    user = options[:user]
    key = options[:key]

    upload_to_browserstack(file: ipa_file, user: user, key: key, custom_id: "NLWalletIos")
  end
end
