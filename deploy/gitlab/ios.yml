test-ios:
  extends: [.env-macos-runner, .ruby-cache-macos]
  rules: !reference [.default-or-release-or-merge-request, rules]
  artifacts:
    name: test-ios
    when: always
    reports:
      coverage_report:
        path: fastlane/test_output/cobertura.xml
        coverage_format: cobertura
      junit: fastlane/test_output/report.junit
    paths:
      - "fastlane/test_output/*"
      - "wallet_core/wallet/platform_support/ios/compile_platform_support.log"
  script:
    - bundle install
    - bundle exec fastlane ios test
  after_script:
    - deploy/bin/store-artifact.sh fastlane/test_output/report.junit qt/quality-time/junit-results/ios.xml
    - deploy/bin/store-artifact.sh fastlane/test_output/cobertura.xml qt/quality-time/ios-cobertura.xml

### iOS Building
.build-ios-app:
  extends: [.sentry-env, .env-k8s, .env-macos-runner, .ruby-cache-macos]
  needs:
    - job: test-flutter
      artifacts: false
    - job: test-flutter-ui
      artifacts: false
    - job: test-codegen
      artifacts: false
    - job: test-rust
      artifacts: false
    - job: test-rust-doctest
      artifacts: false
    - job: test-ios
      artifacts: false
    - job: test-rust-compilation-ios
      artifacts: false
  artifacts:
    name: wallet-ios
    when: always
    paths:
      - "*.ipa"
      - "fastlane/entitlements.plist"
      - "wallet_app/build/ios/archive/Runner.xcarchive"
      - "wallet_app/build/ios/Runner.entitlements"
      - "wallet_app/ios/Flutter/Generated.xcconfig"
      - "wallet_app/ios/compile_rust_core.log"
      - "wallet_app/ios/*.xcactivitylog"
  variables:
    APPLE_ATTESTATION_ENVIRONMENT: "production"
  script:
    - VERSION=${CI_COMMIT_TAG#v}
    - set -euo pipefail
    - MATCH_PASSWORD="$(kubectl get secret nl-wallet-fastlane-match -o jsonpath='{.data.password}' | base64 --decode)"
    - export MATCH_PASSWORD
    - git config --global url.https://repo-certificates-deploy-token:${REPO_CERTIFICATES_DEPLOY_TOKEN}@$CI_SERVER_HOST.insteadOf https://$CI_SERVER_HOST
    - bundle install
    # Build
    - |
      bundle exec fastlane ios build \
        app_name:"${APP_NAME}" \
        build_mode:"${APP_BUILD_MODE}" \
        mock:"${APP_MOCK}" \
        fake_attestation:"${FAKE_ATTESTATION:-false}" \
        demo_index_url:"${DEMO_INDEX_URL:-}" \
        universal_link_base:"${UL_HOSTNAME:-}" \
        build:"$((CI_PIPELINE_IID + APP_BUILD_OFFSET))" \
        version:"${VERSION:-}"
    # Entitlements file
    - bundle exec fastlane ios entitlements
    # Sign
    - |
      bundle exec fastlane ios sign \
        app_store:"true" \
        bundle_id:"${INTERNAL_APP_IDENTIFIER}${APP_PACKAGE_IDENTIFIER_SUFFIX:+.$APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        version:"${VERSION:-}"
  after_script:
    - find $HOME/Library/Developer/Xcode/DerivedData/Runner-* -name '*.xcactivitylog' -print0 | xargs -0 -I{} cp {} wallet_app/ios/

.build-ios-app-ont:
  extends: .build-ios-app
  rules: !reference [.default-branch, rules]
  needs:
    - !reference [.build-ios-app, needs]
    - job: build-env-ont
      artifacts: true
    - job: wallet-config-ont
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"
    APP_NAME: "NL Wallet (latest)"
    APP_MOCK: "false"

build-ios-app-ont:
  extends: .build-ios-app-ont
  variables:
    APP_BUILD_MODE: "release"

build-ios-app-ont-profile:
  extends: .build-ios-app-ont
  variables:
    APP_BUILD_MODE: "profile"
    FAKE_ATTESTATION: "true"

.build-ios-app-release-tag:
  extends: .build-ios-app
  rules: !reference [.release-tag, rules]
  variables:
    APP_MOCK: "false"
    APP_BUILD_MODE: "release"

build-ios-app-mock:
  extends: .build-ios-app-release-tag
  rules:
    - !reference [.on-mock-build, rules]
  needs: []
  variables:
    APP_MOCK: "true" # override .build-ios-app-release-tag
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"
    APP_NAME: "NL Wallet (mock)"
    CONFIG_ENV: "dev"
    SENTRY_ENVIRONMENT: "mock"

build-ios-app-demo:
  extends: .build-ios-app-release-tag
  rules:
    - !reference [.on-demo-build, rules]
  needs:
    - job: build-env-demo
      artifacts: true
    - job: wallet-config-demo
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"
    APP_NAME: "NL Wallet (demo)"

build-ios-app-acceptance:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
    - job: build-env-acceptance
      artifacts: true
    - job: wallet-config-acceptance
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "acceptance"
    APP_NAME: "NL Wallet (acceptance)"

build-ios-app-preproduction:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
    - job: build-env-preproduction
      artifacts: true
    - job: wallet-config-preproduction
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "preproduction"
    APP_NAME: "NL Wallet (pre-production)"

build-ios-app-production:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
    - job: build-env-production
      artifacts: true
    - job: wallet-config-production
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: ""
    APP_NAME: "NL Wallet"

## iOS Deploying
.deploy-ios-app:
  extends: [.env-k8s, .env-macos-runner, .ruby-cache-macos]
  script:
    - APP_STORE_CONNECT_SECRETS_BASE64_JSON="$(kubectl get secret nl-wallet-app-store-api-key -o jsonpath='{.data}')"
    - export APP_STORE_CONNECT_SECRETS_BASE64_JSON
    - bundle install
    - |
      bundle exec fastlane ios ci_deploy \
        bundle_id:"${INTERNAL_APP_IDENTIFIER}${APP_PACKAGE_IDENTIFIER_SUFFIX:+.$APP_PACKAGE_IDENTIFIER_SUFFIX}"

deploy-ios-app-ont:
  extends: .deploy-ios-app
  rules: !reference [.default-branch, rules]
  needs:
    - job: build-ios-app-ont
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"

.deploy-ios-app-release-tag:
  extends: .deploy-ios-app
  rules: !reference [.release-tag, rules]

deploy-ios-app-mock:
  extends: .deploy-ios-app-release-tag
  rules:
    - !reference [.on-mock-build, rules]
  needs:
    - job: build-ios-app-mock
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"

deploy-ios-app-demo:
  extends: .deploy-ios-app-release-tag
  rules:
    - !reference [.on-demo-build, rules]
  needs:
    - job: build-ios-app-demo
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"

deploy-ios-app-acceptance:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-acceptance
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "acceptance"

deploy-ios-app-preproduction:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-preproduction
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "preproduction"

deploy-ios-app-production:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-production
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: ""
