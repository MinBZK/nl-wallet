.rust:
  image: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ci-rust:${BUILD_TAG}"

lint-rust:
  extends: .rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  before_script:
    - set -euxo pipefail
  script:
    # Check Rust formatting
    - find wallet_core -mindepth 2 -type f -name Cargo.toml -print0 | xargs -0 -n1 -I {} cargo fmt --manifest-path {} -- --check
    # Check clippy
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    - grep ^exclude wallet_core/Cargo.toml | grep -oP '".*?"' | tr -d '"' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings

.test-rust:
  extends: .rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  tags:
    - wallet-ci
  variables:
    NEXTEST_PROFILE: "ci"
  before_script:
    - set -euxo pipefail

test-rust:
  extends: .test-rust
  variables:
    SKIP_DIGID_CONNECTOR: "true"
    SKIP_WALLET_WEB: "true"
    WALLET_PROVIDER_DATABASE__HOST: "postgres"
    VERIFICATION_SERVER_STORE_URL: "postgres://postgres:postgres@postgres:5432/verification_server"
    PID_ISSUER_STORE_URL: "postgres://postgres:postgres@postgres:5432/pid_issuer"
  services:
    - name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-postgres:${BUILD_TAG}"
      alias: postgres
      variables:
        POSTGRESQL_USER: "postgres"
        POSTGRESQL_PASSWORD: "postgres"
        POSTGRESQL_MULTIPLE_DATABASES: "wallet_provider,verification_server,pid_issuer"
  script:
    - set -euxo pipefail
    - ./scripts/setup-devenv.sh
    - cd wallet_core
    - cargo run --bin wallet_provider_migrations --locked -- up
    - DATABASE_URL="${VERIFICATION_SERVER_STORE_URL}" cargo run --bin wallet_server_migrations --locked -- up
    - DATABASE_URL="${PID_ISSUER_STORE_URL}" cargo run --bin wallet_server_migrations --locked -- up
    - RUST_BACKTRACE=1 cargo llvm-cov nextest --features integration_test --locked --lcov --output-path lcov.info
    - cargo llvm-cov report --locked --cobertura --output-path rust-coverage.xml
  after_script:
    - deploy/bin/store-artifact.sh wallet_core/target/nextest/ci/junit.xml qt/quality-time/junit-results/rust.xml
  artifacts:
    name: test-rust
    reports:
      coverage_report:
        path: wallet_core/rust-coverage.xml
        coverage_format: cobertura
      junit: wallet_core/target/nextest/ci/junit.xml
    paths:
      - wallet_core/lcov.info
      - wallet_core/target/nextest/ci/junit.xml

test-rust-gba-pid:
  extends: [.env-ont-k8s, .test-rust]
  needs:
    - job: wallet-config-ont
      artifacts: true
  variables:
    APPLE_ATTESTATION_ENVIRONMENT: "production"
    CONFIG_ENV: ont
    UNIVERSAL_LINK_BASE: "https://$APP_EXTERNAL_HOSTNAME_ONT/deeplink/"
  script:
    - cd wallet_core/tests_integration
    - |
      set +x
      GBA_JSON=$(kubectl get secret nl-wallet-gba-hc-converter-secrets -o json | jq -r '.data | map_values(@base64d)')
      cat <<EOD > gba_hc_converter.toml
      ip = "0.0.0.0"
      port = 3008

      [run_mode.gbav]
      adhoc_url = "https://lap.gbav.idm.diginetwerk.net/gba-v/online/lo3services/adhoc"
      username = "$(jq -r '.username' <<< "$GBA_JSON")"
      password = "$(jq -r '.password' <<< "$GBA_JSON")"
      client_cert = "$(jq -r '.client_cert' <<< "$GBA_JSON")"
      client_cert_key = "$(jq -r '.client_cert_key' <<< "$GBA_JSON")"
      trust_anchor = "$(jq -r '.trust_anchor' <<< "$GBA_JSON")"
      EOD
      sha256sum gba_hc_converter.toml
      unset $GBA_JSON
      set -x
    - RUST_BACKTRACE=1 cargo llvm-cov nextest --features gba_pid_test --locked --lcov --output-path ../lcov-gba-pid.info
    - cargo llvm-cov report --locked --cobertura --output-path ../rust-gba-pid-coverage.xml
    - mv ../target/nextest/ci/junit.xml ../target/nextest/ci/junit-gba-pid.xml
  after_script:
    - deploy/bin/store-artifact.sh wallet_core/target/nextest/ci/junit-gba-pid.xml qt/quality-time/junit-results/rust-gba-pid.xml
  artifacts:
    name: test-rust-gba-pid
    reports:
      coverage_report:
        path: wallet_core/rust-gba-pid-coverage.xml
        coverage_format: cobertura
      junit: wallet_core/target/nextest/ci/junit-gba-pid.xml
    paths:
      - wallet_core/lcov-gba-pid.info
      - wallet_core/target/nextest/ci/junit-gba-pid.xml

test-rust-doctest:
  extends: .rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  before_script:
    - set -euxo pipefail
    - cd wallet_core
  script:
    - RUST_BACKTRACE=1 cargo test --doc --locked

.test-rust-compilation:
  rules: !reference [.default-or-release-or-merge-request, rules]
  variables:
    RUSTFLAGS: "-D warnings"
    CONFIG_ENV: "dev"

test-rust-compilation-android:
  image: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ci-android:${BUILD_TAG}"
  extends: [.test-rust-compilation]
  script:
    - (cd wallet_core; cargo ndk --target arm64-v8a check --package flutter_api --locked --release)

test-rust-compilation-ios:
  extends: [.test-rust-compilation, .env-macos-runner]
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package flutter_api --target aarch64-apple-ios

.build-binary:
  extends: .rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-doctest
      artifacts: false
    - job: test-rust-gba-pid
      artifacts: false
  variables:
    RUSTFLAGS: "-D warnings"
  before_script:
    - set -euxo pipefail
    - cd wallet_core

test-configuration-server-compilation:
  extends: .build-binary
  script:
    - cargo check --locked --release --package configuration_server --bin configuration_server

build-update-policy-server-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "update_policy_server" --bin update_policy_server
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "update_policy_server" --bin update_policy_server
  artifacts:
    name: update_policy_server
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/update_policy_server
      - wallet_core/target/x86_64-unknown-linux-musl/release/update_policy_server

build-wallet-provider-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "wallet_provider" --bin wallet_provider
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_provider" --bin wallet_provider
  artifacts:
    name: wallet_provider
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/wallet_provider
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_provider

build-wallet-provider-migrations-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_provider_migrations" --bin wallet_provider_migrations
  artifacts:
    name: wallet_provider_migrations
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_provider_migrations

build-pid-issuer-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package pid_issuer --bin pid_issuer --no-default-features --features postgres
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package pid_issuer --bin pid_issuer --no-default-features --features postgres
  artifacts:
    name: pid_issuer
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/pid_issuer
      - wallet_core/target/x86_64-unknown-linux-musl/release/pid_issuer

build-verification-server-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package verification_server --bin verification_server --no-default-features --features postgres
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package verification_server --bin verification_server --no-default-features --features postgres
  artifacts:
    name: verification_server
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/verification_server
      - wallet_core/target/x86_64-unknown-linux-musl/release/verification_server

build-wallet-server-migrations-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_server_migrations" --bin wallet_server_migrations
  artifacts:
    name: wallet_server_migrations
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_server_migrations

build-demo-relying-party-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "mock_relying_party" --bin mock_relying_party
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "mock_relying_party" --bin mock_relying_party
  artifacts:
    name: mock_relying_party
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/mock_relying_party
      - wallet_core/target/x86_64-unknown-linux-musl/release/mock_relying_party

build-gba-hc-converter-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "gba_hc_converter" --bin gba_hc_converter
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "gba_hc_converter" --bin gba_hc_converter
  artifacts:
    name: gba_hc_converter
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/gba_hc_converter
      - wallet_core/target/x86_64-unknown-linux-musl/release/gba_hc_converter

build-gba-fetch-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --package "gba_hc_converter" --bin gba_fetch
  artifacts:
    name: gba_fetch
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/debug/gba_fetch

build-gba-encrypt-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --package "gba_hc_converter" --bin gba_encrypt
  artifacts:
    name: gba_encrypt
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/debug/gba_encrypt

build-gba-fetch-frontend-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "gba_hc_converter" --bin gba_fetch_frontend
  artifacts:
    name: gba_fetch_frontend
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/gba_fetch_frontend
