.rust:
  image: "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/nl-wallet-app-builder-ci-rust:${BUILD_TAG}"
  tags:
    - linux

lint-rust:
  extends: .rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  before_script:
    - set -euxo pipefail
  script:
    # Check Rust formatting
    - find wallet_core -mindepth 2 -type f -name Cargo.toml -print0 | xargs -0 -n1 -I {} cargo fmt --manifest-path {} -- --check
    # Check clippy
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    - grep '^exclude' wallet_core/Cargo.toml | grep -oe '\[.*\]' | jq -r '.[]' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    # Again clippy with json
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests --message-format=json -- -Dwarnings > wallet_core/clippy.json
    - grep '^exclude' wallet_core/Cargo.toml | grep -oe '\[.*\]' | jq -r '.[]' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests --message-format=json -- -Dwarnings >> wallet_core/clippy.json
  artifacts:
    name: lint-rust
    paths:
     - wallet_core/clippy.json

.test-rust:
  extends: .rust
  variables:
    NEXTEST_PROFILE: "ci"
  before_script:
    - set -euxo pipefail

test-rust:
  extends: .test-rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  variables:
    SKIP_DIGID_CONNECTOR: "true"
    SKIP_WALLET_WEB: "true"
  services:
    - name: "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/nl-wallet-app-builder-postgres:${BUILD_TAG}"
      alias: postgres
      variables:
        POSTGRESQL_USER: "postgres"
        POSTGRESQL_PASSWORD: "postgres"
        POSTGRESQL_MULTIPLE_DATABASES: "wallet_provider,verification_server,issuance_server,pid_issuer"
  script:
    - |
      cat > scripts/.env <<EOD
      export DB_HOST=postgres
      export DB_USERNAME=postgres
      export DB_PASSWORD=postgres
      EOD
    - ./scripts/setup-devenv.sh
    - cd wallet_core
    - cargo run --bin wallet_provider_migrations --locked -- up
    - |
      for name in pid_issuer verification_server issuance_server; do
        DATABASE_URL="postgres://postgres:postgres@postgres:5432/$name" \
          cargo run --bin wallet_server_migrations --locked -- up
      done
    - RUST_BACKTRACE=1 cargo llvm-cov nextest --features integration_test --locked --lcov --output-path lcov.info
    - cargo llvm-cov report --locked --cobertura --output-path rust-coverage.xml
  after_script:
    - deploy/bin/store-artifact.sh wallet_core/target/nextest/ci/junit.xml qt/quality-time/junit-results/rust.xml
  artifacts:
    name: test-rust
    reports:
      coverage_report:
        path: wallet_core/rust-coverage.xml
        coverage_format: cobertura
      junit: wallet_core/target/nextest/ci/junit.xml
    paths:
      - wallet_core/lcov.info
      - wallet_core/target/nextest/ci/junit.xml

test-rust-gba-pid:
  extends: [.env-k8s, .test-rust]
  rules: !reference [.default-branch, rules]
  needs:
    - job: deploy-apps-ont
      artifacts: false
    - job: build-env-ont
      artifacts: true
    - job: wallet-config-ont
      artifacts: true
  variables:
    APPLE_ATTESTATION_ENVIRONMENT: "production"
  script:
    - cd wallet_core/tests_integration
    - |
      set +x
      GBA_VARS=$(kubectl get secret nl-wallet-gba-hc-converter-secrets -o json | jq -r '.data | to_entries | map("gba_\(.key)=\(.value | @base64d)") | .[]')
      eval $GBA_VARS

      cat <<EOD > gba_hc_converter.toml
      ip = "0.0.0.0"
      port = 3008

      [run_mode.gbav]
      adhoc_url = "$gba_adhoc_url"
      username = "$gba_username"
      password = "$gba_password"
      client_cert = "$gba_client_cert"
      client_cert_key = "$gba_client_cert_key"
      trust_anchor = "$gba_trust_anchor"
      EOD
      sha256sum gba_hc_converter.toml
      set -x
    - RUST_BACKTRACE=1 cargo llvm-cov nextest --features gba_pid_test --locked --lcov --output-path ../lcov-gba-pid.info --fail-fast
    - cargo llvm-cov report --locked --cobertura --output-path ../rust-gba-pid-coverage.xml
    - mv ../target/nextest/ci/junit.xml ../target/nextest/ci/junit-gba-pid.xml
  after_script:
    - deploy/bin/store-artifact.sh wallet_core/target/nextest/ci/junit-gba-pid.xml qt/quality-time/junit-results/rust-gba-pid.xml
  artifacts:
    name: test-rust-gba-pid
    reports:
      coverage_report:
        path: wallet_core/rust-gba-pid-coverage.xml
        coverage_format: cobertura
      junit: wallet_core/target/nextest/ci/junit-gba-pid.xml
    paths:
      - wallet_core/lcov-gba-pid.info
      - wallet_core/target/nextest/ci/junit-gba-pid.xml

test-rust-doctest:
  extends: .rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  before_script:
    - set -euxo pipefail
    - cd wallet_core
  script:
    - RUST_BACKTRACE=1 cargo test --doc --locked

.test-rust-compilation:
  rules: !reference [.default-or-release-or-merge-request, rules]
  variables:
    RUSTFLAGS: "-D warnings"
    CONFIG_ENV: "dev"
  before_script:
    - cd wallet_core

test-rust-compilation-android:
  image: "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/nl-wallet-app-builder-ci-android:${BUILD_TAG}"
  extends: [.test-rust-compilation]
  script:
    - cargo ndk --target arm64-v8a check --package flutter_api --locked --release

test-rust-compilation-ios:
  extends: [.test-rust-compilation, .env-macos-runner]
  script:
    - cargo check --locked --release --package flutter_api --target aarch64-apple-ios

test-compilation-performance-test:
  extends: [.test-rust-compilation, .rust]
  rules: !reference [.merge-request, rules]
  script:
    - cargo check --package "tests_integration" --bin performance_test --features performance_test,allow_insecure_url

.build-binary:
  extends: .rust
  rules: !reference [.default-or-release-or-merge-request, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-doctest
      artifacts: false
  variables:
    RUSTFLAGS: "-D warnings"
  before_script:
    - set -euxo pipefail
    - cd wallet_core

test-configuration-server-compilation:
  extends: .build-binary
  script:
    - cargo check --locked --release --package configuration_server --bin configuration_server

build-update-policy-server-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "update_policy_server" --bin update_policy_server
  artifacts:
    name: update_policy_server
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/update_policy_server

build-wallet-provider-binary:
  extends: .build-binary
  script:
    # Use glibc binary because it needs to work with dynamically loaded PKCS11 library
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "wallet_provider" --bin wallet_provider
  artifacts:
    name: wallet_provider
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/wallet_provider

build-wallet-provider-migrations-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_provider_migrations" --bin wallet_provider_migrations
  artifacts:
    name: wallet_provider_migrations
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_provider_migrations

build-pid-issuer-binary:
  extends: .build-binary
  script:
    # Use musl since we only use software keys on pid-issuer for our own environments (docker image is from scratch)
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package pid_issuer --bin pid_issuer --no-default-features --features postgres
  artifacts:
    name: pid_issuer
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/pid_issuer

build-verification-server-binary:
  extends: .build-binary
  script:
    # Also build for glibc because it is needed to work with dynamically loaded PKCS11 library
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package verification_server --bin verification_server --no-default-features --features postgres
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package verification_server --bin verification_server --no-default-features --features postgres
  artifacts:
    name: verification_server
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/verification_server
      - wallet_core/target/x86_64-unknown-linux-musl/release/verification_server

build-issuance-server-binary:
  extends: .build-binary
  script:
    # Also build for glibc because it is needed to work with dynamically loaded PKCS11 library
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package issuance_server --bin issuance_server --no-default-features --features postgres
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package issuance_server --bin issuance_server --no-default-features --features postgres
  artifacts:
    name: issuance_server
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/issuance_server
      - wallet_core/target/x86_64-unknown-linux-musl/release/issuance_server

build-wallet-server-migrations-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_server_migrations" --bin wallet_server_migrations
  artifacts:
    name: wallet_server_migrations
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_server_migrations

build-demo-relying-party-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "demo_relying_party" --bin demo_relying_party
  artifacts:
    name: demo_relying_party
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/demo_relying_party

build-demo-issuer-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "demo_issuer" --bin demo_issuer
  artifacts:
    name: demo_issuer
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/demo_issuer

build-demo-index-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "demo_index" --bin demo_index
  artifacts:
    name: demo_index
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/demo_index

build-gba-hc-converter-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "gba_hc_converter" --bin gba_hc_converter
  artifacts:
    name: gba_hc_converter
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/gba_hc_converter

build-gba-fetch-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --package "gba_hc_converter" --bin gba_fetch
  artifacts:
    name: gba_fetch
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/debug/gba_fetch

build-gba-encrypt-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --package "gba_hc_converter" --bin gba_encrypt
  artifacts:
    name: gba_encrypt
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/debug/gba_encrypt

build-gba-fetch-frontend-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "gba_hc_converter" --bin gba_fetch_frontend
  artifacts:
    name: gba_fetch_frontend
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/gba_fetch_frontend

build-performance-test:
  extends: .build-binary
  rules: !reference [.default-branch, rules]
  needs:
    - !reference [.build-binary, needs]
    - job: build-env-ont
      artifacts: true
    - job: wallet-config-ont
      artifacts: true
  script:
    - cargo build --locked --release --package "tests_integration" --bin performance_test --features performance_test,allow_insecure_url
  variables:
    APPLE_ATTESTATION_ENVIRONMENT: "production"
  artifacts:
    name: performance-test
    paths:
      - wallet_core/target/release/performance_test
