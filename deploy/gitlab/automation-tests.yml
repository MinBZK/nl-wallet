automation-compile-check:
  rules: !reference [.merge-request, rules]
  script:
    - java -version
    - cd uiautomation
    - ./gradlew --no-daemon compileTestKotlin

.run-automation-tests-base:
  extends: .env-ont-k8s
  environment:
    action: access
  before_script:
    - BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_USER
    - BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - export BROWSERSTACK_KEY
    - java -version
    - cd uiautomation
    - set -euxo pipefail
  variables:
    APP_IDENTIFIER: "nl.ictu.edi.wallet.latest"
    DEVICE_NAME: "Google Pixel 8"
    PLATFORM_NAME: "Android"
    PLATFORM_VERSION: "14.0"

.run-automation-tests-common-setup:
  resource_group: automation-tests
  extends: .run-automation-tests-base
  artifacts:
    name: uiautomation
    when: always
    paths:
      - uiautomation/build/test-results/**/*.xml
      - uiautomation/build/allure-results
      - uiautomation/build/reports
    reports:
      junit: uiautomation/build/test-results/**/*.xml

.run-automation-tests-default:
  extends: .run-automation-tests-common-setup
  script:
    - ./gradlew --no-daemon --info --stacktrace test --tests $TESTS
      -Dtest.config.app.identifier="${APP_IDENTIFIER}_${CI_COMMIT_SHA}"
      -Dtest.config.device.name="$DEVICE_NAME"
      -Dtest.config.platform.name="$PLATFORM_NAME"
      -Dtest.config.platform.version="$PLATFORM_VERSION"
      -Dtest.config.remote=true
      -Dfile.encoding=UTF-8 || true
    # Allow failure in tests and pass when there are test results (Quality Time should report on failed test)
    - compgen -G "build/test-results/test/*.xml"
  rules:
    - !reference [.on-schedule, rules]

run-automation-tests-suite-appstart:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.AppStartTestSuite" }

run-automation-tests-suite-introduction:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.IntroductionTestSuite" }

run-automation-tests-suite-security:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.SecurityTestSuite" }

run-automation-tests-suite-confirm:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.ConfirmTestSuite" }

run-automation-tests-suite-personalize:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.PersonalizeTestSuite" }

run-automation-tests-suite-dashboard:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.DashboardTestSuite" }

run-automation-tests-suite-card:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.CardTestSuite" }

run-automation-tests-suite-menu:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.MenuTestSuite" }

run-automation-tests-suite-history:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.HistoryTestSuite" }

run-automation-tests-suite-settings:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.SettingsTestSuite" }

run-automation-tests-suite-lock:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.LockTestSuite" }

run-automation-tests-suite-web:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.WebTestSuite" }

run-automation-tests-suite-disclosure:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.DisclosureTestSuite" }

run-automation-tests-publish-results:
  rules: !reference [.run-automation-tests-default, rules]
  needs:
    - { job: run-automation-tests-suite-appstart }
    - { job: run-automation-tests-suite-introduction }
    - { job: run-automation-tests-suite-security }
    - { job: run-automation-tests-suite-confirm }
    - { job: run-automation-tests-suite-personalize }
    - { job: run-automation-tests-suite-dashboard }
    - { job: run-automation-tests-suite-card }
    - { job: run-automation-tests-suite-menu }
    - { job: run-automation-tests-suite-history }
    - { job: run-automation-tests-suite-settings }
    - { job: run-automation-tests-suite-lock }
    - { job: run-automation-tests-suite-web }
  script:
    - deploy/bin/store-artifact-zip.sh qt/quality-time/junit-results/e2e.zip uiautomation/build/test-results/test/*.xml
    - deploy/bin/store-artifact-zip.sh qt/quality-time/allure-results/e2e.zip uiautomation/build/allure-results/*

run-automation-smoke-test-ont:
  extends: .run-automation-tests-common-setup
  rules: !reference [.default-branch, rules]
  needs:
    - job: upload-browserstack-android-app-ont
      artifacts: false
    - job: deploy-apps-ont
      artifacts: false
  script:
    - ./gradlew --no-daemon --info --stacktrace smokeTest
      -Dtest.config.app.identifier="${APP_IDENTIFIER}_${CI_COMMIT_SHA}"
      -Dtest.config.device.name="$DEVICE_NAME"
      -Dtest.config.platform.name="$PLATFORM_NAME"
      -Dtest.config.platform.version="$PLATFORM_VERSION"
      -Dtest.config.remote=true
      -Dfile.encoding=UTF-8

browsertests-format-lint:
  rules: !reference [.default-or-merge-request, rules]
  image: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ci-node:${BUILD_TAG}"
  script:
    - cd browsertests
    - npm ci
    - npm run format-check
    - npm run lint

.run-browsertest-common:
  image: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ci-playwright:${BUILD_TAG}"
  extends: .env-ont-k8s

run-wallet-web-browsertest-test-ont:
  extends: .run-browsertest-common
  rules:
    - !reference [.default-branch, rules]
  needs:
    - job: deploy-apps-ont
      artifacts: false
  script: |
    cd browsertests
    npm ci
    cd packages/wallet-web
    npx playwright install chromium webkit
    npm run test:ci
  variables:
    DEMO_INDEX_EXTERNAL_HOSTNAME: "${DEMO_INDEX_EXTERNAL_HOSTNAME_ONT}"
  after_script:
    - deploy/bin/store-artifact.sh browsertests/packages/wallet-web/test-results/results.xml qt/quality-time/junit-results/browsertest-wallet-web.xml
    - deploy/bin/store-artifact-zip.sh qt/quality-time/allure-results/browsertest-wallet-web.zip browsertests/packages/wallet-web/allure-results/*
  artifacts:
    name: browsertest-demo-rp
    when: always
    paths:
      - browsertests/packages/wallet-web/test-results/
      - browsertests/packages/wallet-web/allure-results/
    reports:
      junit: browsertests/packages/wallet-web/test-results/*.xml

run-fallback-pages-browsertest-test-ont:
  extends: .run-browsertest-common
  rules:
    - !reference [.default-branch, rules]
  needs:
    - job: deploy-apps-ont
      artifacts: false
  script: |
    cd browsertests
    npm ci
    cd packages/fallback-pages
    npx playwright install chromium webkit
    npm run test:ci
  variables:
    UNIVERSAL_LINK_BASE: "https://$APP_EXTERNAL_HOSTNAME_ONT/deeplink/"
  after_script:
    - deploy/bin/store-artifact.sh browsertests/packages/fallback-pages/test-results/results.xml qt/quality-time/junit-results/browsertest-fallback-pages.xml
    - deploy/bin/store-artifact-zip.sh qt/quality-time/allure-results/browsertest-fallback-pages.zip browsertests/packages/fallback-pages/allure-results/*
  artifacts:
    name: browsertest-fallback-page
    when: always
    paths:
      - browsertests/packages/fallback-pages/test-results/
      - browsertests/packages/fallback-pages/allure-results/
    reports:
      junit: browsertests/packages/fallback-pages/test-results/*.xml

run-gba-fetch-browsertest-test-ont:
  extends: .run-browsertest-common
  rules:
    - !reference [.on-schedule, rules]
  before_script: |
    kubectl get secret nl-wallet-gba-fetch-browsertest-ont-client-secret -o jsonpath="{.data.gba_fetch_e2e\.p12}" | base64 -d > browsertests/packages/gba-fetch/config/gba_fetch_client_cert_ont.p12
    export GBA_FETCH_FRONTEND_CLIENT_CERT_PATH="./gba_fetch_client_cert_ont.p12"
    export GBA_FETCH_FRONTEND_CLIENT_CERT_PASSPHRASE=$(kubectl get secret nl-wallet-gba-fetch-browsertest-ont-client-secret -o jsonpath='{.data.passphrase}' | base64 --decode)
    export GBA_FETCH_FRONTEND_INTERNAL_HOSTNAME="${GBA_FETCH_FRONTEND_INTERNAL_HOSTNAME_ONT}"
  script: |
    cd browsertests
    npm ci
    cd packages/gba-fetch
    npx playwright install chromium
    npm run test:authenticated
    npm run test:unauthenticated
  after_script:
    - deploy/bin/store-artifact-zip.sh qt/quality-time/junit-results/browsertest-gba-fetch.zip browsertests/packages/gba-fetch/test-results-*/*.xml
    - deploy/bin/store-artifact-zip.sh qt/quality-time/allure-results/browsertest-gba-fetch.zip browsertests/packages/gba-fetch/allure-results/*
  artifacts:
    name: browsertest-gba-fetch
    when: always
    paths:
      - browsertests/packages/gba-fetch/test-results-*/
      - browsertests/packages/gba-fetch/allure-results/
    reports:
      junit: browsertests/packages/gba-fetch/test-results-*/*.xml

run-performance-test-ont:
  extends: .env-ont-k8s
  rules: !reference [.default-branch, rules]
  needs:
    - job: build-performance-test
      artifacts: true
    - job: deploy-apps-ont
      artifacts: false
  script: wallet_core/tests_integration/run_performance_test.sh --skip-build 50
  allow_failure: true

create-pipeline-for-running-test-on-all-browserstack-androids:
  resource_group: automation-tests
  extends: .run-automation-tests-base
  needs:
    - !reference [run-automation-smoke-test-ont, needs]
  rules:
    - !reference [.default-branch, rules]
  allow_failure: true
  when: manual
  script: |
      TEST_SETS=$(curl -u "$BROWSERSTACK_USER:$BROWSERSTACK_KEY" -X GET "https://api-cloud.browserstack.com/app-automate/devices.json" |
                  jq -r '.[] | select(.os == "android" and .realMobile == true) | "\(.device)|\(.os_version)"')

      echo "Retrieved real Android devices: $TEST_SETS"

      if [[ -z $TEST_SETS ]]; then
        echo "No real Android devices found in BrowserStack!"
        exit 1
      fi

      cd "$CI_PROJECT_DIR"

      cat <<EOT > test-all-android-devices.yml
      include:
        - ".gitlab-ci.yml"
      stages:
        - test
        - merge-results

      merge-device-data:
        stage: merge-results
        rules:
          - when: manual
        script:
          - |
            mkdir -p merged-data
            output_file="merged-data/merged-device-data.json"
            echo "[" > "\$output_file"
            first=true
            find . -type f -path "uiautomation/device-data/*.json" -print0 | while IFS= read -r -d '' file; do
              if [ "\$first" = true ]; then
                first=false
              else
                echo "," >> "\$output_file"
              fi
              cat "\$file" >> "\$output_file"
            done
            echo "]" >> "\$output_file"
        artifacts:
          when: always
          paths:
            - merged-data/merged-device-data.json

      .run-automation-test-ont:
        stage: test
        rules:
          - if: \$CI_PIPELINE_SOURCE == "parent_pipeline"
        extends: .run-automation-tests-common-setup
        script:
          - |
            ./gradlew --no-daemon --info --stacktrace runOnAll \\
              -Dtest.config.app.identifier="\$APP_ID" \\
              -Dtest.config.device.name="\$DEVICE_NAME" \\
              -Dtest.config.platform.name="\$PLATFORM_NAME" \\
              -Dtest.config.platform.version="\$PLATFORM_VERSION" \\
              -Dtest.config.remote=true \\
              -Dfile.encoding=UTF-8
        after_script:
          - |
            echo "start time: \$CI_JOB_STARTED_AT"
            export END_DATE=\$(date)
            echo "end time: \$END_DATE"
            echo "DEVICE_NAME: \$DEVICE_NAME"
            echo "PLATFORM_VERSION: \$PLATFORM_VERSION"
            mkdir -p "\$CI_PROJECT_DIR/uiautomation/device-data"
            echo "{\\"status\\": \\"\$CI_JOB_STATUS\\", \\"device_name\\": \\"\$DEVICE_NAME\\", \\"platform_version\\": \\"\$PLATFORM_VERSION\\", \\"start_date\\": \\"\$CI_JOB_STARTED_AT\\", \\"end_date\\": \\"\$END_DATE\\"}" > "\$CI_PROJECT_DIR/uiautomation/device-data/\${DEVICE_NAME}_\${PLATFORM_VERSION}.json"
        variables:
          APP_ID: "${APP_IDENTIFIER}_${CI_COMMIT_SHA}"
          PLATFORM_NAME: "Android"
        allow_failure: true
        artifacts:
          name: uiautomation
          when: always
          paths:
            - uiautomation/build/test-results/**/*.xml
            - uiautomation/build/allure-results
            - uiautomation/build/reports
            - uiautomation/device-data
      EOT

      while IFS="|" read -r DEVICE_NAME PLATFORM_VERSION; do
        JOB_NAME=$(echo "$DEVICE_NAME" | tr ' ' '_')

        cat <<EOT >> test-all-android-devices.yml

      run-$JOB_NAME$PLATFORM_VERSION:
        extends: .run-automation-test-ont
        variables:
          DEVICE_NAME: "$DEVICE_NAME"
          PLATFORM_VERSION: "$PLATFORM_VERSION"
      EOT
      done <<< "$TEST_SETS"

      echo "Generated test-all-android-devices.yml:"
      cat test-all-android-devices.yml
  artifacts:
    name: browserstack-all-devices
    paths:
      - test-all-android-devices.yml
    expire_in: 1 hour

run-pipeline-for-running-test-on-all-browserstack-androids:
  rules:
    - !reference [ .default-branch, rules ]
  needs:
    - job: create-pipeline-for-running-test-on-all-browserstack-androids
      artifacts: true
  trigger:
    include:
      - artifact: test-all-android-devices.yml
        job: create-pipeline-for-running-test-on-all-browserstack-androids
    strategy: depend
