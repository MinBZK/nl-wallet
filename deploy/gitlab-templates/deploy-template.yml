default:
  interruptible: true
  image: "${HARBOR_REGISTRY}/docker-hub-proxy/alpine/k8s:1.29.11"

variables:
  HELM_CHARTS_PATH: deploy/kubernetes/helm-charts

.deploy-base:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
  environment:
    name: ${K8S_CLUSTER}
    action: start
    kubernetes:
      namespace: ${K8S_NAMESPACE}

.build-helm-dependency:
  script: |
    chmod 0600 "${KUBECONFIG}"
    helm dependency build ${HELM_CHARTS_PATH}/${CHART_NAME}

.docker-login:
  script: |
    mkdir -p /root/.docker
    echo $DOCKER_AUTH_CONFIG > ~/.docker/config.json

.replace-chart-app-version:
  script: |
    yq -i ".appVersion = \"${IMAGE_TAG}\"" ${HELM_CHARTS_PATH}/${CHART_NAME}/Chart.yaml

.check-helm-install-status:
  script:
    - |
      if [ $? -ne 0 ]; then
        echo "Helm upgrade/install failed"
        exit 1
      fi

.deploy-postgres-cluster:
  script:
    - !reference [.build-helm-dependency, script]
    - !reference [.parse-config-files, script]
    - PATH_CHART=${HELM_CHARTS_PATH}/${CHART_NAME}
    - |
      helm upgrade --install --atomic --timeout 5m ${RELEASE_NAME} ${PATH_CHART} \
      --set global.imageRegistry=${HARBOR_REGISTRY} \
      $FILE_OPTIONS

.parse-config-files:
  script:
    - |
      IFS=',' read -r -a file_array <<< "$CONFIG_FILES"
      FILE_OPTIONS=""
      for file in "${file_array[@]}"; do
        FILE_OPTIONS+="-f $file "
      done

db-cluster-provider-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: database-cnpg
    RELEASE_NAME: db-cluster-provider
    CONFIG_NAME: provider
    CONFIG_FILES: "variables/${DEPLOY_ENV}/database/values.yaml,variables/${DEPLOY_ENV}/database/provider/values.yaml"
  script:
    - !reference [.deploy-postgres-cluster, script]

db-cluster-demo-rp-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: database-cnpg
    RELEASE_NAME: db-cluster-demo-rp
    CONFIG_NAME: demo-rp
    CONFIG_FILES: "variables/${DEPLOY_ENV}/database/values.yaml,variables/${DEPLOY_ENV}/database/demo-rp/values.yaml"
  script:
    - !reference [.deploy-postgres-cluster, script]

db-cluster-demo-issuer-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: database-cnpg
    RELEASE_NAME: db-cluster-demo-issuer
    CONFIG_NAME: demo-issuer
    CONFIG_FILES: "variables/${DEPLOY_ENV}/database/values.yaml,variables/${DEPLOY_ENV}/database/demo-issuer/values.yaml"
  script:
    - !reference [.deploy-postgres-cluster, script]

db-cluster-pid-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: database-cnpg
    RELEASE_NAME: db-cluster-pid
    CONFIG_NAME: pid
    CONFIG_FILES: "variables/${DEPLOY_ENV}/database/values.yaml,variables/${DEPLOY_ENV}/database/pid/values.yaml"
  script:
    - !reference [.deploy-postgres-cluster, script]

.deploy-helm:
  extends: .deploy-base
  script:
    - !reference [.build-helm-dependency, script]
    - !reference [.replace-chart-app-version, script]
    - !reference [.parse-config-files, script]
    - PATH_CHART=${HELM_CHARTS_PATH}/${CHART_NAME}
    - |
      helm upgrade --install --atomic --timeout 5m ${RELEASE_NAME} ${PATH_CHART} \
      --set global.imageRegistry=${HARBOR_REGISTRY} \
      --set image.tag=${DEPLOY_IMAGE_VERSION} \
      $FILE_OPTIONS
    - !reference [.check-helm-install-status, script]

wallet-provider-${DEPLOY_ENV}:
  extends: .deploy-helm
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
    - job: db-cluster-provider-${DEPLOY_ENV}
      artifacts: false
  variables:
    CHART_NAME: wallet-provider
    RELEASE_NAME: wallet-provider
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/wallet-provider.yaml"

pid-issuer-${DEPLOY_ENV}:
  extends: .deploy-helm
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
    - job: db-cluster-pid-${DEPLOY_ENV}
      artifacts: false
  variables:
    CHART_NAME: pid-issuer
    RELEASE_NAME: pid-issuer
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/pid-issuer.yaml"

demo-rp-verification-server-${DEPLOY_ENV}:
  extends: .deploy-helm
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
    - job: db-cluster-demo-rp-${DEPLOY_ENV}
      artifacts: false
  variables:
    CHART_NAME: demo-rp-verification-server
    RELEASE_NAME: demo-rp-verification-server
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/demo-rp-verification-server.yaml"

demo-relying-party-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: demo-relying-party
    RELEASE_NAME: demo-relying-party
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/demo-relying-party.yaml"
  script:
    - !reference [.build-helm-dependency, script]
    - !reference [.replace-chart-app-version, script]
    - !reference [.parse-config-files, script]
    - PATH_CHART=${HELM_CHARTS_PATH}/${CHART_NAME}
    - |
      helm upgrade --install --atomic --timeout 5m ${RELEASE_NAME} ${PATH_CHART} \
      --set global.imageRegistry=${HARBOR_REGISTRY} \
      --set image.tag=${DEPLOY_IMAGE_VERSION} \
       $FILE_OPTIONS
    - !reference [.check-helm-install-status, script]

demo-issuer-issuance-server-${DEPLOY_ENV}:
  extends: .deploy-helm
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
    - job: db-cluster-demo-issuer-${DEPLOY_ENV}
      artifacts: false
  variables:
    CHART_NAME: demo-issuer-issuance-server
    RELEASE_NAME: demo-issuer-issuance-server
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/demo-issuer-issuance-server.yaml"

demo-issuer-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: demo-issuer
    RELEASE_NAME: demo-issuer
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/demo-issuer.yaml"
  script:
    - !reference [.build-helm-dependency, script]
    - !reference [.replace-chart-app-version, script]
    - !reference [.parse-config-files, script]
    - PATH_CHART=${HELM_CHARTS_PATH}/${CHART_NAME}
    - |
      helm upgrade --install --atomic --timeout 5m ${RELEASE_NAME} ${PATH_CHART} \
      --set global.imageRegistry=${HARBOR_REGISTRY} \
      --set image.tag=${DEPLOY_IMAGE_VERSION} \
       $FILE_OPTIONS
    - !reference [.check-helm-install-status, script]

demo-index-${DEPLOY_ENV}:
  extends: .deploy-helm
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: demo-index
    RELEASE_NAME: demo-index
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/demo-index.yaml"

update-policy-server-${DEPLOY_ENV}:
  extends: .deploy-helm
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: update-policy-server
    RELEASE_NAME: update-policy-server
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/update-policy-server.yaml"

brpproxy-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: brpproxy
    RELEASE_NAME: brpproxy
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/brpproxy.yaml"
  script:
    - !reference [.build-helm-dependency, script]
    - !reference [.parse-config-files, script]
    - PATH_CHART=${HELM_CHARTS_PATH}/${CHART_NAME}
    - |
      helm upgrade --install --atomic --timeout 5m ${RELEASE_NAME} ${PATH_CHART} \
      --set global.imageRegistry=${HARBOR_REGISTRY} \
       $FILE_OPTIONS
    - !reference [.check-helm-install-status, script]

gbamock-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: gbamock
    RELEASE_NAME: gbamock
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/gbamock.yaml"
  script:
    - !reference [.build-helm-dependency, script]
    - !reference [.parse-config-files, script]
    - PATH_CHART=${HELM_CHARTS_PATH}/${CHART_NAME}
    - |
      helm upgrade --install --atomic --timeout 5m ${RELEASE_NAME} ${PATH_CHART} \
      --set global.imageRegistry=${HARBOR_REGISTRY} \
       $FILE_OPTIONS
    - !reference [.check-helm-install-status, script]

gba-hc-converter-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: create-deployment-${DEPLOY_ENV}
  variables:
    CHART_NAME: gba-hc-converter
    RELEASE_NAME: gba-hc-converter
    CONFIG_FILES: "variables/general/global.yaml,variables/${DEPLOY_ENV}/gba-hc-converter.yaml"
  script:
    - !reference [.build-helm-dependency, script]
    - !reference [.replace-chart-app-version, script]
    - !reference [.parse-config-files, script]
    - PATH_CHART=${HELM_CHARTS_PATH}/${CHART_NAME}
    - sed -i 's/{{bsn}}/{{`{{bsn}}`}}/g' wallet_core/gba_hc_converter/resources/remote/bsn_zoeken_template.xml
    - cp wallet_core/gba_hc_converter/resources/remote/bsn_zoeken_template.xml ${PATH_CHART}/files/
    - cp wallet_core/gba_hc_converter/resources/remote/encrypt_all.sh ${PATH_CHART}/shell-scripts/
    - cp -r wallet_core/gba_hc_converter/resources/gba-v-responses/ ${PATH_CHART}/
    - |
      helm upgrade --install --atomic --timeout 5m ${RELEASE_NAME} ${PATH_CHART} \
      --set global.imageRegistry=${HARBOR_REGISTRY} \
      --set image.tag=${DEPLOY_IMAGE_VERSION} \
       $FILE_OPTIONS
    - !reference [.check-helm-install-status, script]

run-encrypt-gba-v-testdata-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - job: gba-hc-converter-${DEPLOY_ENV}
      artifacts: false
  script:
    - kubectl create job --from=cronjob/encrypt-gba-v-testdata gba-encrypt-test-data-$(date +%s)
  allow_failure: true
  when: manual

run-demo-issuer-issuance-server-reset-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - job: demo-issuer-issuance-server-${DEPLOY_ENV}
      artifacts: false
  script:
    - kubectl create job --from=cronjob/demo-issuer-issuance-server-reset demo-issuer-issuance-db-reset-$(date +%s)
  allow_failure: true
  when: manual

run-demo-rp-verification-server-reset-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - job: demo-rp-verification-server-${DEPLOY_ENV}
      artifacts: false
  script:
    - kubectl create job --from=cronjob/demo-rp-verification-server-reset demo-rp-verification-db-reset-$(date +%s)
  allow_failure: true
  when: manual

run-pid-issuer-reset-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - job: pid-issuer-${DEPLOY_ENV}
      artifacts: false
  script:
    - kubectl create job --from=cronjob/pid-issuer-reset pid-issuer-db-reset-$(date +%s)
  allow_failure: true
  when: manual

run-wallet-provider-reset-${DEPLOY_ENV}:
  extends: .deploy-base
  needs:
    - job: wallet-provider-${DEPLOY_ENV}
      artifacts: false
  script:
    - kubectl create job --from=cronjob/wallet-provider-reset wallet-provider-db-reset-$(date +%s)
  allow_failure: true
  when: manual
