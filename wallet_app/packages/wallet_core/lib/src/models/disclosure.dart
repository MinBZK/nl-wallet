// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'card.dart';
import 'instruction.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'disclosure.freezed.dart';

@freezed
sealed class AcceptDisclosureResult with _$AcceptDisclosureResult {
  const AcceptDisclosureResult._();

  const factory AcceptDisclosureResult.ok({
    String? returnUrl,
  }) = AcceptDisclosureResult_Ok;
  const factory AcceptDisclosureResult.instructionError({
    required WalletInstructionError error,
  }) = AcceptDisclosureResult_InstructionError;
}

class DisclosureCard {
  final Organization issuer;
  final String docType;
  final List<CardAttribute> attributes;

  const DisclosureCard({
    required this.issuer,
    required this.docType,
    required this.attributes,
  });

  @override
  int get hashCode => issuer.hashCode ^ docType.hashCode ^ attributes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DisclosureCard &&
          runtimeType == other.runtimeType &&
          issuer == other.issuer &&
          docType == other.docType &&
          attributes == other.attributes;
}

enum DisclosureSessionType {
  SameDevice,
  CrossDevice,
  ;
}

enum DisclosureStatus {
  Success,
  Cancelled,
  Error,
  ;
}

enum DisclosureType {
  Login,
  Regular,
  ;
}

@freezed
sealed class Image with _$Image {
  const Image._();

  const factory Image.svg({
    required String xml,
  }) = Image_Svg;
  const factory Image.png({
    required String base64,
  }) = Image_Png;
  const factory Image.jpg({
    required String base64,
  }) = Image_Jpg;
  const factory Image.asset({
    required String path,
  }) = Image_Asset;
}

class MissingAttribute {
  final List<LocalizedString> labels;

  const MissingAttribute({
    required this.labels,
  });

  @override
  int get hashCode => labels.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) || other is MissingAttribute && runtimeType == other.runtimeType && labels == other.labels;
}

class Organization {
  final List<LocalizedString> legalName;
  final List<LocalizedString> displayName;
  final List<LocalizedString> description;
  final Image? image;
  final String? webUrl;
  final String? privacyPolicyUrl;
  final String? kvk;
  final List<LocalizedString>? city;
  final List<LocalizedString> category;
  final List<LocalizedString>? department;
  final String? countryCode;

  const Organization({
    required this.legalName,
    required this.displayName,
    required this.description,
    this.image,
    this.webUrl,
    this.privacyPolicyUrl,
    this.kvk,
    this.city,
    required this.category,
    this.department,
    this.countryCode,
  });

  @override
  int get hashCode =>
      legalName.hashCode ^
      displayName.hashCode ^
      description.hashCode ^
      image.hashCode ^
      webUrl.hashCode ^
      privacyPolicyUrl.hashCode ^
      kvk.hashCode ^
      city.hashCode ^
      category.hashCode ^
      department.hashCode ^
      countryCode.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Organization &&
          runtimeType == other.runtimeType &&
          legalName == other.legalName &&
          displayName == other.displayName &&
          description == other.description &&
          image == other.image &&
          webUrl == other.webUrl &&
          privacyPolicyUrl == other.privacyPolicyUrl &&
          kvk == other.kvk &&
          city == other.city &&
          category == other.category &&
          department == other.department &&
          countryCode == other.countryCode;
}

class RequestPolicy {
  final BigInt? dataStorageDurationInMinutes;
  final bool dataSharedWithThirdParties;
  final bool dataDeletionPossible;
  final String policyUrl;

  const RequestPolicy({
    this.dataStorageDurationInMinutes,
    required this.dataSharedWithThirdParties,
    required this.dataDeletionPossible,
    required this.policyUrl,
  });

  @override
  int get hashCode =>
      dataStorageDurationInMinutes.hashCode ^
      dataSharedWithThirdParties.hashCode ^
      dataDeletionPossible.hashCode ^
      policyUrl.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RequestPolicy &&
          runtimeType == other.runtimeType &&
          dataStorageDurationInMinutes == other.dataStorageDurationInMinutes &&
          dataSharedWithThirdParties == other.dataSharedWithThirdParties &&
          dataDeletionPossible == other.dataDeletionPossible &&
          policyUrl == other.policyUrl;
}

@freezed
sealed class StartDisclosureResult with _$StartDisclosureResult {
  const StartDisclosureResult._();

  const factory StartDisclosureResult.request({
    required Organization relyingParty,
    required RequestPolicy policy,
    required List<DisclosureCard> requestedCards,
    required bool sharedDataWithRelyingPartyBefore,
    required DisclosureSessionType sessionType,
    required List<LocalizedString> requestPurpose,
    required String requestOriginBaseUrl,
    required DisclosureType requestType,
  }) = StartDisclosureResult_Request;
  const factory StartDisclosureResult.requestAttributesMissing({
    required Organization relyingParty,
    required List<MissingAttribute> missingAttributes,
    required bool sharedDataWithRelyingPartyBefore,
    required DisclosureSessionType sessionType,
    required List<LocalizedString> requestPurpose,
    required String requestOriginBaseUrl,
  }) = StartDisclosureResult_RequestAttributesMissing;
}
