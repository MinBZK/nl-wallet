// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/full.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'models/attestation.dart';
import 'models/config.dart';
import 'models/disclosure.dart';
import 'models/image.dart';
import 'models/instruction.dart';
import 'models/localize.dart';
import 'models/pin.dart';
import 'models/transfer.dart';
import 'models/uri.dart';
import 'models/version_state.dart';
import 'models/wallet_event.dart';
import 'models/wallet_state.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class WalletCoreApiImplPlatform extends BaseApiImpl<WalletCoreWire> {
  WalletCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  RustStreamSink<bool> dco_decode_StreamSink_bool_Dco(dynamic raw);

  @protected
  RustStreamSink<FlutterConfiguration> dco_decode_StreamSink_flutter_configuration_Dco(dynamic raw);

  @protected
  RustStreamSink<FlutterVersionState> dco_decode_StreamSink_flutter_version_state_Dco(dynamic raw);

  @protected
  RustStreamSink<List<AttestationPresentation>> dco_decode_StreamSink_list_attestation_presentation_Dco(dynamic raw);

  @protected
  RustStreamSink<List<WalletEvent>> dco_decode_StreamSink_list_wallet_event_Dco(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AcceptDisclosureResult dco_decode_accept_disclosure_result(dynamic raw);

  @protected
  AttestationAttribute dco_decode_attestation_attribute(dynamic raw);

  @protected
  AttestationIdentity dco_decode_attestation_identity(dynamic raw);

  @protected
  AttestationPresentation dco_decode_attestation_presentation(dynamic raw);

  @protected
  AttributeValue dco_decode_attribute_value(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AttestationPresentation dco_decode_box_autoadd_attestation_presentation(dynamic raw);

  @protected
  Image dco_decode_box_autoadd_image(dynamic raw);

  @protected
  ImageWithMetadata dco_decode_box_autoadd_image_with_metadata(dynamic raw);

  @protected
  Organization dco_decode_box_autoadd_organization(dynamic raw);

  @protected
  RenderingMetadata dco_decode_box_autoadd_rendering_metadata(dynamic raw);

  @protected
  RequestPolicy dco_decode_box_autoadd_request_policy(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  WalletInstructionError dco_decode_box_autoadd_wallet_instruction_error(dynamic raw);

  @protected
  ClaimDisplayMetadata dco_decode_claim_display_metadata(dynamic raw);

  @protected
  DisclosureBasedIssuanceResult dco_decode_disclosure_based_issuance_result(dynamic raw);

  @protected
  DisclosureOptions dco_decode_disclosure_options(dynamic raw);

  @protected
  DisclosureSessionType dco_decode_disclosure_session_type(dynamic raw);

  @protected
  DisclosureStatus dco_decode_disclosure_status(dynamic raw);

  @protected
  DisclosureType dco_decode_disclosure_type(dynamic raw);

  @protected
  DisplayMetadata dco_decode_display_metadata(dynamic raw);

  @protected
  FlutterConfiguration dco_decode_flutter_configuration(dynamic raw);

  @protected
  FlutterVersionState dco_decode_flutter_version_state(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  IdentifyUriResult dco_decode_identify_uri_result(dynamic raw);

  @protected
  Image dco_decode_image(dynamic raw);

  @protected
  ImageWithMetadata dco_decode_image_with_metadata(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<AttestationAttribute> dco_decode_list_attestation_attribute(dynamic raw);

  @protected
  List<AttestationPresentation> dco_decode_list_attestation_presentation(dynamic raw);

  @protected
  List<AttributeValue> dco_decode_list_attribute_value(dynamic raw);

  @protected
  List<ClaimDisplayMetadata> dco_decode_list_claim_display_metadata(dynamic raw);

  @protected
  List<DisclosureOptions> dco_decode_list_disclosure_options(dynamic raw);

  @protected
  List<DisplayMetadata> dco_decode_list_display_metadata(dynamic raw);

  @protected
  List<LocalizedString> dco_decode_list_localized_string(dynamic raw);

  @protected
  List<MissingAttribute> dco_decode_list_missing_attribute(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_16_loose(dynamic raw);

  @protected
  Uint16List dco_decode_list_prim_u_16_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<WalletEvent> dco_decode_list_wallet_event(dynamic raw);

  @protected
  LocalizedString dco_decode_localized_string(dynamic raw);

  @protected
  MissingAttribute dco_decode_missing_attribute(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Image? dco_decode_opt_box_autoadd_image(dynamic raw);

  @protected
  ImageWithMetadata? dco_decode_opt_box_autoadd_image_with_metadata(dynamic raw);

  @protected
  RenderingMetadata? dco_decode_opt_box_autoadd_rendering_metadata(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  List<AttestationPresentation>? dco_decode_opt_list_attestation_presentation(dynamic raw);

  @protected
  List<LocalizedString>? dco_decode_opt_list_localized_string(dynamic raw);

  @protected
  Organization dco_decode_organization(dynamic raw);

  @protected
  PidIssuanceResult dco_decode_pid_issuance_result(dynamic raw);

  @protected
  PinValidationResult dco_decode_pin_validation_result(dynamic raw);

  @protected
  RenderingMetadata dco_decode_rendering_metadata(dynamic raw);

  @protected
  RequestPolicy dco_decode_request_policy(dynamic raw);

  @protected
  StartDisclosureResult dco_decode_start_disclosure_result(dynamic raw);

  @protected
  TransferSessionState dco_decode_transfer_session_state(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  WalletEvent dco_decode_wallet_event(dynamic raw);

  @protected
  WalletInstructionError dco_decode_wallet_instruction_error(dynamic raw);

  @protected
  WalletInstructionResult dco_decode_wallet_instruction_result(dynamic raw);

  @protected
  WalletState dco_decode_wallet_state(dynamic raw);

  @protected
  WalletTransferRole dco_decode_wallet_transfer_role(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  RustStreamSink<bool> sse_decode_StreamSink_bool_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<FlutterConfiguration> sse_decode_StreamSink_flutter_configuration_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<FlutterVersionState> sse_decode_StreamSink_flutter_version_state_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<List<AttestationPresentation>> sse_decode_StreamSink_list_attestation_presentation_Dco(
    SseDeserializer deserializer,
  );

  @protected
  RustStreamSink<List<WalletEvent>> sse_decode_StreamSink_list_wallet_event_Dco(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AcceptDisclosureResult sse_decode_accept_disclosure_result(SseDeserializer deserializer);

  @protected
  AttestationAttribute sse_decode_attestation_attribute(SseDeserializer deserializer);

  @protected
  AttestationIdentity sse_decode_attestation_identity(SseDeserializer deserializer);

  @protected
  AttestationPresentation sse_decode_attestation_presentation(SseDeserializer deserializer);

  @protected
  AttributeValue sse_decode_attribute_value(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AttestationPresentation sse_decode_box_autoadd_attestation_presentation(SseDeserializer deserializer);

  @protected
  Image sse_decode_box_autoadd_image(SseDeserializer deserializer);

  @protected
  ImageWithMetadata sse_decode_box_autoadd_image_with_metadata(SseDeserializer deserializer);

  @protected
  Organization sse_decode_box_autoadd_organization(SseDeserializer deserializer);

  @protected
  RenderingMetadata sse_decode_box_autoadd_rendering_metadata(SseDeserializer deserializer);

  @protected
  RequestPolicy sse_decode_box_autoadd_request_policy(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  WalletInstructionError sse_decode_box_autoadd_wallet_instruction_error(SseDeserializer deserializer);

  @protected
  ClaimDisplayMetadata sse_decode_claim_display_metadata(SseDeserializer deserializer);

  @protected
  DisclosureBasedIssuanceResult sse_decode_disclosure_based_issuance_result(SseDeserializer deserializer);

  @protected
  DisclosureOptions sse_decode_disclosure_options(SseDeserializer deserializer);

  @protected
  DisclosureSessionType sse_decode_disclosure_session_type(SseDeserializer deserializer);

  @protected
  DisclosureStatus sse_decode_disclosure_status(SseDeserializer deserializer);

  @protected
  DisclosureType sse_decode_disclosure_type(SseDeserializer deserializer);

  @protected
  DisplayMetadata sse_decode_display_metadata(SseDeserializer deserializer);

  @protected
  FlutterConfiguration sse_decode_flutter_configuration(SseDeserializer deserializer);

  @protected
  FlutterVersionState sse_decode_flutter_version_state(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  IdentifyUriResult sse_decode_identify_uri_result(SseDeserializer deserializer);

  @protected
  Image sse_decode_image(SseDeserializer deserializer);

  @protected
  ImageWithMetadata sse_decode_image_with_metadata(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<AttestationAttribute> sse_decode_list_attestation_attribute(SseDeserializer deserializer);

  @protected
  List<AttestationPresentation> sse_decode_list_attestation_presentation(SseDeserializer deserializer);

  @protected
  List<AttributeValue> sse_decode_list_attribute_value(SseDeserializer deserializer);

  @protected
  List<ClaimDisplayMetadata> sse_decode_list_claim_display_metadata(SseDeserializer deserializer);

  @protected
  List<DisclosureOptions> sse_decode_list_disclosure_options(SseDeserializer deserializer);

  @protected
  List<DisplayMetadata> sse_decode_list_display_metadata(SseDeserializer deserializer);

  @protected
  List<LocalizedString> sse_decode_list_localized_string(SseDeserializer deserializer);

  @protected
  List<MissingAttribute> sse_decode_list_missing_attribute(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_16_loose(SseDeserializer deserializer);

  @protected
  Uint16List sse_decode_list_prim_u_16_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<WalletEvent> sse_decode_list_wallet_event(SseDeserializer deserializer);

  @protected
  LocalizedString sse_decode_localized_string(SseDeserializer deserializer);

  @protected
  MissingAttribute sse_decode_missing_attribute(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Image? sse_decode_opt_box_autoadd_image(SseDeserializer deserializer);

  @protected
  ImageWithMetadata? sse_decode_opt_box_autoadd_image_with_metadata(SseDeserializer deserializer);

  @protected
  RenderingMetadata? sse_decode_opt_box_autoadd_rendering_metadata(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  List<AttestationPresentation>? sse_decode_opt_list_attestation_presentation(SseDeserializer deserializer);

  @protected
  List<LocalizedString>? sse_decode_opt_list_localized_string(SseDeserializer deserializer);

  @protected
  Organization sse_decode_organization(SseDeserializer deserializer);

  @protected
  PidIssuanceResult sse_decode_pid_issuance_result(SseDeserializer deserializer);

  @protected
  PinValidationResult sse_decode_pin_validation_result(SseDeserializer deserializer);

  @protected
  RenderingMetadata sse_decode_rendering_metadata(SseDeserializer deserializer);

  @protected
  RequestPolicy sse_decode_request_policy(SseDeserializer deserializer);

  @protected
  StartDisclosureResult sse_decode_start_disclosure_result(SseDeserializer deserializer);

  @protected
  TransferSessionState sse_decode_transfer_session_state(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  WalletEvent sse_decode_wallet_event(SseDeserializer deserializer);

  @protected
  WalletInstructionError sse_decode_wallet_instruction_error(SseDeserializer deserializer);

  @protected
  WalletInstructionResult sse_decode_wallet_instruction_result(SseDeserializer deserializer);

  @protected
  WalletState sse_decode_wallet_state(SseDeserializer deserializer);

  @protected
  WalletTransferRole sse_decode_wallet_transfer_role(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(AnyhowException raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_bool_Dco(RustStreamSink<bool> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(
      raw.setupAndSerialize(
        codec: DcoCodec(
          decodeSuccessData: dco_decode_bool,
          decodeErrorData: dco_decode_AnyhowException,
        ),
      ),
    );
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_flutter_configuration_Dco(
    RustStreamSink<FlutterConfiguration> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(
      raw.setupAndSerialize(
        codec: DcoCodec(
          decodeSuccessData: dco_decode_flutter_configuration,
          decodeErrorData: dco_decode_AnyhowException,
        ),
      ),
    );
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_flutter_version_state_Dco(
    RustStreamSink<FlutterVersionState> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(
      raw.setupAndSerialize(
        codec: DcoCodec(
          decodeSuccessData: dco_decode_flutter_version_state,
          decodeErrorData: dco_decode_AnyhowException,
        ),
      ),
    );
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_list_attestation_presentation_Dco(
    RustStreamSink<List<AttestationPresentation>> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(
      raw.setupAndSerialize(
        codec: DcoCodec(
          decodeSuccessData: dco_decode_list_attestation_presentation,
          decodeErrorData: dco_decode_AnyhowException,
        ),
      ),
    );
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_list_wallet_event_Dco(
    RustStreamSink<List<WalletEvent>> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(
      raw.setupAndSerialize(
        codec: DcoCodec(
          decodeSuccessData: dco_decode_list_wallet_event,
          decodeErrorData: dco_decode_AnyhowException,
        ),
      ),
    );
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_attestation_presentation> cst_encode_box_autoadd_attestation_presentation(
    AttestationPresentation raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_attestation_presentation();
    cst_api_fill_to_wire_attestation_presentation(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_image> cst_encode_box_autoadd_image(Image raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_image();
    cst_api_fill_to_wire_image(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_image_with_metadata> cst_encode_box_autoadd_image_with_metadata(ImageWithMetadata raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_image_with_metadata();
    cst_api_fill_to_wire_image_with_metadata(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_organization> cst_encode_box_autoadd_organization(Organization raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_organization();
    cst_api_fill_to_wire_organization(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_rendering_metadata> cst_encode_box_autoadd_rendering_metadata(RenderingMetadata raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_rendering_metadata();
    cst_api_fill_to_wire_rendering_metadata(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_request_policy> cst_encode_box_autoadd_request_policy(RequestPolicy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_request_policy();
    cst_api_fill_to_wire_request_policy(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<wire_cst_wallet_instruction_error> cst_encode_box_autoadd_wallet_instruction_error(
    WalletInstructionError raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_wallet_instruction_error();
    cst_api_fill_to_wire_wallet_instruction_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  int cst_encode_i_64(PlatformInt64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_list_String(List<String> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_attestation_attribute> cst_encode_list_attestation_attribute(
    List<AttestationAttribute> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_attestation_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_attestation_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_attestation_presentation> cst_encode_list_attestation_presentation(
    List<AttestationPresentation> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_attestation_presentation(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_attestation_presentation(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_attribute_value> cst_encode_list_attribute_value(List<AttributeValue> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_attribute_value(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_attribute_value(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_claim_display_metadata> cst_encode_list_claim_display_metadata(
    List<ClaimDisplayMetadata> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_claim_display_metadata(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_claim_display_metadata(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_disclosure_options> cst_encode_list_disclosure_options(List<DisclosureOptions> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_disclosure_options(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_disclosure_options(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_display_metadata> cst_encode_list_display_metadata(List<DisplayMetadata> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_display_metadata(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_display_metadata(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_localized_string> cst_encode_list_localized_string(List<LocalizedString> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_localized_string(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_localized_string(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_missing_attribute> cst_encode_list_missing_attribute(List<MissingAttribute> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_missing_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_missing_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_16_loose> cst_encode_list_prim_u_16_loose(List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_16_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_16_strict> cst_encode_list_prim_u_16_strict(Uint16List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_16_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_wallet_event> cst_encode_list_wallet_event(List<WalletEvent> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_wallet_event(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_wallet_event(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_image> cst_encode_opt_box_autoadd_image(Image? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_image(raw);
  }

  @protected
  ffi.Pointer<wire_cst_image_with_metadata> cst_encode_opt_box_autoadd_image_with_metadata(ImageWithMetadata? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_image_with_metadata(raw);
  }

  @protected
  ffi.Pointer<wire_cst_rendering_metadata> cst_encode_opt_box_autoadd_rendering_metadata(RenderingMetadata? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_rendering_metadata(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_attestation_presentation> cst_encode_opt_list_attestation_presentation(
    List<AttestationPresentation>? raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_attestation_presentation(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_localized_string> cst_encode_opt_list_localized_string(List<LocalizedString>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_localized_string(raw);
  }

  @protected
  int cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  void cst_api_fill_to_wire_accept_disclosure_result(
    AcceptDisclosureResult apiObj,
    wire_cst_accept_disclosure_result wireObj,
  ) {
    if (apiObj is AcceptDisclosureResult_Ok) {
      var pre_return_url = cst_encode_opt_String(apiObj.returnUrl);
      wireObj.tag = 0;
      wireObj.kind.Ok.return_url = pre_return_url;
      return;
    }
    if (apiObj is AcceptDisclosureResult_InstructionError) {
      var pre_error = cst_encode_box_autoadd_wallet_instruction_error(apiObj.error);
      wireObj.tag = 1;
      wireObj.kind.InstructionError.error = pre_error;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_attestation_attribute(AttestationAttribute apiObj, wire_cst_attestation_attribute wireObj) {
    wireObj.key = cst_encode_String(apiObj.key);
    wireObj.labels = cst_encode_list_claim_display_metadata(apiObj.labels);
    cst_api_fill_to_wire_attribute_value(apiObj.value, wireObj.value);
    wireObj.svg_id = cst_encode_opt_String(apiObj.svgId);
  }

  @protected
  void cst_api_fill_to_wire_attestation_identity(AttestationIdentity apiObj, wire_cst_attestation_identity wireObj) {
    if (apiObj is AttestationIdentity_Ephemeral) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is AttestationIdentity_Fixed) {
      var pre_id = cst_encode_String(apiObj.id);
      wireObj.tag = 1;
      wireObj.kind.Fixed.id = pre_id;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_attestation_presentation(
    AttestationPresentation apiObj,
    wire_cst_attestation_presentation wireObj,
  ) {
    cst_api_fill_to_wire_attestation_identity(apiObj.identity, wireObj.identity);
    wireObj.attestation_type = cst_encode_String(apiObj.attestationType);
    wireObj.display_metadata = cst_encode_list_display_metadata(apiObj.displayMetadata);
    cst_api_fill_to_wire_organization(apiObj.issuer, wireObj.issuer);
    wireObj.attributes = cst_encode_list_attestation_attribute(apiObj.attributes);
  }

  @protected
  void cst_api_fill_to_wire_attribute_value(AttributeValue apiObj, wire_cst_attribute_value wireObj) {
    if (apiObj is AttributeValue_String) {
      var pre_value = cst_encode_String(apiObj.value);
      wireObj.tag = 0;
      wireObj.kind.String.value = pre_value;
      return;
    }
    if (apiObj is AttributeValue_Boolean) {
      var pre_value = cst_encode_bool(apiObj.value);
      wireObj.tag = 1;
      wireObj.kind.Boolean.value = pre_value;
      return;
    }
    if (apiObj is AttributeValue_Number) {
      var pre_value = cst_encode_i_64(apiObj.value);
      wireObj.tag = 2;
      wireObj.kind.Number.value = pre_value;
      return;
    }
    if (apiObj is AttributeValue_Date) {
      var pre_value = cst_encode_String(apiObj.value);
      wireObj.tag = 3;
      wireObj.kind.Date.value = pre_value;
      return;
    }
    if (apiObj is AttributeValue_Array) {
      var pre_value = cst_encode_list_attribute_value(apiObj.value);
      wireObj.tag = 4;
      wireObj.kind.Array.value = pre_value;
      return;
    }
    if (apiObj is AttributeValue_Null) {
      wireObj.tag = 5;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_attestation_presentation(
    AttestationPresentation apiObj,
    ffi.Pointer<wire_cst_attestation_presentation> wireObj,
  ) {
    cst_api_fill_to_wire_attestation_presentation(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_image(Image apiObj, ffi.Pointer<wire_cst_image> wireObj) {
    cst_api_fill_to_wire_image(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_image_with_metadata(
    ImageWithMetadata apiObj,
    ffi.Pointer<wire_cst_image_with_metadata> wireObj,
  ) {
    cst_api_fill_to_wire_image_with_metadata(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_organization(Organization apiObj, ffi.Pointer<wire_cst_organization> wireObj) {
    cst_api_fill_to_wire_organization(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_rendering_metadata(
    RenderingMetadata apiObj,
    ffi.Pointer<wire_cst_rendering_metadata> wireObj,
  ) {
    cst_api_fill_to_wire_rendering_metadata(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_request_policy(
    RequestPolicy apiObj,
    ffi.Pointer<wire_cst_request_policy> wireObj,
  ) {
    cst_api_fill_to_wire_request_policy(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_wallet_instruction_error(
    WalletInstructionError apiObj,
    ffi.Pointer<wire_cst_wallet_instruction_error> wireObj,
  ) {
    cst_api_fill_to_wire_wallet_instruction_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_claim_display_metadata(
    ClaimDisplayMetadata apiObj,
    wire_cst_claim_display_metadata wireObj,
  ) {
    wireObj.lang = cst_encode_String(apiObj.lang);
    wireObj.label = cst_encode_String(apiObj.label);
    wireObj.description = cst_encode_opt_String(apiObj.description);
  }

  @protected
  void cst_api_fill_to_wire_disclosure_based_issuance_result(
    DisclosureBasedIssuanceResult apiObj,
    wire_cst_disclosure_based_issuance_result wireObj,
  ) {
    if (apiObj is DisclosureBasedIssuanceResult_Ok) {
      var pre_field0 = cst_encode_list_attestation_presentation(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Ok.field0 = pre_field0;
      return;
    }
    if (apiObj is DisclosureBasedIssuanceResult_InstructionError) {
      var pre_error = cst_encode_box_autoadd_wallet_instruction_error(apiObj.error);
      wireObj.tag = 1;
      wireObj.kind.InstructionError.error = pre_error;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_disclosure_options(DisclosureOptions apiObj, wire_cst_disclosure_options wireObj) {
    wireObj.field0 = cst_encode_list_attestation_presentation(apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_display_metadata(DisplayMetadata apiObj, wire_cst_display_metadata wireObj) {
    wireObj.lang = cst_encode_String(apiObj.lang);
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.description = cst_encode_opt_String(apiObj.description);
    wireObj.summary = cst_encode_opt_String(apiObj.summary);
    wireObj.rendering = cst_encode_opt_box_autoadd_rendering_metadata(apiObj.rendering);
  }

  @protected
  void cst_api_fill_to_wire_flutter_configuration(FlutterConfiguration apiObj, wire_cst_flutter_configuration wireObj) {
    wireObj.inactive_warning_timeout = cst_encode_u_16(apiObj.inactiveWarningTimeout);
    wireObj.inactive_lock_timeout = cst_encode_u_16(apiObj.inactiveLockTimeout);
    wireObj.background_lock_timeout = cst_encode_u_16(apiObj.backgroundLockTimeout);
    wireObj.pid_attestation_types = cst_encode_list_String(apiObj.pidAttestationTypes);
    wireObj.static_assets_base_url = cst_encode_String(apiObj.staticAssetsBaseUrl);
    wireObj.version = cst_encode_u_64(apiObj.version);
  }

  @protected
  void cst_api_fill_to_wire_flutter_version_state(FlutterVersionState apiObj, wire_cst_flutter_version_state wireObj) {
    if (apiObj is FlutterVersionState_Ok) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is FlutterVersionState_Notify) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is FlutterVersionState_Recommend) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is FlutterVersionState_Warn) {
      var pre_expires_in_seconds = cst_encode_u_64(apiObj.expiresInSeconds);
      wireObj.tag = 3;
      wireObj.kind.Warn.expires_in_seconds = pre_expires_in_seconds;
      return;
    }
    if (apiObj is FlutterVersionState_Block) {
      wireObj.tag = 4;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_image(Image apiObj, wire_cst_image wireObj) {
    if (apiObj is Image_Svg) {
      var pre_xml = cst_encode_String(apiObj.xml);
      wireObj.tag = 0;
      wireObj.kind.Svg.xml = pre_xml;
      return;
    }
    if (apiObj is Image_Png) {
      var pre_data = cst_encode_list_prim_u_8_strict(apiObj.data);
      wireObj.tag = 1;
      wireObj.kind.Png.data = pre_data;
      return;
    }
    if (apiObj is Image_Jpeg) {
      var pre_data = cst_encode_list_prim_u_8_strict(apiObj.data);
      wireObj.tag = 2;
      wireObj.kind.Jpeg.data = pre_data;
      return;
    }
    if (apiObj is Image_Asset) {
      var pre_path = cst_encode_String(apiObj.path);
      wireObj.tag = 3;
      wireObj.kind.Asset.path = pre_path;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_image_with_metadata(ImageWithMetadata apiObj, wire_cst_image_with_metadata wireObj) {
    cst_api_fill_to_wire_image(apiObj.image, wireObj.image);
    wireObj.alt_text = cst_encode_String(apiObj.altText);
  }

  @protected
  void cst_api_fill_to_wire_localized_string(LocalizedString apiObj, wire_cst_localized_string wireObj) {
    wireObj.language = cst_encode_String(apiObj.language);
    wireObj.value = cst_encode_String(apiObj.value);
  }

  @protected
  void cst_api_fill_to_wire_missing_attribute(MissingAttribute apiObj, wire_cst_missing_attribute wireObj) {
    wireObj.labels = cst_encode_list_localized_string(apiObj.labels);
  }

  @protected
  void cst_api_fill_to_wire_organization(Organization apiObj, wire_cst_organization wireObj) {
    wireObj.legal_name = cst_encode_list_localized_string(apiObj.legalName);
    wireObj.display_name = cst_encode_list_localized_string(apiObj.displayName);
    wireObj.description = cst_encode_list_localized_string(apiObj.description);
    wireObj.image = cst_encode_opt_box_autoadd_image(apiObj.image);
    wireObj.web_url = cst_encode_opt_String(apiObj.webUrl);
    wireObj.privacy_policy_url = cst_encode_opt_String(apiObj.privacyPolicyUrl);
    wireObj.kvk = cst_encode_opt_String(apiObj.kvk);
    wireObj.city = cst_encode_opt_list_localized_string(apiObj.city);
    wireObj.category = cst_encode_list_localized_string(apiObj.category);
    wireObj.department = cst_encode_opt_list_localized_string(apiObj.department);
    wireObj.country_code = cst_encode_opt_String(apiObj.countryCode);
  }

  @protected
  void cst_api_fill_to_wire_pid_issuance_result(PidIssuanceResult apiObj, wire_cst_pid_issuance_result wireObj) {
    if (apiObj is PidIssuanceResult_Ok) {
      var pre_transfer_available = cst_encode_bool(apiObj.transferAvailable);
      wireObj.tag = 0;
      wireObj.kind.Ok.transfer_available = pre_transfer_available;
      return;
    }
    if (apiObj is PidIssuanceResult_InstructionError) {
      var pre_error = cst_encode_box_autoadd_wallet_instruction_error(apiObj.error);
      wireObj.tag = 1;
      wireObj.kind.InstructionError.error = pre_error;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_rendering_metadata(RenderingMetadata apiObj, wire_cst_rendering_metadata wireObj) {
    if (apiObj is RenderingMetadata_Simple) {
      var pre_logo = cst_encode_opt_box_autoadd_image_with_metadata(apiObj.logo);
      var pre_background_color = cst_encode_opt_String(apiObj.backgroundColor);
      var pre_text_color = cst_encode_opt_String(apiObj.textColor);
      wireObj.tag = 0;
      wireObj.kind.Simple.logo = pre_logo;
      wireObj.kind.Simple.background_color = pre_background_color;
      wireObj.kind.Simple.text_color = pre_text_color;
      return;
    }
    if (apiObj is RenderingMetadata_SvgTemplates) {
      wireObj.tag = 1;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_request_policy(RequestPolicy apiObj, wire_cst_request_policy wireObj) {
    wireObj.data_storage_duration_in_minutes = cst_encode_opt_box_autoadd_u_64(apiObj.dataStorageDurationInMinutes);
    wireObj.data_shared_with_third_parties = cst_encode_bool(apiObj.dataSharedWithThirdParties);
    wireObj.data_deletion_possible = cst_encode_bool(apiObj.dataDeletionPossible);
    wireObj.policy_url = cst_encode_String(apiObj.policyUrl);
  }

  @protected
  void cst_api_fill_to_wire_start_disclosure_result(
    StartDisclosureResult apiObj,
    wire_cst_start_disclosure_result wireObj,
  ) {
    if (apiObj is StartDisclosureResult_Request) {
      var pre_relying_party = cst_encode_box_autoadd_organization(apiObj.relyingParty);
      var pre_policy = cst_encode_box_autoadd_request_policy(apiObj.policy);
      var pre_disclosure_options = cst_encode_list_disclosure_options(apiObj.disclosureOptions);
      var pre_shared_data_with_relying_party_before = cst_encode_bool(apiObj.sharedDataWithRelyingPartyBefore);
      var pre_session_type = cst_encode_disclosure_session_type(apiObj.sessionType);
      var pre_request_purpose = cst_encode_list_localized_string(apiObj.requestPurpose);
      var pre_request_origin_base_url = cst_encode_String(apiObj.requestOriginBaseUrl);
      var pre_request_type = cst_encode_disclosure_type(apiObj.requestType);
      wireObj.tag = 0;
      wireObj.kind.Request.relying_party = pre_relying_party;
      wireObj.kind.Request.policy = pre_policy;
      wireObj.kind.Request.disclosure_options = pre_disclosure_options;
      wireObj.kind.Request.shared_data_with_relying_party_before = pre_shared_data_with_relying_party_before;
      wireObj.kind.Request.session_type = pre_session_type;
      wireObj.kind.Request.request_purpose = pre_request_purpose;
      wireObj.kind.Request.request_origin_base_url = pre_request_origin_base_url;
      wireObj.kind.Request.request_type = pre_request_type;
      return;
    }
    if (apiObj is StartDisclosureResult_RequestAttributesMissing) {
      var pre_relying_party = cst_encode_box_autoadd_organization(apiObj.relyingParty);
      var pre_missing_attributes = cst_encode_list_missing_attribute(apiObj.missingAttributes);
      var pre_shared_data_with_relying_party_before = cst_encode_bool(apiObj.sharedDataWithRelyingPartyBefore);
      var pre_session_type = cst_encode_disclosure_session_type(apiObj.sessionType);
      var pre_request_purpose = cst_encode_list_localized_string(apiObj.requestPurpose);
      var pre_request_origin_base_url = cst_encode_String(apiObj.requestOriginBaseUrl);
      wireObj.tag = 1;
      wireObj.kind.RequestAttributesMissing.relying_party = pre_relying_party;
      wireObj.kind.RequestAttributesMissing.missing_attributes = pre_missing_attributes;
      wireObj.kind.RequestAttributesMissing.shared_data_with_relying_party_before =
          pre_shared_data_with_relying_party_before;
      wireObj.kind.RequestAttributesMissing.session_type = pre_session_type;
      wireObj.kind.RequestAttributesMissing.request_purpose = pre_request_purpose;
      wireObj.kind.RequestAttributesMissing.request_origin_base_url = pre_request_origin_base_url;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_wallet_event(WalletEvent apiObj, wire_cst_wallet_event wireObj) {
    if (apiObj is WalletEvent_Disclosure) {
      var pre_id = cst_encode_String(apiObj.id);
      var pre_date_time = cst_encode_String(apiObj.dateTime);
      var pre_relying_party = cst_encode_box_autoadd_organization(apiObj.relyingParty);
      var pre_purpose = cst_encode_list_localized_string(apiObj.purpose);
      var pre_shared_attestations = cst_encode_opt_list_attestation_presentation(apiObj.sharedAttestations);
      var pre_request_policy = cst_encode_box_autoadd_request_policy(apiObj.requestPolicy);
      var pre_status = cst_encode_disclosure_status(apiObj.status);
      var pre_typ = cst_encode_disclosure_type(apiObj.typ);
      wireObj.tag = 0;
      wireObj.kind.Disclosure.id = pre_id;
      wireObj.kind.Disclosure.date_time = pre_date_time;
      wireObj.kind.Disclosure.relying_party = pre_relying_party;
      wireObj.kind.Disclosure.purpose = pre_purpose;
      wireObj.kind.Disclosure.shared_attestations = pre_shared_attestations;
      wireObj.kind.Disclosure.request_policy = pre_request_policy;
      wireObj.kind.Disclosure.status = pre_status;
      wireObj.kind.Disclosure.typ = pre_typ;
      return;
    }
    if (apiObj is WalletEvent_Issuance) {
      var pre_id = cst_encode_String(apiObj.id);
      var pre_date_time = cst_encode_String(apiObj.dateTime);
      var pre_attestation = cst_encode_box_autoadd_attestation_presentation(apiObj.attestation);
      var pre_renewed = cst_encode_bool(apiObj.renewed);
      wireObj.tag = 1;
      wireObj.kind.Issuance.id = pre_id;
      wireObj.kind.Issuance.date_time = pre_date_time;
      wireObj.kind.Issuance.attestation = pre_attestation;
      wireObj.kind.Issuance.renewed = pre_renewed;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_wallet_instruction_error(
    WalletInstructionError apiObj,
    wire_cst_wallet_instruction_error wireObj,
  ) {
    if (apiObj is WalletInstructionError_IncorrectPin) {
      var pre_attempts_left_in_round = cst_encode_u_8(apiObj.attemptsLeftInRound);
      var pre_is_final_round = cst_encode_bool(apiObj.isFinalRound);
      wireObj.tag = 0;
      wireObj.kind.IncorrectPin.attempts_left_in_round = pre_attempts_left_in_round;
      wireObj.kind.IncorrectPin.is_final_round = pre_is_final_round;
      return;
    }
    if (apiObj is WalletInstructionError_Timeout) {
      var pre_timeout_millis = cst_encode_u_64(apiObj.timeoutMillis);
      wireObj.tag = 1;
      wireObj.kind.Timeout.timeout_millis = pre_timeout_millis;
      return;
    }
    if (apiObj is WalletInstructionError_Blocked) {
      wireObj.tag = 2;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_wallet_instruction_result(
    WalletInstructionResult apiObj,
    wire_cst_wallet_instruction_result wireObj,
  ) {
    if (apiObj is WalletInstructionResult_Ok) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is WalletInstructionResult_InstructionError) {
      var pre_error = cst_encode_box_autoadd_wallet_instruction_error(apiObj.error);
      wireObj.tag = 1;
      wireObj.kind.InstructionError.error = pre_error;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_wallet_state(WalletState apiObj, wire_cst_wallet_state wireObj) {
    if (apiObj is WalletState_Ready) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is WalletState_TransferPossible) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is WalletState_Transferring) {
      var pre_role = cst_encode_wallet_transfer_role(apiObj.role);
      wireObj.tag = 2;
      wireObj.kind.Transferring.role = pre_role;
      return;
    }
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_disclosure_session_type(DisclosureSessionType raw);

  @protected
  int cst_encode_disclosure_status(DisclosureStatus raw);

  @protected
  int cst_encode_disclosure_type(DisclosureType raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_identify_uri_result(IdentifyUriResult raw);

  @protected
  int cst_encode_pin_validation_result(PinValidationResult raw);

  @protected
  int cst_encode_transfer_session_state(TransferSessionState raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_wallet_transfer_role(WalletTransferRole raw);

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_bool_Dco(RustStreamSink<bool> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_flutter_configuration_Dco(
    RustStreamSink<FlutterConfiguration> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_flutter_version_state_Dco(
    RustStreamSink<FlutterVersionState> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_list_attestation_presentation_Dco(
    RustStreamSink<List<AttestationPresentation>> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_list_wallet_event_Dco(RustStreamSink<List<WalletEvent>> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_accept_disclosure_result(AcceptDisclosureResult self, SseSerializer serializer);

  @protected
  void sse_encode_attestation_attribute(AttestationAttribute self, SseSerializer serializer);

  @protected
  void sse_encode_attestation_identity(AttestationIdentity self, SseSerializer serializer);

  @protected
  void sse_encode_attestation_presentation(AttestationPresentation self, SseSerializer serializer);

  @protected
  void sse_encode_attribute_value(AttributeValue self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_attestation_presentation(AttestationPresentation self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_image(Image self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_image_with_metadata(ImageWithMetadata self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_organization(Organization self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rendering_metadata(RenderingMetadata self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_request_policy(RequestPolicy self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_wallet_instruction_error(WalletInstructionError self, SseSerializer serializer);

  @protected
  void sse_encode_claim_display_metadata(ClaimDisplayMetadata self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_based_issuance_result(DisclosureBasedIssuanceResult self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_options(DisclosureOptions self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_session_type(DisclosureSessionType self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_status(DisclosureStatus self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_type(DisclosureType self, SseSerializer serializer);

  @protected
  void sse_encode_display_metadata(DisplayMetadata self, SseSerializer serializer);

  @protected
  void sse_encode_flutter_configuration(FlutterConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_flutter_version_state(FlutterVersionState self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_identify_uri_result(IdentifyUriResult self, SseSerializer serializer);

  @protected
  void sse_encode_image(Image self, SseSerializer serializer);

  @protected
  void sse_encode_image_with_metadata(ImageWithMetadata self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_attestation_attribute(List<AttestationAttribute> self, SseSerializer serializer);

  @protected
  void sse_encode_list_attestation_presentation(List<AttestationPresentation> self, SseSerializer serializer);

  @protected
  void sse_encode_list_attribute_value(List<AttributeValue> self, SseSerializer serializer);

  @protected
  void sse_encode_list_claim_display_metadata(List<ClaimDisplayMetadata> self, SseSerializer serializer);

  @protected
  void sse_encode_list_disclosure_options(List<DisclosureOptions> self, SseSerializer serializer);

  @protected
  void sse_encode_list_display_metadata(List<DisplayMetadata> self, SseSerializer serializer);

  @protected
  void sse_encode_list_localized_string(List<LocalizedString> self, SseSerializer serializer);

  @protected
  void sse_encode_list_missing_attribute(List<MissingAttribute> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_16_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_16_strict(Uint16List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_wallet_event(List<WalletEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_localized_string(LocalizedString self, SseSerializer serializer);

  @protected
  void sse_encode_missing_attribute(MissingAttribute self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_image(Image? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_image_with_metadata(ImageWithMetadata? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rendering_metadata(RenderingMetadata? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_attestation_presentation(List<AttestationPresentation>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_localized_string(List<LocalizedString>? self, SseSerializer serializer);

  @protected
  void sse_encode_organization(Organization self, SseSerializer serializer);

  @protected
  void sse_encode_pid_issuance_result(PidIssuanceResult self, SseSerializer serializer);

  @protected
  void sse_encode_pin_validation_result(PinValidationResult self, SseSerializer serializer);

  @protected
  void sse_encode_rendering_metadata(RenderingMetadata self, SseSerializer serializer);

  @protected
  void sse_encode_request_policy(RequestPolicy self, SseSerializer serializer);

  @protected
  void sse_encode_start_disclosure_result(StartDisclosureResult self, SseSerializer serializer);

  @protected
  void sse_encode_transfer_session_state(TransferSessionState self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_event(WalletEvent self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_instruction_error(WalletInstructionError self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_instruction_result(WalletInstructionResult self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_state(WalletState self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_transfer_role(WalletTransferRole self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class WalletCoreWire implements BaseWire {
  factory WalletCoreWire.fromExternalLibrary(ExternalLibrary lib) => WalletCoreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WalletCoreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WalletCoreWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
    : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
    'store_dart_post_cobject',
  );
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  void wire__crate__api__full__accept_disclosure(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_16_loose> selected_indices,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__accept_disclosure(
      port_,
      selected_indices,
      pin,
    );
  }

  late final _wire__crate__api__full__accept_disclosurePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int64,
            ffi.Pointer<wire_cst_list_prim_u_16_loose>,
            ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          )
        >
      >('frbgen_wallet_core_wire__crate__api__full__accept_disclosure');
  late final _wire__crate__api__full__accept_disclosure = _wire__crate__api__full__accept_disclosurePtr
      .asFunction<
        void Function(int, ffi.Pointer<wire_cst_list_prim_u_16_loose>, ffi.Pointer<wire_cst_list_prim_u_8_strict>)
      >();

  void wire__crate__api__full__accept_issuance(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__accept_issuance(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__accept_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__accept_issuance',
      );
  late final _wire__crate__api__full__accept_issuance = _wire__crate__api__full__accept_issuancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__accept_pid_issuance(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__accept_pid_issuance(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__accept_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__accept_pid_issuance',
      );
  late final _wire__crate__api__full__accept_pid_issuance = _wire__crate__api__full__accept_pid_issuancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__acknowledge_wallet_transfer(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
  ) {
    return _wire__crate__api__full__acknowledge_wallet_transfer(
      port_,
      uri,
    );
  }

  late final _wire__crate__api__full__acknowledge_wallet_transferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__acknowledge_wallet_transfer',
      );
  late final _wire__crate__api__full__acknowledge_wallet_transfer =
      _wire__crate__api__full__acknowledge_wallet_transferPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__cancel_disclosure(
    int port_,
  ) {
    return _wire__crate__api__full__cancel_disclosure(
      port_,
    );
  }

  late final _wire__crate__api__full__cancel_disclosurePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__cancel_disclosure',
  );
  late final _wire__crate__api__full__cancel_disclosure = _wire__crate__api__full__cancel_disclosurePtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__cancel_issuance(
    int port_,
  ) {
    return _wire__crate__api__full__cancel_issuance(
      port_,
    );
  }

  late final _wire__crate__api__full__cancel_issuancePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__cancel_issuance',
  );
  late final _wire__crate__api__full__cancel_issuance = _wire__crate__api__full__cancel_issuancePtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__cancel_pin_recovery(
    int port_,
  ) {
    return _wire__crate__api__full__cancel_pin_recovery(
      port_,
    );
  }

  late final _wire__crate__api__full__cancel_pin_recoveryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__cancel_pin_recovery',
      );
  late final _wire__crate__api__full__cancel_pin_recovery = _wire__crate__api__full__cancel_pin_recoveryPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__cancel_wallet_transfer(
    int port_,
  ) {
    return _wire__crate__api__full__cancel_wallet_transfer(
      port_,
    );
  }

  late final _wire__crate__api__full__cancel_wallet_transferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__cancel_wallet_transfer',
      );
  late final _wire__crate__api__full__cancel_wallet_transfer = _wire__crate__api__full__cancel_wallet_transferPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__change_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> old_pin,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> new_pin,
  ) {
    return _wire__crate__api__full__change_pin(
      port_,
      old_pin,
      new_pin,
    );
  }

  late final _wire__crate__api__full__change_pinPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int64,
            ffi.Pointer<wire_cst_list_prim_u_8_strict>,
            ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          )
        >
      >('frbgen_wallet_core_wire__crate__api__full__change_pin');
  late final _wire__crate__api__full__change_pin = _wire__crate__api__full__change_pinPtr
      .asFunction<
        void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Pointer<wire_cst_list_prim_u_8_strict>)
      >();

  void wire__crate__api__full__check_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__check_pin(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__check_pinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__check_pin',
      );
  late final _wire__crate__api__full__check_pin = _wire__crate__api__full__check_pinPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__clear_attestations_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_attestations_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_attestations_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__clear_attestations_stream',
      );
  late final _wire__crate__api__full__clear_attestations_stream = _wire__crate__api__full__clear_attestations_streamPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__clear_configuration_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_configuration_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_configuration_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__clear_configuration_stream',
      );
  late final _wire__crate__api__full__clear_configuration_stream =
      _wire__crate__api__full__clear_configuration_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__clear_lock_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_lock_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_lock_streamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__clear_lock_stream',
  );
  late final _wire__crate__api__full__clear_lock_stream = _wire__crate__api__full__clear_lock_streamPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__clear_recent_history_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_recent_history_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_recent_history_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__clear_recent_history_stream',
      );
  late final _wire__crate__api__full__clear_recent_history_stream =
      _wire__crate__api__full__clear_recent_history_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__clear_version_state_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_version_state_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_version_state_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__clear_version_state_stream',
      );
  late final _wire__crate__api__full__clear_version_state_stream =
      _wire__crate__api__full__clear_version_state_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__complete_pin_recovery(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__complete_pin_recovery(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__complete_pin_recoveryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__complete_pin_recovery',
      );
  late final _wire__crate__api__full__complete_pin_recovery = _wire__crate__api__full__complete_pin_recoveryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__continue_change_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__continue_change_pin(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__continue_change_pinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__continue_change_pin',
      );
  late final _wire__crate__api__full__continue_change_pin = _wire__crate__api__full__continue_change_pinPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__continue_disclosure_based_issuance(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_16_loose> selected_indices,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__continue_disclosure_based_issuance(
      port_,
      selected_indices,
      pin,
    );
  }

  late final _wire__crate__api__full__continue_disclosure_based_issuancePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int64,
            ffi.Pointer<wire_cst_list_prim_u_16_loose>,
            ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          )
        >
      >('frbgen_wallet_core_wire__crate__api__full__continue_disclosure_based_issuance');
  late final _wire__crate__api__full__continue_disclosure_based_issuance =
      _wire__crate__api__full__continue_disclosure_based_issuancePtr
          .asFunction<
            void Function(int, ffi.Pointer<wire_cst_list_prim_u_16_loose>, ffi.Pointer<wire_cst_list_prim_u_8_strict>)
          >();

  void wire__crate__api__full__continue_pid_issuance(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
  ) {
    return _wire__crate__api__full__continue_pid_issuance(
      port_,
      uri,
    );
  }

  late final _wire__crate__api__full__continue_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__continue_pid_issuance',
      );
  late final _wire__crate__api__full__continue_pid_issuance = _wire__crate__api__full__continue_pid_issuancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__continue_pin_recovery(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
  ) {
    return _wire__crate__api__full__continue_pin_recovery(
      port_,
      uri,
    );
  }

  late final _wire__crate__api__full__continue_pin_recoveryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__continue_pin_recovery',
      );
  late final _wire__crate__api__full__continue_pin_recovery = _wire__crate__api__full__continue_pin_recoveryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__create_pid_issuance_redirect_uri(
    int port_,
  ) {
    return _wire__crate__api__full__create_pid_issuance_redirect_uri(
      port_,
    );
  }

  late final _wire__crate__api__full__create_pid_issuance_redirect_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__create_pid_issuance_redirect_uri',
      );
  late final _wire__crate__api__full__create_pid_issuance_redirect_uri =
      _wire__crate__api__full__create_pid_issuance_redirect_uriPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__create_pid_renewal_redirect_uri(
    int port_,
  ) {
    return _wire__crate__api__full__create_pid_renewal_redirect_uri(
      port_,
    );
  }

  late final _wire__crate__api__full__create_pid_renewal_redirect_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__create_pid_renewal_redirect_uri',
      );
  late final _wire__crate__api__full__create_pid_renewal_redirect_uri =
      _wire__crate__api__full__create_pid_renewal_redirect_uriPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__create_pin_recovery_redirect_uri(
    int port_,
  ) {
    return _wire__crate__api__full__create_pin_recovery_redirect_uri(
      port_,
    );
  }

  late final _wire__crate__api__full__create_pin_recovery_redirect_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__create_pin_recovery_redirect_uri',
      );
  late final _wire__crate__api__full__create_pin_recovery_redirect_uri =
      _wire__crate__api__full__create_pin_recovery_redirect_uriPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__get_history(
    int port_,
  ) {
    return _wire__crate__api__full__get_history(
      port_,
    );
  }

  late final _wire__crate__api__full__get_historyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__get_history',
  );
  late final _wire__crate__api__full__get_history = _wire__crate__api__full__get_historyPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__get_history_for_card(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> attestation_id,
  ) {
    return _wire__crate__api__full__get_history_for_card(
      port_,
      attestation_id,
    );
  }

  late final _wire__crate__api__full__get_history_for_cardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__get_history_for_card',
      );
  late final _wire__crate__api__full__get_history_for_card = _wire__crate__api__full__get_history_for_cardPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__get_version_string(
    int port_,
  ) {
    return _wire__crate__api__full__get_version_string(
      port_,
    );
  }

  late final _wire__crate__api__full__get_version_stringPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__get_version_string',
  );
  late final _wire__crate__api__full__get_version_string = _wire__crate__api__full__get_version_stringPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__get_wallet_state(
    int port_,
  ) {
    return _wire__crate__api__full__get_wallet_state(
      port_,
    );
  }

  late final _wire__crate__api__full__get_wallet_statePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__get_wallet_state',
  );
  late final _wire__crate__api__full__get_wallet_state = _wire__crate__api__full__get_wallet_statePtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__get_wallet_transfer_state(
    int port_,
  ) {
    return _wire__crate__api__full__get_wallet_transfer_state(
      port_,
    );
  }

  late final _wire__crate__api__full__get_wallet_transfer_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__get_wallet_transfer_state',
      );
  late final _wire__crate__api__full__get_wallet_transfer_state = _wire__crate__api__full__get_wallet_transfer_statePtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__has_active_disclosure_session(
    int port_,
  ) {
    return _wire__crate__api__full__has_active_disclosure_session(
      port_,
    );
  }

  late final _wire__crate__api__full__has_active_disclosure_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__has_active_disclosure_session',
      );
  late final _wire__crate__api__full__has_active_disclosure_session =
      _wire__crate__api__full__has_active_disclosure_sessionPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__has_active_issuance_session(
    int port_,
  ) {
    return _wire__crate__api__full__has_active_issuance_session(
      port_,
    );
  }

  late final _wire__crate__api__full__has_active_issuance_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__has_active_issuance_session',
      );
  late final _wire__crate__api__full__has_active_issuance_session =
      _wire__crate__api__full__has_active_issuance_sessionPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__has_registration(
    int port_,
  ) {
    return _wire__crate__api__full__has_registration(
      port_,
    );
  }

  late final _wire__crate__api__full__has_registrationPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__has_registration',
  );
  late final _wire__crate__api__full__has_registration = _wire__crate__api__full__has_registrationPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__identify_uri(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
  ) {
    return _wire__crate__api__full__identify_uri(
      port_,
      uri,
    );
  }

  late final _wire__crate__api__full__identify_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__identify_uri',
      );
  late final _wire__crate__api__full__identify_uri = _wire__crate__api__full__identify_uriPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__init(
    int port_,
  ) {
    return _wire__crate__api__full__init(
      port_,
    );
  }

  late final _wire__crate__api__full__initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__init',
  );
  late final _wire__crate__api__full__init = _wire__crate__api__full__initPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__init_wallet_transfer(
    int port_,
  ) {
    return _wire__crate__api__full__init_wallet_transfer(
      port_,
    );
  }

  late final _wire__crate__api__full__init_wallet_transferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__init_wallet_transfer',
      );
  late final _wire__crate__api__full__init_wallet_transfer = _wire__crate__api__full__init_wallet_transferPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__is_biometric_unlock_enabled(
    int port_,
  ) {
    return _wire__crate__api__full__is_biometric_unlock_enabled(
      port_,
    );
  }

  late final _wire__crate__api__full__is_biometric_unlock_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__is_biometric_unlock_enabled',
      );
  late final _wire__crate__api__full__is_biometric_unlock_enabled =
      _wire__crate__api__full__is_biometric_unlock_enabledPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__is_initialized(
    int port_,
  ) {
    return _wire__crate__api__full__is_initialized(
      port_,
    );
  }

  late final _wire__crate__api__full__is_initializedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__is_initialized',
  );
  late final _wire__crate__api__full__is_initialized = _wire__crate__api__full__is_initializedPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__is_valid_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__is_valid_pin(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__is_valid_pinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__is_valid_pin',
      );
  late final _wire__crate__api__full__is_valid_pin = _wire__crate__api__full__is_valid_pinPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__lock_wallet(
    int port_,
  ) {
    return _wire__crate__api__full__lock_wallet(
      port_,
    );
  }

  late final _wire__crate__api__full__lock_walletPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__lock_wallet',
  );
  late final _wire__crate__api__full__lock_wallet = _wire__crate__api__full__lock_walletPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__prepare_transfer_wallet(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__prepare_transfer_wallet(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__prepare_transfer_walletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__prepare_transfer_wallet',
      );
  late final _wire__crate__api__full__prepare_transfer_wallet = _wire__crate__api__full__prepare_transfer_walletPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__register(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__register(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__registerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__register',
      );
  late final _wire__crate__api__full__register = _wire__crate__api__full__registerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__reset_wallet(
    int port_,
  ) {
    return _wire__crate__api__full__reset_wallet(
      port_,
    );
  }

  late final _wire__crate__api__full__reset_walletPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__reset_wallet',
  );
  late final _wire__crate__api__full__reset_wallet = _wire__crate__api__full__reset_walletPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__set_attestations_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_attestations_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_attestations_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__set_attestations_stream',
      );
  late final _wire__crate__api__full__set_attestations_stream = _wire__crate__api__full__set_attestations_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_biometric_unlock(
    int port_,
    bool enable,
  ) {
    return _wire__crate__api__full__set_biometric_unlock(
      port_,
      enable,
    );
  }

  late final _wire__crate__api__full__set_biometric_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
        'frbgen_wallet_core_wire__crate__api__full__set_biometric_unlock',
      );
  late final _wire__crate__api__full__set_biometric_unlock = _wire__crate__api__full__set_biometric_unlockPtr
      .asFunction<void Function(int, bool)>();

  void wire__crate__api__full__set_configuration_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_configuration_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_configuration_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__set_configuration_stream',
      );
  late final _wire__crate__api__full__set_configuration_stream = _wire__crate__api__full__set_configuration_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_lock_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_lock_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_lock_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__set_lock_stream',
      );
  late final _wire__crate__api__full__set_lock_stream = _wire__crate__api__full__set_lock_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_recent_history_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_recent_history_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_recent_history_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__set_recent_history_stream',
      );
  late final _wire__crate__api__full__set_recent_history_stream = _wire__crate__api__full__set_recent_history_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_version_state_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_version_state_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_version_state_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__set_version_state_stream',
      );
  late final _wire__crate__api__full__set_version_state_stream = _wire__crate__api__full__set_version_state_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__skip_wallet_transfer(
    int port_,
  ) {
    return _wire__crate__api__full__skip_wallet_transfer(
      port_,
    );
  }

  late final _wire__crate__api__full__skip_wallet_transferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__skip_wallet_transfer',
      );
  late final _wire__crate__api__full__skip_wallet_transfer = _wire__crate__api__full__skip_wallet_transferPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__start_disclosure(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
    bool is_qr_code,
  ) {
    return _wire__crate__api__full__start_disclosure(
      port_,
      uri,
      is_qr_code,
    );
  }

  late final _wire__crate__api__full__start_disclosurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Bool)>>(
        'frbgen_wallet_core_wire__crate__api__full__start_disclosure',
      );
  late final _wire__crate__api__full__start_disclosure = _wire__crate__api__full__start_disclosurePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, bool)>();

  void wire__crate__api__full__transfer_wallet(
    int port_,
  ) {
    return _wire__crate__api__full__transfer_wallet(
      port_,
    );
  }

  late final _wire__crate__api__full__transfer_walletPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
    'frbgen_wallet_core_wire__crate__api__full__transfer_wallet',
  );
  late final _wire__crate__api__full__transfer_wallet = _wire__crate__api__full__transfer_walletPtr
      .asFunction<void Function(int)>();

  void wire__crate__api__full__unlock_wallet(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__unlock_wallet(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__unlock_walletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
        'frbgen_wallet_core_wire__crate__api__full__unlock_wallet',
      );
  late final _wire__crate__api__full__unlock_wallet = _wire__crate__api__full__unlock_walletPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__unlock_wallet_with_biometrics(
    int port_,
  ) {
    return _wire__crate__api__full__unlock_wallet_with_biometrics(
      port_,
    );
  }

  late final _wire__crate__api__full__unlock_wallet_with_biometricsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
        'frbgen_wallet_core_wire__crate__api__full__unlock_wallet_with_biometrics',
      );
  late final _wire__crate__api__full__unlock_wallet_with_biometrics =
      _wire__crate__api__full__unlock_wallet_with_biometricsPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_cst_attestation_presentation> cst_new_box_autoadd_attestation_presentation() {
    return _cst_new_box_autoadd_attestation_presentation();
  }

  late final _cst_new_box_autoadd_attestation_presentationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_attestation_presentation> Function()>>(
        'frbgen_wallet_core_cst_new_box_autoadd_attestation_presentation',
      );
  late final _cst_new_box_autoadd_attestation_presentation = _cst_new_box_autoadd_attestation_presentationPtr
      .asFunction<ffi.Pointer<wire_cst_attestation_presentation> Function()>();

  ffi.Pointer<wire_cst_image> cst_new_box_autoadd_image() {
    return _cst_new_box_autoadd_image();
  }

  late final _cst_new_box_autoadd_imagePtr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_image> Function()>>(
    'frbgen_wallet_core_cst_new_box_autoadd_image',
  );
  late final _cst_new_box_autoadd_image = _cst_new_box_autoadd_imagePtr
      .asFunction<ffi.Pointer<wire_cst_image> Function()>();

  ffi.Pointer<wire_cst_image_with_metadata> cst_new_box_autoadd_image_with_metadata() {
    return _cst_new_box_autoadd_image_with_metadata();
  }

  late final _cst_new_box_autoadd_image_with_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_image_with_metadata> Function()>>(
        'frbgen_wallet_core_cst_new_box_autoadd_image_with_metadata',
      );
  late final _cst_new_box_autoadd_image_with_metadata = _cst_new_box_autoadd_image_with_metadataPtr
      .asFunction<ffi.Pointer<wire_cst_image_with_metadata> Function()>();

  ffi.Pointer<wire_cst_organization> cst_new_box_autoadd_organization() {
    return _cst_new_box_autoadd_organization();
  }

  late final _cst_new_box_autoadd_organizationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_organization> Function()>>(
        'frbgen_wallet_core_cst_new_box_autoadd_organization',
      );
  late final _cst_new_box_autoadd_organization = _cst_new_box_autoadd_organizationPtr
      .asFunction<ffi.Pointer<wire_cst_organization> Function()>();

  ffi.Pointer<wire_cst_rendering_metadata> cst_new_box_autoadd_rendering_metadata() {
    return _cst_new_box_autoadd_rendering_metadata();
  }

  late final _cst_new_box_autoadd_rendering_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_rendering_metadata> Function()>>(
        'frbgen_wallet_core_cst_new_box_autoadd_rendering_metadata',
      );
  late final _cst_new_box_autoadd_rendering_metadata = _cst_new_box_autoadd_rendering_metadataPtr
      .asFunction<ffi.Pointer<wire_cst_rendering_metadata> Function()>();

  ffi.Pointer<wire_cst_request_policy> cst_new_box_autoadd_request_policy() {
    return _cst_new_box_autoadd_request_policy();
  }

  late final _cst_new_box_autoadd_request_policyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_request_policy> Function()>>(
        'frbgen_wallet_core_cst_new_box_autoadd_request_policy',
      );
  late final _cst_new_box_autoadd_request_policy = _cst_new_box_autoadd_request_policyPtr
      .asFunction<ffi.Pointer<wire_cst_request_policy> Function()>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
    'frbgen_wallet_core_cst_new_box_autoadd_u_64',
  );
  late final _cst_new_box_autoadd_u_64 = _cst_new_box_autoadd_u_64Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_cst_wallet_instruction_error> cst_new_box_autoadd_wallet_instruction_error() {
    return _cst_new_box_autoadd_wallet_instruction_error();
  }

  late final _cst_new_box_autoadd_wallet_instruction_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_wallet_instruction_error> Function()>>(
        'frbgen_wallet_core_cst_new_box_autoadd_wallet_instruction_error',
      );
  late final _cst_new_box_autoadd_wallet_instruction_error = _cst_new_box_autoadd_wallet_instruction_errorPtr
      .asFunction<ffi.Pointer<wire_cst_wallet_instruction_error> Function()>();

  ffi.Pointer<wire_cst_list_String> cst_new_list_String(
    int len,
  ) {
    return _cst_new_list_String(
      len,
    );
  }

  late final _cst_new_list_StringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_String> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_String',
      );
  late final _cst_new_list_String = _cst_new_list_StringPtr
      .asFunction<ffi.Pointer<wire_cst_list_String> Function(int)>();

  ffi.Pointer<wire_cst_list_attestation_attribute> cst_new_list_attestation_attribute(
    int len,
  ) {
    return _cst_new_list_attestation_attribute(
      len,
    );
  }

  late final _cst_new_list_attestation_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_attestation_attribute> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_attestation_attribute',
      );
  late final _cst_new_list_attestation_attribute = _cst_new_list_attestation_attributePtr
      .asFunction<ffi.Pointer<wire_cst_list_attestation_attribute> Function(int)>();

  ffi.Pointer<wire_cst_list_attestation_presentation> cst_new_list_attestation_presentation(
    int len,
  ) {
    return _cst_new_list_attestation_presentation(
      len,
    );
  }

  late final _cst_new_list_attestation_presentationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_attestation_presentation> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_attestation_presentation',
      );
  late final _cst_new_list_attestation_presentation = _cst_new_list_attestation_presentationPtr
      .asFunction<ffi.Pointer<wire_cst_list_attestation_presentation> Function(int)>();

  ffi.Pointer<wire_cst_list_attribute_value> cst_new_list_attribute_value(
    int len,
  ) {
    return _cst_new_list_attribute_value(
      len,
    );
  }

  late final _cst_new_list_attribute_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_attribute_value> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_attribute_value',
      );
  late final _cst_new_list_attribute_value = _cst_new_list_attribute_valuePtr
      .asFunction<ffi.Pointer<wire_cst_list_attribute_value> Function(int)>();

  ffi.Pointer<wire_cst_list_claim_display_metadata> cst_new_list_claim_display_metadata(
    int len,
  ) {
    return _cst_new_list_claim_display_metadata(
      len,
    );
  }

  late final _cst_new_list_claim_display_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_claim_display_metadata> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_claim_display_metadata',
      );
  late final _cst_new_list_claim_display_metadata = _cst_new_list_claim_display_metadataPtr
      .asFunction<ffi.Pointer<wire_cst_list_claim_display_metadata> Function(int)>();

  ffi.Pointer<wire_cst_list_disclosure_options> cst_new_list_disclosure_options(
    int len,
  ) {
    return _cst_new_list_disclosure_options(
      len,
    );
  }

  late final _cst_new_list_disclosure_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_disclosure_options> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_disclosure_options',
      );
  late final _cst_new_list_disclosure_options = _cst_new_list_disclosure_optionsPtr
      .asFunction<ffi.Pointer<wire_cst_list_disclosure_options> Function(int)>();

  ffi.Pointer<wire_cst_list_display_metadata> cst_new_list_display_metadata(
    int len,
  ) {
    return _cst_new_list_display_metadata(
      len,
    );
  }

  late final _cst_new_list_display_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_display_metadata> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_display_metadata',
      );
  late final _cst_new_list_display_metadata = _cst_new_list_display_metadataPtr
      .asFunction<ffi.Pointer<wire_cst_list_display_metadata> Function(int)>();

  ffi.Pointer<wire_cst_list_localized_string> cst_new_list_localized_string(
    int len,
  ) {
    return _cst_new_list_localized_string(
      len,
    );
  }

  late final _cst_new_list_localized_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_localized_string> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_localized_string',
      );
  late final _cst_new_list_localized_string = _cst_new_list_localized_stringPtr
      .asFunction<ffi.Pointer<wire_cst_list_localized_string> Function(int)>();

  ffi.Pointer<wire_cst_list_missing_attribute> cst_new_list_missing_attribute(
    int len,
  ) {
    return _cst_new_list_missing_attribute(
      len,
    );
  }

  late final _cst_new_list_missing_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_missing_attribute> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_missing_attribute',
      );
  late final _cst_new_list_missing_attribute = _cst_new_list_missing_attributePtr
      .asFunction<ffi.Pointer<wire_cst_list_missing_attribute> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_16_loose> cst_new_list_prim_u_16_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_16_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_16_loosePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_prim_u_16_loose> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_prim_u_16_loose',
      );
  late final _cst_new_list_prim_u_16_loose = _cst_new_list_prim_u_16_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_16_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_16_strict> cst_new_list_prim_u_16_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_16_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_16_strictPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_prim_u_16_strict> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_prim_u_16_strict',
      );
  late final _cst_new_list_prim_u_16_strict = _cst_new_list_prim_u_16_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_16_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_prim_u_8_strict',
      );
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_wallet_event> cst_new_list_wallet_event(
    int len,
  ) {
    return _cst_new_list_wallet_event(
      len,
    );
  }

  late final _cst_new_list_wallet_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_wallet_event> Function(ffi.Int32)>>(
        'frbgen_wallet_core_cst_new_list_wallet_event',
      );
  late final _cst_new_list_wallet_event = _cst_new_list_wallet_eventPtr
      .asFunction<ffi.Pointer<wire_cst_list_wallet_event> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr = _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
    'dummy_method_to_enforce_bundling',
  );
  late final _dummy_method_to_enforce_bundling = _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPort = ffi.Int64;
typedef DartDartPort = int;
typedef DartPostCObjectFnTypeFunction = ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartDartPostCObjectFnTypeFunction = bool Function(DartDartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnTypeFunction>>;

final class wire_cst_list_prim_u_16_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_AttestationIdentity_Fixed extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;
}

final class AttestationIdentityKind extends ffi.Union {
  external wire_cst_AttestationIdentity_Fixed Fixed;
}

final class wire_cst_attestation_identity extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AttestationIdentityKind kind;
}

final class wire_cst_Image_Svg extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> xml;
}

final class wire_cst_Image_Png extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_Image_Jpeg extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_Image_Asset extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> path;
}

final class ImageKind extends ffi.Union {
  external wire_cst_Image_Svg Svg;

  external wire_cst_Image_Png Png;

  external wire_cst_Image_Jpeg Jpeg;

  external wire_cst_Image_Asset Asset;
}

final class wire_cst_image extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ImageKind kind;
}

final class wire_cst_image_with_metadata extends ffi.Struct {
  external wire_cst_image image;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> alt_text;
}

final class wire_cst_RenderingMetadata_Simple extends ffi.Struct {
  external ffi.Pointer<wire_cst_image_with_metadata> logo;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> background_color;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> text_color;
}

final class RenderingMetadataKind extends ffi.Union {
  external wire_cst_RenderingMetadata_Simple Simple;
}

final class wire_cst_rendering_metadata extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external RenderingMetadataKind kind;
}

final class wire_cst_display_metadata extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lang;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> summary;

  external ffi.Pointer<wire_cst_rendering_metadata> rendering;
}

final class wire_cst_list_display_metadata extends ffi.Struct {
  external ffi.Pointer<wire_cst_display_metadata> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_localized_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> language;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class wire_cst_list_localized_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_localized_string> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_organization extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_localized_string> legal_name;

  external ffi.Pointer<wire_cst_list_localized_string> display_name;

  external ffi.Pointer<wire_cst_list_localized_string> description;

  external ffi.Pointer<wire_cst_image> image;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> web_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> privacy_policy_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> kvk;

  external ffi.Pointer<wire_cst_list_localized_string> city;

  external ffi.Pointer<wire_cst_list_localized_string> category;

  external ffi.Pointer<wire_cst_list_localized_string> department;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> country_code;
}

final class wire_cst_claim_display_metadata extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lang;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> label;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;
}

final class wire_cst_list_claim_display_metadata extends ffi.Struct {
  external ffi.Pointer<wire_cst_claim_display_metadata> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_AttributeValue_String extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class wire_cst_AttributeValue_Boolean extends ffi.Struct {
  @ffi.Bool()
  external bool value;
}

final class wire_cst_AttributeValue_Number extends ffi.Struct {
  @ffi.Int64()
  external int value;
}

final class wire_cst_AttributeValue_Date extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class wire_cst_AttributeValue_Array extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_attribute_value> value;
}

final class AttributeValueKind extends ffi.Union {
  external wire_cst_AttributeValue_String String;

  external wire_cst_AttributeValue_Boolean Boolean;

  external wire_cst_AttributeValue_Number Number;

  external wire_cst_AttributeValue_Date Date;

  external wire_cst_AttributeValue_Array Array;
}

final class wire_cst_attribute_value extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AttributeValueKind kind;
}

final class wire_cst_list_attribute_value extends ffi.Struct {
  external ffi.Pointer<wire_cst_attribute_value> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_attestation_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> key;

  external ffi.Pointer<wire_cst_list_claim_display_metadata> labels;

  external wire_cst_attribute_value value;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> svg_id;
}

final class wire_cst_list_attestation_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_attestation_attribute> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_attestation_presentation extends ffi.Struct {
  external wire_cst_attestation_identity identity;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> attestation_type;

  external ffi.Pointer<wire_cst_list_display_metadata> display_metadata;

  external wire_cst_organization issuer;

  external ffi.Pointer<wire_cst_list_attestation_attribute> attributes;
}

final class wire_cst_request_policy extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> data_storage_duration_in_minutes;

  @ffi.Bool()
  external bool data_shared_with_third_parties;

  @ffi.Bool()
  external bool data_deletion_possible;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> policy_url;
}

final class wire_cst_WalletInstructionError_IncorrectPin extends ffi.Struct {
  @ffi.Uint8()
  external int attempts_left_in_round;

  @ffi.Bool()
  external bool is_final_round;
}

final class wire_cst_WalletInstructionError_Timeout extends ffi.Struct {
  @ffi.Uint64()
  external int timeout_millis;
}

final class WalletInstructionErrorKind extends ffi.Union {
  external wire_cst_WalletInstructionError_IncorrectPin IncorrectPin;

  external wire_cst_WalletInstructionError_Timeout Timeout;
}

final class wire_cst_wallet_instruction_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external WalletInstructionErrorKind kind;
}

final class wire_cst_list_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_attestation_presentation extends ffi.Struct {
  external ffi.Pointer<wire_cst_attestation_presentation> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_disclosure_options extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_attestation_presentation> field0;
}

final class wire_cst_list_disclosure_options extends ffi.Struct {
  external ffi.Pointer<wire_cst_disclosure_options> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_missing_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_localized_string> labels;
}

final class wire_cst_list_missing_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_missing_attribute> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_prim_u_16_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_WalletEvent_Disclosure extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> date_time;

  external ffi.Pointer<wire_cst_organization> relying_party;

  external ffi.Pointer<wire_cst_list_localized_string> purpose;

  external ffi.Pointer<wire_cst_list_attestation_presentation> shared_attestations;

  external ffi.Pointer<wire_cst_request_policy> request_policy;

  @ffi.Int32()
  external int status;

  @ffi.Int32()
  external int typ;
}

final class wire_cst_WalletEvent_Issuance extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> date_time;

  external ffi.Pointer<wire_cst_attestation_presentation> attestation;

  @ffi.Bool()
  external bool renewed;
}

final class WalletEventKind extends ffi.Union {
  external wire_cst_WalletEvent_Disclosure Disclosure;

  external wire_cst_WalletEvent_Issuance Issuance;
}

final class wire_cst_wallet_event extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external WalletEventKind kind;
}

final class wire_cst_list_wallet_event extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_event> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_AcceptDisclosureResult_Ok extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> return_url;
}

final class wire_cst_AcceptDisclosureResult_InstructionError extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_instruction_error> error;
}

final class AcceptDisclosureResultKind extends ffi.Union {
  external wire_cst_AcceptDisclosureResult_Ok Ok;

  external wire_cst_AcceptDisclosureResult_InstructionError InstructionError;
}

final class wire_cst_accept_disclosure_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AcceptDisclosureResultKind kind;
}

final class wire_cst_DisclosureBasedIssuanceResult_Ok extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_attestation_presentation> field0;
}

final class wire_cst_DisclosureBasedIssuanceResult_InstructionError extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_instruction_error> error;
}

final class DisclosureBasedIssuanceResultKind extends ffi.Union {
  external wire_cst_DisclosureBasedIssuanceResult_Ok Ok;

  external wire_cst_DisclosureBasedIssuanceResult_InstructionError InstructionError;
}

final class wire_cst_disclosure_based_issuance_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DisclosureBasedIssuanceResultKind kind;
}

final class wire_cst_flutter_configuration extends ffi.Struct {
  @ffi.Uint16()
  external int inactive_warning_timeout;

  @ffi.Uint16()
  external int inactive_lock_timeout;

  @ffi.Uint16()
  external int background_lock_timeout;

  external ffi.Pointer<wire_cst_list_String> pid_attestation_types;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> static_assets_base_url;

  @ffi.Uint64()
  external int version;
}

final class wire_cst_FlutterVersionState_Warn extends ffi.Struct {
  @ffi.Uint64()
  external int expires_in_seconds;
}

final class FlutterVersionStateKind extends ffi.Union {
  external wire_cst_FlutterVersionState_Warn Warn;
}

final class wire_cst_flutter_version_state extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external FlutterVersionStateKind kind;
}

final class wire_cst_PidIssuanceResult_Ok extends ffi.Struct {
  @ffi.Bool()
  external bool transfer_available;
}

final class wire_cst_PidIssuanceResult_InstructionError extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_instruction_error> error;
}

final class PidIssuanceResultKind extends ffi.Union {
  external wire_cst_PidIssuanceResult_Ok Ok;

  external wire_cst_PidIssuanceResult_InstructionError InstructionError;
}

final class wire_cst_pid_issuance_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PidIssuanceResultKind kind;
}

final class wire_cst_StartDisclosureResult_Request extends ffi.Struct {
  external ffi.Pointer<wire_cst_organization> relying_party;

  external ffi.Pointer<wire_cst_request_policy> policy;

  external ffi.Pointer<wire_cst_list_disclosure_options> disclosure_options;

  @ffi.Bool()
  external bool shared_data_with_relying_party_before;

  @ffi.Int32()
  external int session_type;

  external ffi.Pointer<wire_cst_list_localized_string> request_purpose;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> request_origin_base_url;

  @ffi.Int32()
  external int request_type;
}

final class wire_cst_StartDisclosureResult_RequestAttributesMissing extends ffi.Struct {
  external ffi.Pointer<wire_cst_organization> relying_party;

  external ffi.Pointer<wire_cst_list_missing_attribute> missing_attributes;

  @ffi.Bool()
  external bool shared_data_with_relying_party_before;

  @ffi.Int32()
  external int session_type;

  external ffi.Pointer<wire_cst_list_localized_string> request_purpose;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> request_origin_base_url;
}

final class StartDisclosureResultKind extends ffi.Union {
  external wire_cst_StartDisclosureResult_Request Request;

  external wire_cst_StartDisclosureResult_RequestAttributesMissing RequestAttributesMissing;
}

final class wire_cst_start_disclosure_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external StartDisclosureResultKind kind;
}

final class wire_cst_WalletInstructionResult_InstructionError extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_instruction_error> error;
}

final class WalletInstructionResultKind extends ffi.Union {
  external wire_cst_WalletInstructionResult_InstructionError InstructionError;
}

final class wire_cst_wallet_instruction_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external WalletInstructionResultKind kind;
}

final class wire_cst_WalletState_Transferring extends ffi.Struct {
  @ffi.Int32()
  external int role;
}

final class WalletStateKind extends ffi.Union {
  external wire_cst_WalletState_Transferring Transferring;
}

final class wire_cst_wallet_state extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external WalletStateKind kind;
}
