// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/full.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'models/card.dart';
import 'models/config.dart';
import 'models/disclosure.dart';
import 'models/instruction.dart';
import 'models/pin.dart';
import 'models/uri.dart';
import 'models/version_state.dart';
import 'models/wallet_event.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class WalletCoreApiImplPlatform extends BaseApiImpl<WalletCoreWire> {
  WalletCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  RustStreamSink<bool> dco_decode_StreamSink_bool_Dco(dynamic raw);

  @protected
  RustStreamSink<FlutterConfiguration> dco_decode_StreamSink_flutter_configuration_Dco(dynamic raw);

  @protected
  RustStreamSink<FlutterVersionState> dco_decode_StreamSink_flutter_version_state_Dco(dynamic raw);

  @protected
  RustStreamSink<List<Card>> dco_decode_StreamSink_list_card_Dco(dynamic raw);

  @protected
  RustStreamSink<List<WalletEvent>> dco_decode_StreamSink_list_wallet_event_Dco(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AcceptDisclosureResult dco_decode_accept_disclosure_result(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Card dco_decode_box_autoadd_card(dynamic raw);

  @protected
  Image dco_decode_box_autoadd_image(dynamic raw);

  @protected
  Organization dco_decode_box_autoadd_organization(dynamic raw);

  @protected
  RequestPolicy dco_decode_box_autoadd_request_policy(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  WalletInstructionError dco_decode_box_autoadd_wallet_instruction_error(dynamic raw);

  @protected
  Card dco_decode_card(dynamic raw);

  @protected
  CardAttribute dco_decode_card_attribute(dynamic raw);

  @protected
  CardPersistence dco_decode_card_persistence(dynamic raw);

  @protected
  CardValue dco_decode_card_value(dynamic raw);

  @protected
  DisclosureCard dco_decode_disclosure_card(dynamic raw);

  @protected
  DisclosureSessionType dco_decode_disclosure_session_type(dynamic raw);

  @protected
  DisclosureStatus dco_decode_disclosure_status(dynamic raw);

  @protected
  DisclosureType dco_decode_disclosure_type(dynamic raw);

  @protected
  FlutterConfiguration dco_decode_flutter_configuration(dynamic raw);

  @protected
  FlutterVersionState dco_decode_flutter_version_state(dynamic raw);

  @protected
  GenderCardValue dco_decode_gender_card_value(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  IdentifyUriResult dco_decode_identify_uri_result(dynamic raw);

  @protected
  Image dco_decode_image(dynamic raw);

  @protected
  List<Card> dco_decode_list_card(dynamic raw);

  @protected
  List<CardAttribute> dco_decode_list_card_attribute(dynamic raw);

  @protected
  List<DisclosureCard> dco_decode_list_disclosure_card(dynamic raw);

  @protected
  List<LocalizedString> dco_decode_list_localized_string(dynamic raw);

  @protected
  List<MissingAttribute> dco_decode_list_missing_attribute(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<WalletEvent> dco_decode_list_wallet_event(dynamic raw);

  @protected
  LocalizedString dco_decode_localized_string(dynamic raw);

  @protected
  MissingAttribute dco_decode_missing_attribute(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Image? dco_decode_opt_box_autoadd_image(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  List<DisclosureCard>? dco_decode_opt_list_disclosure_card(dynamic raw);

  @protected
  List<LocalizedString>? dco_decode_opt_list_localized_string(dynamic raw);

  @protected
  Organization dco_decode_organization(dynamic raw);

  @protected
  PinValidationResult dco_decode_pin_validation_result(dynamic raw);

  @protected
  RequestPolicy dco_decode_request_policy(dynamic raw);

  @protected
  StartDisclosureResult dco_decode_start_disclosure_result(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  WalletEvent dco_decode_wallet_event(dynamic raw);

  @protected
  WalletInstructionError dco_decode_wallet_instruction_error(dynamic raw);

  @protected
  WalletInstructionResult dco_decode_wallet_instruction_result(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  RustStreamSink<bool> sse_decode_StreamSink_bool_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<FlutterConfiguration> sse_decode_StreamSink_flutter_configuration_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<FlutterVersionState> sse_decode_StreamSink_flutter_version_state_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<List<Card>> sse_decode_StreamSink_list_card_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<List<WalletEvent>> sse_decode_StreamSink_list_wallet_event_Dco(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AcceptDisclosureResult sse_decode_accept_disclosure_result(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Card sse_decode_box_autoadd_card(SseDeserializer deserializer);

  @protected
  Image sse_decode_box_autoadd_image(SseDeserializer deserializer);

  @protected
  Organization sse_decode_box_autoadd_organization(SseDeserializer deserializer);

  @protected
  RequestPolicy sse_decode_box_autoadd_request_policy(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  WalletInstructionError sse_decode_box_autoadd_wallet_instruction_error(SseDeserializer deserializer);

  @protected
  Card sse_decode_card(SseDeserializer deserializer);

  @protected
  CardAttribute sse_decode_card_attribute(SseDeserializer deserializer);

  @protected
  CardPersistence sse_decode_card_persistence(SseDeserializer deserializer);

  @protected
  CardValue sse_decode_card_value(SseDeserializer deserializer);

  @protected
  DisclosureCard sse_decode_disclosure_card(SseDeserializer deserializer);

  @protected
  DisclosureSessionType sse_decode_disclosure_session_type(SseDeserializer deserializer);

  @protected
  DisclosureStatus sse_decode_disclosure_status(SseDeserializer deserializer);

  @protected
  DisclosureType sse_decode_disclosure_type(SseDeserializer deserializer);

  @protected
  FlutterConfiguration sse_decode_flutter_configuration(SseDeserializer deserializer);

  @protected
  FlutterVersionState sse_decode_flutter_version_state(SseDeserializer deserializer);

  @protected
  GenderCardValue sse_decode_gender_card_value(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  IdentifyUriResult sse_decode_identify_uri_result(SseDeserializer deserializer);

  @protected
  Image sse_decode_image(SseDeserializer deserializer);

  @protected
  List<Card> sse_decode_list_card(SseDeserializer deserializer);

  @protected
  List<CardAttribute> sse_decode_list_card_attribute(SseDeserializer deserializer);

  @protected
  List<DisclosureCard> sse_decode_list_disclosure_card(SseDeserializer deserializer);

  @protected
  List<LocalizedString> sse_decode_list_localized_string(SseDeserializer deserializer);

  @protected
  List<MissingAttribute> sse_decode_list_missing_attribute(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<WalletEvent> sse_decode_list_wallet_event(SseDeserializer deserializer);

  @protected
  LocalizedString sse_decode_localized_string(SseDeserializer deserializer);

  @protected
  MissingAttribute sse_decode_missing_attribute(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Image? sse_decode_opt_box_autoadd_image(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  List<DisclosureCard>? sse_decode_opt_list_disclosure_card(SseDeserializer deserializer);

  @protected
  List<LocalizedString>? sse_decode_opt_list_localized_string(SseDeserializer deserializer);

  @protected
  Organization sse_decode_organization(SseDeserializer deserializer);

  @protected
  PinValidationResult sse_decode_pin_validation_result(SseDeserializer deserializer);

  @protected
  RequestPolicy sse_decode_request_policy(SseDeserializer deserializer);

  @protected
  StartDisclosureResult sse_decode_start_disclosure_result(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  WalletEvent sse_decode_wallet_event(SseDeserializer deserializer);

  @protected
  WalletInstructionError sse_decode_wallet_instruction_error(SseDeserializer deserializer);

  @protected
  WalletInstructionResult sse_decode_wallet_instruction_result(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(AnyhowException raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_bool_Dco(RustStreamSink<bool> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.setupAndSerialize(
        codec: DcoCodec(
      decodeSuccessData: dco_decode_bool,
      decodeErrorData: dco_decode_AnyhowException,
    )));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_flutter_configuration_Dco(
      RustStreamSink<FlutterConfiguration> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.setupAndSerialize(
        codec: DcoCodec(
      decodeSuccessData: dco_decode_flutter_configuration,
      decodeErrorData: dco_decode_AnyhowException,
    )));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_flutter_version_state_Dco(
      RustStreamSink<FlutterVersionState> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.setupAndSerialize(
        codec: DcoCodec(
      decodeSuccessData: dco_decode_flutter_version_state,
      decodeErrorData: dco_decode_AnyhowException,
    )));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_list_card_Dco(RustStreamSink<List<Card>> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.setupAndSerialize(
        codec: DcoCodec(
      decodeSuccessData: dco_decode_list_card,
      decodeErrorData: dco_decode_AnyhowException,
    )));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_list_wallet_event_Dco(
      RustStreamSink<List<WalletEvent>> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.setupAndSerialize(
        codec: DcoCodec(
      decodeSuccessData: dco_decode_list_wallet_event,
      decodeErrorData: dco_decode_AnyhowException,
    )));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_card> cst_encode_box_autoadd_card(Card raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_card();
    cst_api_fill_to_wire_card(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_image> cst_encode_box_autoadd_image(Image raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_image();
    cst_api_fill_to_wire_image(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_organization> cst_encode_box_autoadd_organization(Organization raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_organization();
    cst_api_fill_to_wire_organization(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_request_policy> cst_encode_box_autoadd_request_policy(RequestPolicy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_request_policy();
    cst_api_fill_to_wire_request_policy(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<wire_cst_wallet_instruction_error> cst_encode_box_autoadd_wallet_instruction_error(
      WalletInstructionError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_wallet_instruction_error();
    cst_api_fill_to_wire_wallet_instruction_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_card> cst_encode_list_card(List<Card> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_card(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_card(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_card_attribute> cst_encode_list_card_attribute(List<CardAttribute> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_card_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_card_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_disclosure_card> cst_encode_list_disclosure_card(List<DisclosureCard> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_disclosure_card(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_disclosure_card(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_localized_string> cst_encode_list_localized_string(List<LocalizedString> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_localized_string(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_localized_string(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_missing_attribute> cst_encode_list_missing_attribute(List<MissingAttribute> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_missing_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_missing_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_wallet_event> cst_encode_list_wallet_event(List<WalletEvent> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_wallet_event(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_wallet_event(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_image> cst_encode_opt_box_autoadd_image(Image? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_image(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_disclosure_card> cst_encode_opt_list_disclosure_card(List<DisclosureCard>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_disclosure_card(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_localized_string> cst_encode_opt_list_localized_string(List<LocalizedString>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_localized_string(raw);
  }

  @protected
  int cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  void cst_api_fill_to_wire_accept_disclosure_result(
      AcceptDisclosureResult apiObj, wire_cst_accept_disclosure_result wireObj) {
    if (apiObj is AcceptDisclosureResult_Ok) {
      var pre_return_url = cst_encode_opt_String(apiObj.returnUrl);
      wireObj.tag = 0;
      wireObj.kind.Ok.return_url = pre_return_url;
      return;
    }
    if (apiObj is AcceptDisclosureResult_InstructionError) {
      var pre_error = cst_encode_box_autoadd_wallet_instruction_error(apiObj.error);
      wireObj.tag = 1;
      wireObj.kind.InstructionError.error = pre_error;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_card(Card apiObj, ffi.Pointer<wire_cst_card> wireObj) {
    cst_api_fill_to_wire_card(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_image(Image apiObj, ffi.Pointer<wire_cst_image> wireObj) {
    cst_api_fill_to_wire_image(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_organization(Organization apiObj, ffi.Pointer<wire_cst_organization> wireObj) {
    cst_api_fill_to_wire_organization(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_request_policy(
      RequestPolicy apiObj, ffi.Pointer<wire_cst_request_policy> wireObj) {
    cst_api_fill_to_wire_request_policy(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_wallet_instruction_error(
      WalletInstructionError apiObj, ffi.Pointer<wire_cst_wallet_instruction_error> wireObj) {
    cst_api_fill_to_wire_wallet_instruction_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_card(Card apiObj, wire_cst_card wireObj) {
    cst_api_fill_to_wire_organization(apiObj.issuer, wireObj.issuer);
    cst_api_fill_to_wire_card_persistence(apiObj.persistence, wireObj.persistence);
    wireObj.doc_type = cst_encode_String(apiObj.docType);
    wireObj.attributes = cst_encode_list_card_attribute(apiObj.attributes);
  }

  @protected
  void cst_api_fill_to_wire_card_attribute(CardAttribute apiObj, wire_cst_card_attribute wireObj) {
    wireObj.key = cst_encode_String(apiObj.key);
    wireObj.labels = cst_encode_list_localized_string(apiObj.labels);
    cst_api_fill_to_wire_card_value(apiObj.value, wireObj.value);
  }

  @protected
  void cst_api_fill_to_wire_card_persistence(CardPersistence apiObj, wire_cst_card_persistence wireObj) {
    if (apiObj is CardPersistence_InMemory) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is CardPersistence_Stored) {
      var pre_id = cst_encode_String(apiObj.id);
      wireObj.tag = 1;
      wireObj.kind.Stored.id = pre_id;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_card_value(CardValue apiObj, wire_cst_card_value wireObj) {
    if (apiObj is CardValue_String) {
      var pre_value = cst_encode_String(apiObj.value);
      wireObj.tag = 0;
      wireObj.kind.String.value = pre_value;
      return;
    }
    if (apiObj is CardValue_Boolean) {
      var pre_value = cst_encode_bool(apiObj.value);
      wireObj.tag = 1;
      wireObj.kind.Boolean.value = pre_value;
      return;
    }
    if (apiObj is CardValue_Date) {
      var pre_value = cst_encode_String(apiObj.value);
      wireObj.tag = 2;
      wireObj.kind.Date.value = pre_value;
      return;
    }
    if (apiObj is CardValue_Gender) {
      var pre_value = cst_encode_gender_card_value(apiObj.value);
      wireObj.tag = 3;
      wireObj.kind.Gender.value = pre_value;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_disclosure_card(DisclosureCard apiObj, wire_cst_disclosure_card wireObj) {
    cst_api_fill_to_wire_organization(apiObj.issuer, wireObj.issuer);
    wireObj.doc_type = cst_encode_String(apiObj.docType);
    wireObj.attributes = cst_encode_list_card_attribute(apiObj.attributes);
  }

  @protected
  void cst_api_fill_to_wire_flutter_configuration(FlutterConfiguration apiObj, wire_cst_flutter_configuration wireObj) {
    wireObj.inactive_lock_timeout = cst_encode_u_16(apiObj.inactiveLockTimeout);
    wireObj.background_lock_timeout = cst_encode_u_16(apiObj.backgroundLockTimeout);
    wireObj.version = cst_encode_u_64(apiObj.version);
  }

  @protected
  void cst_api_fill_to_wire_flutter_version_state(FlutterVersionState apiObj, wire_cst_flutter_version_state wireObj) {
    if (apiObj is FlutterVersionState_Ok) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is FlutterVersionState_Notify) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is FlutterVersionState_Recommend) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is FlutterVersionState_Warn) {
      var pre_expires_in_seconds = cst_encode_u_64(apiObj.expiresInSeconds);
      wireObj.tag = 3;
      wireObj.kind.Warn.expires_in_seconds = pre_expires_in_seconds;
      return;
    }
    if (apiObj is FlutterVersionState_Block) {
      wireObj.tag = 4;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_image(Image apiObj, wire_cst_image wireObj) {
    if (apiObj is Image_Svg) {
      var pre_xml = cst_encode_String(apiObj.xml);
      wireObj.tag = 0;
      wireObj.kind.Svg.xml = pre_xml;
      return;
    }
    if (apiObj is Image_Png) {
      var pre_base64 = cst_encode_String(apiObj.base64);
      wireObj.tag = 1;
      wireObj.kind.Png.base64 = pre_base64;
      return;
    }
    if (apiObj is Image_Jpg) {
      var pre_base64 = cst_encode_String(apiObj.base64);
      wireObj.tag = 2;
      wireObj.kind.Jpg.base64 = pre_base64;
      return;
    }
    if (apiObj is Image_Asset) {
      var pre_path = cst_encode_String(apiObj.path);
      wireObj.tag = 3;
      wireObj.kind.Asset.path = pre_path;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_localized_string(LocalizedString apiObj, wire_cst_localized_string wireObj) {
    wireObj.language = cst_encode_String(apiObj.language);
    wireObj.value = cst_encode_String(apiObj.value);
  }

  @protected
  void cst_api_fill_to_wire_missing_attribute(MissingAttribute apiObj, wire_cst_missing_attribute wireObj) {
    wireObj.labels = cst_encode_list_localized_string(apiObj.labels);
  }

  @protected
  void cst_api_fill_to_wire_organization(Organization apiObj, wire_cst_organization wireObj) {
    wireObj.legal_name = cst_encode_list_localized_string(apiObj.legalName);
    wireObj.display_name = cst_encode_list_localized_string(apiObj.displayName);
    wireObj.description = cst_encode_list_localized_string(apiObj.description);
    wireObj.image = cst_encode_opt_box_autoadd_image(apiObj.image);
    wireObj.web_url = cst_encode_opt_String(apiObj.webUrl);
    wireObj.privacy_policy_url = cst_encode_opt_String(apiObj.privacyPolicyUrl);
    wireObj.kvk = cst_encode_opt_String(apiObj.kvk);
    wireObj.city = cst_encode_opt_list_localized_string(apiObj.city);
    wireObj.category = cst_encode_list_localized_string(apiObj.category);
    wireObj.department = cst_encode_opt_list_localized_string(apiObj.department);
    wireObj.country_code = cst_encode_opt_String(apiObj.countryCode);
  }

  @protected
  void cst_api_fill_to_wire_request_policy(RequestPolicy apiObj, wire_cst_request_policy wireObj) {
    wireObj.data_storage_duration_in_minutes = cst_encode_opt_box_autoadd_u_64(apiObj.dataStorageDurationInMinutes);
    wireObj.data_shared_with_third_parties = cst_encode_bool(apiObj.dataSharedWithThirdParties);
    wireObj.data_deletion_possible = cst_encode_bool(apiObj.dataDeletionPossible);
    wireObj.policy_url = cst_encode_String(apiObj.policyUrl);
  }

  @protected
  void cst_api_fill_to_wire_start_disclosure_result(
      StartDisclosureResult apiObj, wire_cst_start_disclosure_result wireObj) {
    if (apiObj is StartDisclosureResult_Request) {
      var pre_relying_party = cst_encode_box_autoadd_organization(apiObj.relyingParty);
      var pre_policy = cst_encode_box_autoadd_request_policy(apiObj.policy);
      var pre_requested_cards = cst_encode_list_disclosure_card(apiObj.requestedCards);
      var pre_shared_data_with_relying_party_before = cst_encode_bool(apiObj.sharedDataWithRelyingPartyBefore);
      var pre_session_type = cst_encode_disclosure_session_type(apiObj.sessionType);
      var pre_request_purpose = cst_encode_list_localized_string(apiObj.requestPurpose);
      var pre_request_origin_base_url = cst_encode_String(apiObj.requestOriginBaseUrl);
      var pre_request_type = cst_encode_disclosure_type(apiObj.requestType);
      wireObj.tag = 0;
      wireObj.kind.Request.relying_party = pre_relying_party;
      wireObj.kind.Request.policy = pre_policy;
      wireObj.kind.Request.requested_cards = pre_requested_cards;
      wireObj.kind.Request.shared_data_with_relying_party_before = pre_shared_data_with_relying_party_before;
      wireObj.kind.Request.session_type = pre_session_type;
      wireObj.kind.Request.request_purpose = pre_request_purpose;
      wireObj.kind.Request.request_origin_base_url = pre_request_origin_base_url;
      wireObj.kind.Request.request_type = pre_request_type;
      return;
    }
    if (apiObj is StartDisclosureResult_RequestAttributesMissing) {
      var pre_relying_party = cst_encode_box_autoadd_organization(apiObj.relyingParty);
      var pre_missing_attributes = cst_encode_list_missing_attribute(apiObj.missingAttributes);
      var pre_shared_data_with_relying_party_before = cst_encode_bool(apiObj.sharedDataWithRelyingPartyBefore);
      var pre_session_type = cst_encode_disclosure_session_type(apiObj.sessionType);
      var pre_request_purpose = cst_encode_list_localized_string(apiObj.requestPurpose);
      var pre_request_origin_base_url = cst_encode_String(apiObj.requestOriginBaseUrl);
      wireObj.tag = 1;
      wireObj.kind.RequestAttributesMissing.relying_party = pre_relying_party;
      wireObj.kind.RequestAttributesMissing.missing_attributes = pre_missing_attributes;
      wireObj.kind.RequestAttributesMissing.shared_data_with_relying_party_before =
          pre_shared_data_with_relying_party_before;
      wireObj.kind.RequestAttributesMissing.session_type = pre_session_type;
      wireObj.kind.RequestAttributesMissing.request_purpose = pre_request_purpose;
      wireObj.kind.RequestAttributesMissing.request_origin_base_url = pre_request_origin_base_url;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_wallet_event(WalletEvent apiObj, wire_cst_wallet_event wireObj) {
    if (apiObj is WalletEvent_Disclosure) {
      var pre_date_time = cst_encode_String(apiObj.dateTime);
      var pre_relying_party = cst_encode_box_autoadd_organization(apiObj.relyingParty);
      var pre_purpose = cst_encode_list_localized_string(apiObj.purpose);
      var pre_requested_cards = cst_encode_opt_list_disclosure_card(apiObj.requestedCards);
      var pre_request_policy = cst_encode_box_autoadd_request_policy(apiObj.requestPolicy);
      var pre_status = cst_encode_disclosure_status(apiObj.status);
      var pre_typ = cst_encode_disclosure_type(apiObj.typ);
      wireObj.tag = 0;
      wireObj.kind.Disclosure.date_time = pre_date_time;
      wireObj.kind.Disclosure.relying_party = pre_relying_party;
      wireObj.kind.Disclosure.purpose = pre_purpose;
      wireObj.kind.Disclosure.requested_cards = pre_requested_cards;
      wireObj.kind.Disclosure.request_policy = pre_request_policy;
      wireObj.kind.Disclosure.status = pre_status;
      wireObj.kind.Disclosure.typ = pre_typ;
      return;
    }
    if (apiObj is WalletEvent_Issuance) {
      var pre_date_time = cst_encode_String(apiObj.dateTime);
      var pre_card = cst_encode_box_autoadd_card(apiObj.card);
      wireObj.tag = 1;
      wireObj.kind.Issuance.date_time = pre_date_time;
      wireObj.kind.Issuance.card = pre_card;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_wallet_instruction_error(
      WalletInstructionError apiObj, wire_cst_wallet_instruction_error wireObj) {
    if (apiObj is WalletInstructionError_IncorrectPin) {
      var pre_attempts_left_in_round = cst_encode_u_8(apiObj.attemptsLeftInRound);
      var pre_is_final_round = cst_encode_bool(apiObj.isFinalRound);
      wireObj.tag = 0;
      wireObj.kind.IncorrectPin.attempts_left_in_round = pre_attempts_left_in_round;
      wireObj.kind.IncorrectPin.is_final_round = pre_is_final_round;
      return;
    }
    if (apiObj is WalletInstructionError_Timeout) {
      var pre_timeout_millis = cst_encode_u_64(apiObj.timeoutMillis);
      wireObj.tag = 1;
      wireObj.kind.Timeout.timeout_millis = pre_timeout_millis;
      return;
    }
    if (apiObj is WalletInstructionError_Blocked) {
      wireObj.tag = 2;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_wallet_instruction_result(
      WalletInstructionResult apiObj, wire_cst_wallet_instruction_result wireObj) {
    if (apiObj is WalletInstructionResult_Ok) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is WalletInstructionResult_InstructionError) {
      var pre_error = cst_encode_box_autoadd_wallet_instruction_error(apiObj.error);
      wireObj.tag = 1;
      wireObj.kind.InstructionError.error = pre_error;
      return;
    }
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_disclosure_session_type(DisclosureSessionType raw);

  @protected
  int cst_encode_disclosure_status(DisclosureStatus raw);

  @protected
  int cst_encode_disclosure_type(DisclosureType raw);

  @protected
  int cst_encode_gender_card_value(GenderCardValue raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_identify_uri_result(IdentifyUriResult raw);

  @protected
  int cst_encode_pin_validation_result(PinValidationResult raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_bool_Dco(RustStreamSink<bool> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_flutter_configuration_Dco(
      RustStreamSink<FlutterConfiguration> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_flutter_version_state_Dco(
      RustStreamSink<FlutterVersionState> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_list_card_Dco(RustStreamSink<List<Card>> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_list_wallet_event_Dco(RustStreamSink<List<WalletEvent>> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_accept_disclosure_result(AcceptDisclosureResult self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_card(Card self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_image(Image self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_organization(Organization self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_request_policy(RequestPolicy self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_wallet_instruction_error(WalletInstructionError self, SseSerializer serializer);

  @protected
  void sse_encode_card(Card self, SseSerializer serializer);

  @protected
  void sse_encode_card_attribute(CardAttribute self, SseSerializer serializer);

  @protected
  void sse_encode_card_persistence(CardPersistence self, SseSerializer serializer);

  @protected
  void sse_encode_card_value(CardValue self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_card(DisclosureCard self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_session_type(DisclosureSessionType self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_status(DisclosureStatus self, SseSerializer serializer);

  @protected
  void sse_encode_disclosure_type(DisclosureType self, SseSerializer serializer);

  @protected
  void sse_encode_flutter_configuration(FlutterConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_flutter_version_state(FlutterVersionState self, SseSerializer serializer);

  @protected
  void sse_encode_gender_card_value(GenderCardValue self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_identify_uri_result(IdentifyUriResult self, SseSerializer serializer);

  @protected
  void sse_encode_image(Image self, SseSerializer serializer);

  @protected
  void sse_encode_list_card(List<Card> self, SseSerializer serializer);

  @protected
  void sse_encode_list_card_attribute(List<CardAttribute> self, SseSerializer serializer);

  @protected
  void sse_encode_list_disclosure_card(List<DisclosureCard> self, SseSerializer serializer);

  @protected
  void sse_encode_list_localized_string(List<LocalizedString> self, SseSerializer serializer);

  @protected
  void sse_encode_list_missing_attribute(List<MissingAttribute> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_wallet_event(List<WalletEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_localized_string(LocalizedString self, SseSerializer serializer);

  @protected
  void sse_encode_missing_attribute(MissingAttribute self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_image(Image? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_disclosure_card(List<DisclosureCard>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_localized_string(List<LocalizedString>? self, SseSerializer serializer);

  @protected
  void sse_encode_organization(Organization self, SseSerializer serializer);

  @protected
  void sse_encode_pin_validation_result(PinValidationResult self, SseSerializer serializer);

  @protected
  void sse_encode_request_policy(RequestPolicy self, SseSerializer serializer);

  @protected
  void sse_encode_start_disclosure_result(StartDisclosureResult self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_event(WalletEvent self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_instruction_error(WalletInstructionError self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_instruction_result(WalletInstructionResult self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class WalletCoreWire implements BaseWire {
  factory WalletCoreWire.fromExternalLibrary(ExternalLibrary lib) => WalletCoreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WalletCoreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WalletCoreWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  void wire__crate__api__full__accept_disclosure(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__accept_disclosure(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__accept_disclosurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__accept_disclosure');
  late final _wire__crate__api__full__accept_disclosure = _wire__crate__api__full__accept_disclosurePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__accept_pid_issuance(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__accept_pid_issuance(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__accept_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__accept_pid_issuance');
  late final _wire__crate__api__full__accept_pid_issuance = _wire__crate__api__full__accept_pid_issuancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__cancel_disclosure(
    int port_,
  ) {
    return _wire__crate__api__full__cancel_disclosure(
      port_,
    );
  }

  late final _wire__crate__api__full__cancel_disclosurePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__cancel_disclosure');
  late final _wire__crate__api__full__cancel_disclosure =
      _wire__crate__api__full__cancel_disclosurePtr.asFunction<void Function(int)>();

  void wire__crate__api__full__cancel_pid_issuance(
    int port_,
  ) {
    return _wire__crate__api__full__cancel_pid_issuance(
      port_,
    );
  }

  late final _wire__crate__api__full__cancel_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__cancel_pid_issuance');
  late final _wire__crate__api__full__cancel_pid_issuance =
      _wire__crate__api__full__cancel_pid_issuancePtr.asFunction<void Function(int)>();

  void wire__crate__api__full__change_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> old_pin,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> new_pin,
  ) {
    return _wire__crate__api__full__change_pin(
      port_,
      old_pin,
      new_pin,
    );
  }

  late final _wire__crate__api__full__change_pinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>('frbgen_wallet_core_wire__crate__api__full__change_pin');
  late final _wire__crate__api__full__change_pin = _wire__crate__api__full__change_pinPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__check_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__check_pin(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__check_pinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__check_pin');
  late final _wire__crate__api__full__check_pin = _wire__crate__api__full__check_pinPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__clear_cards_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_cards_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_cards_streamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__clear_cards_stream');
  late final _wire__crate__api__full__clear_cards_stream =
      _wire__crate__api__full__clear_cards_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__clear_configuration_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_configuration_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_configuration_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__clear_configuration_stream');
  late final _wire__crate__api__full__clear_configuration_stream =
      _wire__crate__api__full__clear_configuration_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__clear_lock_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_lock_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_lock_streamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__clear_lock_stream');
  late final _wire__crate__api__full__clear_lock_stream =
      _wire__crate__api__full__clear_lock_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__clear_recent_history_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_recent_history_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_recent_history_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__clear_recent_history_stream');
  late final _wire__crate__api__full__clear_recent_history_stream =
      _wire__crate__api__full__clear_recent_history_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__clear_version_state_stream(
    int port_,
  ) {
    return _wire__crate__api__full__clear_version_state_stream(
      port_,
    );
  }

  late final _wire__crate__api__full__clear_version_state_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__clear_version_state_stream');
  late final _wire__crate__api__full__clear_version_state_stream =
      _wire__crate__api__full__clear_version_state_streamPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__continue_change_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__continue_change_pin(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__continue_change_pinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__continue_change_pin');
  late final _wire__crate__api__full__continue_change_pin = _wire__crate__api__full__continue_change_pinPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__continue_pid_issuance(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
  ) {
    return _wire__crate__api__full__continue_pid_issuance(
      port_,
      uri,
    );
  }

  late final _wire__crate__api__full__continue_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__continue_pid_issuance');
  late final _wire__crate__api__full__continue_pid_issuance = _wire__crate__api__full__continue_pid_issuancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__create_pid_issuance_redirect_uri(
    int port_,
  ) {
    return _wire__crate__api__full__create_pid_issuance_redirect_uri(
      port_,
    );
  }

  late final _wire__crate__api__full__create_pid_issuance_redirect_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__create_pid_issuance_redirect_uri');
  late final _wire__crate__api__full__create_pid_issuance_redirect_uri =
      _wire__crate__api__full__create_pid_issuance_redirect_uriPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__get_history(
    int port_,
  ) {
    return _wire__crate__api__full__get_history(
      port_,
    );
  }

  late final _wire__crate__api__full__get_historyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__get_history');
  late final _wire__crate__api__full__get_history =
      _wire__crate__api__full__get_historyPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__get_history_for_card(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> doc_type,
  ) {
    return _wire__crate__api__full__get_history_for_card(
      port_,
      doc_type,
    );
  }

  late final _wire__crate__api__full__get_history_for_cardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__get_history_for_card');
  late final _wire__crate__api__full__get_history_for_card = _wire__crate__api__full__get_history_for_cardPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__get_version_string(
    int port_,
  ) {
    return _wire__crate__api__full__get_version_string(
      port_,
    );
  }

  late final _wire__crate__api__full__get_version_stringPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__get_version_string');
  late final _wire__crate__api__full__get_version_string =
      _wire__crate__api__full__get_version_stringPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__has_active_disclosure_session(
    int port_,
  ) {
    return _wire__crate__api__full__has_active_disclosure_session(
      port_,
    );
  }

  late final _wire__crate__api__full__has_active_disclosure_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__has_active_disclosure_session');
  late final _wire__crate__api__full__has_active_disclosure_session =
      _wire__crate__api__full__has_active_disclosure_sessionPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__has_active_pid_issuance_session(
    int port_,
  ) {
    return _wire__crate__api__full__has_active_pid_issuance_session(
      port_,
    );
  }

  late final _wire__crate__api__full__has_active_pid_issuance_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__has_active_pid_issuance_session');
  late final _wire__crate__api__full__has_active_pid_issuance_session =
      _wire__crate__api__full__has_active_pid_issuance_sessionPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__has_registration(
    int port_,
  ) {
    return _wire__crate__api__full__has_registration(
      port_,
    );
  }

  late final _wire__crate__api__full__has_registrationPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__has_registration');
  late final _wire__crate__api__full__has_registration =
      _wire__crate__api__full__has_registrationPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__identify_uri(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
  ) {
    return _wire__crate__api__full__identify_uri(
      port_,
      uri,
    );
  }

  late final _wire__crate__api__full__identify_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__identify_uri');
  late final _wire__crate__api__full__identify_uri = _wire__crate__api__full__identify_uriPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__init(
    int port_,
  ) {
    return _wire__crate__api__full__init(
      port_,
    );
  }

  late final _wire__crate__api__full__initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('frbgen_wallet_core_wire__crate__api__full__init');
  late final _wire__crate__api__full__init = _wire__crate__api__full__initPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__is_biometric_unlock_enabled(
    int port_,
  ) {
    return _wire__crate__api__full__is_biometric_unlock_enabled(
      port_,
    );
  }

  late final _wire__crate__api__full__is_biometric_unlock_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__is_biometric_unlock_enabled');
  late final _wire__crate__api__full__is_biometric_unlock_enabled =
      _wire__crate__api__full__is_biometric_unlock_enabledPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__is_initialized(
    int port_,
  ) {
    return _wire__crate__api__full__is_initialized(
      port_,
    );
  }

  late final _wire__crate__api__full__is_initializedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__is_initialized');
  late final _wire__crate__api__full__is_initialized =
      _wire__crate__api__full__is_initializedPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__is_valid_pin(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__is_valid_pin(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__is_valid_pinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__is_valid_pin');
  late final _wire__crate__api__full__is_valid_pin = _wire__crate__api__full__is_valid_pinPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__lock_wallet(
    int port_,
  ) {
    return _wire__crate__api__full__lock_wallet(
      port_,
    );
  }

  late final _wire__crate__api__full__lock_walletPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__lock_wallet');
  late final _wire__crate__api__full__lock_wallet =
      _wire__crate__api__full__lock_walletPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__register(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__register(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__registerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__register');
  late final _wire__crate__api__full__register =
      _wire__crate__api__full__registerPtr.asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__reset_wallet(
    int port_,
  ) {
    return _wire__crate__api__full__reset_wallet(
      port_,
    );
  }

  late final _wire__crate__api__full__reset_walletPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_wallet_core_wire__crate__api__full__reset_wallet');
  late final _wire__crate__api__full__reset_wallet =
      _wire__crate__api__full__reset_walletPtr.asFunction<void Function(int)>();

  void wire__crate__api__full__set_biometric_unlock(
    int port_,
    bool enable,
  ) {
    return _wire__crate__api__full__set_biometric_unlock(
      port_,
      enable,
    );
  }

  late final _wire__crate__api__full__set_biometric_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'frbgen_wallet_core_wire__crate__api__full__set_biometric_unlock');
  late final _wire__crate__api__full__set_biometric_unlock =
      _wire__crate__api__full__set_biometric_unlockPtr.asFunction<void Function(int, bool)>();

  void wire__crate__api__full__set_cards_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_cards_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_cards_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__set_cards_stream');
  late final _wire__crate__api__full__set_cards_stream = _wire__crate__api__full__set_cards_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_configuration_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_configuration_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_configuration_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__set_configuration_stream');
  late final _wire__crate__api__full__set_configuration_stream = _wire__crate__api__full__set_configuration_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_lock_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_lock_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_lock_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__set_lock_stream');
  late final _wire__crate__api__full__set_lock_stream = _wire__crate__api__full__set_lock_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_recent_history_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_recent_history_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_recent_history_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__set_recent_history_stream');
  late final _wire__crate__api__full__set_recent_history_stream = _wire__crate__api__full__set_recent_history_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__set_version_state_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sink,
  ) {
    return _wire__crate__api__full__set_version_state_stream(
      port_,
      sink,
    );
  }

  late final _wire__crate__api__full__set_version_state_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__set_version_state_stream');
  late final _wire__crate__api__full__set_version_state_stream = _wire__crate__api__full__set_version_state_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__start_disclosure(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri,
    bool is_qr_code,
  ) {
    return _wire__crate__api__full__start_disclosure(
      port_,
      uri,
      is_qr_code,
    );
  }

  late final _wire__crate__api__full__start_disclosurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Bool)>>(
          'frbgen_wallet_core_wire__crate__api__full__start_disclosure');
  late final _wire__crate__api__full__start_disclosure = _wire__crate__api__full__start_disclosurePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, bool)>();

  void wire__crate__api__full__unlock_wallet(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pin,
  ) {
    return _wire__crate__api__full__unlock_wallet(
      port_,
      pin,
    );
  }

  late final _wire__crate__api__full__unlock_walletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_wallet_core_wire__crate__api__full__unlock_wallet');
  late final _wire__crate__api__full__unlock_wallet = _wire__crate__api__full__unlock_walletPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__full__unlock_wallet_with_biometrics(
    int port_,
  ) {
    return _wire__crate__api__full__unlock_wallet_with_biometrics(
      port_,
    );
  }

  late final _wire__crate__api__full__unlock_wallet_with_biometricsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_wallet_core_wire__crate__api__full__unlock_wallet_with_biometrics');
  late final _wire__crate__api__full__unlock_wallet_with_biometrics =
      _wire__crate__api__full__unlock_wallet_with_biometricsPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_cst_card> cst_new_box_autoadd_card() {
    return _cst_new_box_autoadd_card();
  }

  late final _cst_new_box_autoadd_cardPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_card> Function()>>('frbgen_wallet_core_cst_new_box_autoadd_card');
  late final _cst_new_box_autoadd_card =
      _cst_new_box_autoadd_cardPtr.asFunction<ffi.Pointer<wire_cst_card> Function()>();

  ffi.Pointer<wire_cst_image> cst_new_box_autoadd_image() {
    return _cst_new_box_autoadd_image();
  }

  late final _cst_new_box_autoadd_imagePtr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_image> Function()>>(
      'frbgen_wallet_core_cst_new_box_autoadd_image');
  late final _cst_new_box_autoadd_image =
      _cst_new_box_autoadd_imagePtr.asFunction<ffi.Pointer<wire_cst_image> Function()>();

  ffi.Pointer<wire_cst_organization> cst_new_box_autoadd_organization() {
    return _cst_new_box_autoadd_organization();
  }

  late final _cst_new_box_autoadd_organizationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_organization> Function()>>(
          'frbgen_wallet_core_cst_new_box_autoadd_organization');
  late final _cst_new_box_autoadd_organization =
      _cst_new_box_autoadd_organizationPtr.asFunction<ffi.Pointer<wire_cst_organization> Function()>();

  ffi.Pointer<wire_cst_request_policy> cst_new_box_autoadd_request_policy() {
    return _cst_new_box_autoadd_request_policy();
  }

  late final _cst_new_box_autoadd_request_policyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_request_policy> Function()>>(
          'frbgen_wallet_core_cst_new_box_autoadd_request_policy');
  late final _cst_new_box_autoadd_request_policy =
      _cst_new_box_autoadd_request_policyPtr.asFunction<ffi.Pointer<wire_cst_request_policy> Function()>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
      'frbgen_wallet_core_cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 =
      _cst_new_box_autoadd_u_64Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_cst_wallet_instruction_error> cst_new_box_autoadd_wallet_instruction_error() {
    return _cst_new_box_autoadd_wallet_instruction_error();
  }

  late final _cst_new_box_autoadd_wallet_instruction_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_wallet_instruction_error> Function()>>(
          'frbgen_wallet_core_cst_new_box_autoadd_wallet_instruction_error');
  late final _cst_new_box_autoadd_wallet_instruction_error = _cst_new_box_autoadd_wallet_instruction_errorPtr
      .asFunction<ffi.Pointer<wire_cst_wallet_instruction_error> Function()>();

  ffi.Pointer<wire_cst_list_card> cst_new_list_card(
    int len,
  ) {
    return _cst_new_list_card(
      len,
    );
  }

  late final _cst_new_list_cardPtr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_card> Function(ffi.Int32)>>(
      'frbgen_wallet_core_cst_new_list_card');
  late final _cst_new_list_card = _cst_new_list_cardPtr.asFunction<ffi.Pointer<wire_cst_list_card> Function(int)>();

  ffi.Pointer<wire_cst_list_card_attribute> cst_new_list_card_attribute(
    int len,
  ) {
    return _cst_new_list_card_attribute(
      len,
    );
  }

  late final _cst_new_list_card_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_card_attribute> Function(ffi.Int32)>>(
          'frbgen_wallet_core_cst_new_list_card_attribute');
  late final _cst_new_list_card_attribute =
      _cst_new_list_card_attributePtr.asFunction<ffi.Pointer<wire_cst_list_card_attribute> Function(int)>();

  ffi.Pointer<wire_cst_list_disclosure_card> cst_new_list_disclosure_card(
    int len,
  ) {
    return _cst_new_list_disclosure_card(
      len,
    );
  }

  late final _cst_new_list_disclosure_cardPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_disclosure_card> Function(ffi.Int32)>>(
          'frbgen_wallet_core_cst_new_list_disclosure_card');
  late final _cst_new_list_disclosure_card =
      _cst_new_list_disclosure_cardPtr.asFunction<ffi.Pointer<wire_cst_list_disclosure_card> Function(int)>();

  ffi.Pointer<wire_cst_list_localized_string> cst_new_list_localized_string(
    int len,
  ) {
    return _cst_new_list_localized_string(
      len,
    );
  }

  late final _cst_new_list_localized_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_localized_string> Function(ffi.Int32)>>(
          'frbgen_wallet_core_cst_new_list_localized_string');
  late final _cst_new_list_localized_string =
      _cst_new_list_localized_stringPtr.asFunction<ffi.Pointer<wire_cst_list_localized_string> Function(int)>();

  ffi.Pointer<wire_cst_list_missing_attribute> cst_new_list_missing_attribute(
    int len,
  ) {
    return _cst_new_list_missing_attribute(
      len,
    );
  }

  late final _cst_new_list_missing_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_missing_attribute> Function(ffi.Int32)>>(
          'frbgen_wallet_core_cst_new_list_missing_attribute');
  late final _cst_new_list_missing_attribute =
      _cst_new_list_missing_attributePtr.asFunction<ffi.Pointer<wire_cst_list_missing_attribute> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)>>(
          'frbgen_wallet_core_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict =
      _cst_new_list_prim_u_8_strictPtr.asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_wallet_event> cst_new_list_wallet_event(
    int len,
  ) {
    return _cst_new_list_wallet_event(
      len,
    );
  }

  late final _cst_new_list_wallet_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_wallet_event> Function(ffi.Int32)>>(
          'frbgen_wallet_core_cst_new_list_wallet_event');
  late final _cst_new_list_wallet_event =
      _cst_new_list_wallet_eventPtr.asFunction<ffi.Pointer<wire_cst_list_wallet_event> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling = _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_localized_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> language;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class wire_cst_list_localized_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_localized_string> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_Image_Svg extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> xml;
}

final class wire_cst_Image_Png extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> base64;
}

final class wire_cst_Image_Jpg extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> base64;
}

final class wire_cst_Image_Asset extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> path;
}

final class ImageKind extends ffi.Union {
  external wire_cst_Image_Svg Svg;

  external wire_cst_Image_Png Png;

  external wire_cst_Image_Jpg Jpg;

  external wire_cst_Image_Asset Asset;
}

final class wire_cst_image extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ImageKind kind;
}

final class wire_cst_organization extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_localized_string> legal_name;

  external ffi.Pointer<wire_cst_list_localized_string> display_name;

  external ffi.Pointer<wire_cst_list_localized_string> description;

  external ffi.Pointer<wire_cst_image> image;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> web_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> privacy_policy_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> kvk;

  external ffi.Pointer<wire_cst_list_localized_string> city;

  external ffi.Pointer<wire_cst_list_localized_string> category;

  external ffi.Pointer<wire_cst_list_localized_string> department;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> country_code;
}

final class wire_cst_CardPersistence_Stored extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;
}

final class CardPersistenceKind extends ffi.Union {
  external wire_cst_CardPersistence_Stored Stored;
}

final class wire_cst_card_persistence extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external CardPersistenceKind kind;
}

final class wire_cst_CardValue_String extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class wire_cst_CardValue_Boolean extends ffi.Struct {
  @ffi.Bool()
  external bool value;
}

final class wire_cst_CardValue_Date extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class wire_cst_CardValue_Gender extends ffi.Struct {
  @ffi.Int32()
  external int value;
}

final class CardValueKind extends ffi.Union {
  external wire_cst_CardValue_String String;

  external wire_cst_CardValue_Boolean Boolean;

  external wire_cst_CardValue_Date Date;

  external wire_cst_CardValue_Gender Gender;
}

final class wire_cst_card_value extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external CardValueKind kind;
}

final class wire_cst_card_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> key;

  external ffi.Pointer<wire_cst_list_localized_string> labels;

  external wire_cst_card_value value;
}

final class wire_cst_list_card_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_card_attribute> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_card extends ffi.Struct {
  external wire_cst_organization issuer;

  external wire_cst_card_persistence persistence;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> doc_type;

  external ffi.Pointer<wire_cst_list_card_attribute> attributes;
}

final class wire_cst_request_policy extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> data_storage_duration_in_minutes;

  @ffi.Bool()
  external bool data_shared_with_third_parties;

  @ffi.Bool()
  external bool data_deletion_possible;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> policy_url;
}

final class wire_cst_WalletInstructionError_IncorrectPin extends ffi.Struct {
  @ffi.Uint8()
  external int attempts_left_in_round;

  @ffi.Bool()
  external bool is_final_round;
}

final class wire_cst_WalletInstructionError_Timeout extends ffi.Struct {
  @ffi.Uint64()
  external int timeout_millis;
}

final class WalletInstructionErrorKind extends ffi.Union {
  external wire_cst_WalletInstructionError_IncorrectPin IncorrectPin;

  external wire_cst_WalletInstructionError_Timeout Timeout;
}

final class wire_cst_wallet_instruction_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external WalletInstructionErrorKind kind;
}

final class wire_cst_list_card extends ffi.Struct {
  external ffi.Pointer<wire_cst_card> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_disclosure_card extends ffi.Struct {
  external wire_cst_organization issuer;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> doc_type;

  external ffi.Pointer<wire_cst_list_card_attribute> attributes;
}

final class wire_cst_list_disclosure_card extends ffi.Struct {
  external ffi.Pointer<wire_cst_disclosure_card> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_missing_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_localized_string> labels;
}

final class wire_cst_list_missing_attribute extends ffi.Struct {
  external ffi.Pointer<wire_cst_missing_attribute> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_WalletEvent_Disclosure extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> date_time;

  external ffi.Pointer<wire_cst_organization> relying_party;

  external ffi.Pointer<wire_cst_list_localized_string> purpose;

  external ffi.Pointer<wire_cst_list_disclosure_card> requested_cards;

  external ffi.Pointer<wire_cst_request_policy> request_policy;

  @ffi.Int32()
  external int status;

  @ffi.Int32()
  external int typ;
}

final class wire_cst_WalletEvent_Issuance extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> date_time;

  external ffi.Pointer<wire_cst_card> card;
}

final class WalletEventKind extends ffi.Union {
  external wire_cst_WalletEvent_Disclosure Disclosure;

  external wire_cst_WalletEvent_Issuance Issuance;
}

final class wire_cst_wallet_event extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external WalletEventKind kind;
}

final class wire_cst_list_wallet_event extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_event> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_AcceptDisclosureResult_Ok extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> return_url;
}

final class wire_cst_AcceptDisclosureResult_InstructionError extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_instruction_error> error;
}

final class AcceptDisclosureResultKind extends ffi.Union {
  external wire_cst_AcceptDisclosureResult_Ok Ok;

  external wire_cst_AcceptDisclosureResult_InstructionError InstructionError;
}

final class wire_cst_accept_disclosure_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AcceptDisclosureResultKind kind;
}

final class wire_cst_flutter_configuration extends ffi.Struct {
  @ffi.Uint16()
  external int inactive_lock_timeout;

  @ffi.Uint16()
  external int background_lock_timeout;

  @ffi.Uint64()
  external int version;
}

final class wire_cst_FlutterVersionState_Warn extends ffi.Struct {
  @ffi.Uint64()
  external int expires_in_seconds;
}

final class FlutterVersionStateKind extends ffi.Union {
  external wire_cst_FlutterVersionState_Warn Warn;
}

final class wire_cst_flutter_version_state extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external FlutterVersionStateKind kind;
}

final class wire_cst_StartDisclosureResult_Request extends ffi.Struct {
  external ffi.Pointer<wire_cst_organization> relying_party;

  external ffi.Pointer<wire_cst_request_policy> policy;

  external ffi.Pointer<wire_cst_list_disclosure_card> requested_cards;

  @ffi.Bool()
  external bool shared_data_with_relying_party_before;

  @ffi.Int32()
  external int session_type;

  external ffi.Pointer<wire_cst_list_localized_string> request_purpose;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> request_origin_base_url;

  @ffi.Int32()
  external int request_type;
}

final class wire_cst_StartDisclosureResult_RequestAttributesMissing extends ffi.Struct {
  external ffi.Pointer<wire_cst_organization> relying_party;

  external ffi.Pointer<wire_cst_list_missing_attribute> missing_attributes;

  @ffi.Bool()
  external bool shared_data_with_relying_party_before;

  @ffi.Int32()
  external int session_type;

  external ffi.Pointer<wire_cst_list_localized_string> request_purpose;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> request_origin_base_url;
}

final class StartDisclosureResultKind extends ffi.Union {
  external wire_cst_StartDisclosureResult_Request Request;

  external wire_cst_StartDisclosureResult_RequestAttributesMissing RequestAttributesMissing;
}

final class wire_cst_start_disclosure_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external StartDisclosureResultKind kind;
}

final class wire_cst_WalletInstructionResult_InstructionError extends ffi.Struct {
  external ffi.Pointer<wire_cst_wallet_instruction_error> error;
}

final class WalletInstructionResultKind extends ffi.Union {
  external wire_cst_WalletInstructionResult_InstructionError InstructionError;
}

final class wire_cst_wallet_instruction_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external WalletInstructionResultKind kind;
}
