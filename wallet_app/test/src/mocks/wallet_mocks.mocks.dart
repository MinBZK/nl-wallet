// Mocks generated by Mockito 5.4.5 from annotations
// in wallet/test/src/mocks/wallet_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/scheduler.dart' as _i6;
import 'package:flutter/services.dart' as _i12;
import 'package:flutter/src/widgets/focus_manager.dart' as _i2;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/widgets/restoration.dart' as _i14;
import 'package:flutter/widgets.dart' as _i4;
import 'package:local_auth/src/local_auth.dart' as _i36;
import 'package:local_auth_android/local_auth_android.dart' as _i37;
import 'package:local_auth_darwin/local_auth_darwin.dart' as _i38;
import 'package:local_auth_windows/local_auth_windows.dart' as _i39;
import 'package:mobile_scanner/mobile_scanner.dart' as _i83;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:permission_handler/permission_handler.dart' as _i84;
import 'package:wallet/src/data/repository/biometric/biometric_repository.dart' as _i29;
import 'package:wallet/src/data/repository/card/wallet_card_repository.dart' as _i23;
import 'package:wallet/src/data/repository/configuration/configuration_repository.dart' as _i26;
import 'package:wallet/src/data/repository/disclosure/disclosure_repository.dart' as _i20;
import 'package:wallet/src/data/repository/event/wallet_event_repository.dart' as _i24;
import 'package:wallet/src/data/repository/language/language_repository.dart' as _i28;
import 'package:wallet/src/data/repository/pid/pid_repository.dart' as _i17;
import 'package:wallet/src/data/repository/version/version_state_repository.dart' as _i30;
import 'package:wallet/src/data/repository/wallet/wallet_repository.dart' as _i22;
import 'package:wallet/src/data/service/navigation_service.dart' as _i33;
import 'package:wallet/src/data/store/active_locale_provider.dart' as _i40;
import 'package:wallet/src/domain/model/attribute/attribute.dart' as _i18;
import 'package:wallet/src/domain/model/configuration/flutter_app_configuration.dart' as _i27;
import 'package:wallet/src/domain/model/disclosure/start_disclosure_result.dart' as _i21;
import 'package:wallet/src/domain/model/event/wallet_event.dart' as _i25;
import 'package:wallet/src/domain/model/issuance/continue_issuance_result.dart' as _i10;
import 'package:wallet/src/domain/model/issuance/start_issuance_result.dart' as _i77;
import 'package:wallet/src/domain/model/pin/check_pin_result.dart' as _i47;
import 'package:wallet/src/domain/model/start_sign_result/start_sign_result.dart' as _i74;
import 'package:wallet/src/domain/model/update/update_notification.dart' as _i35;
import 'package:wallet/src/domain/model/update/version_state.dart' as _i31;
import 'package:wallet/src/domain/model/wallet_card.dart' as _i7;
import 'package:wallet/src/domain/model/wallet_card_detail.dart' as _i69;
import 'package:wallet/src/domain/usecase/app/check_is_app_initialized_usecase.dart' as _i43;
import 'package:wallet/src/domain/usecase/biometrics/biometrics.dart' as _i87;
import 'package:wallet/src/domain/usecase/biometrics/get_available_biometrics_usecase.dart' as _i86;
import 'package:wallet/src/domain/usecase/biometrics/get_supported_biometrics_usecase.dart' as _i89;
import 'package:wallet/src/domain/usecase/biometrics/is_biometric_login_enabled_usecase.dart' as _i90;
import 'package:wallet/src/domain/usecase/biometrics/set_biometrics_usecase.dart' as _i88;
import 'package:wallet/src/domain/usecase/card/get_wallet_card_usecase.dart' as _i70;
import 'package:wallet/src/domain/usecase/card/get_wallet_cards_usecase.dart' as _i64;
import 'package:wallet/src/domain/usecase/card/lock_wallet_usecase.dart' as _i80;
import 'package:wallet/src/domain/usecase/card/observe_wallet_card_detail_usecase.dart' as _i68;
import 'package:wallet/src/domain/usecase/card/observe_wallet_card_usecase.dart' as _i63;
import 'package:wallet/src/domain/usecase/card/observe_wallet_cards_usecase.dart' as _i57;
import 'package:wallet/src/domain/usecase/disclosure/accept_disclosure_usecase.dart' as _i53;
import 'package:wallet/src/domain/usecase/disclosure/cancel_disclosure_usecase.dart' as _i56;
import 'package:wallet/src/domain/usecase/disclosure/start_disclosure_usecase.dart' as _i55;
import 'package:wallet/src/domain/usecase/event/get_wallet_events_for_card_usecase.dart' as _i72;
import 'package:wallet/src/domain/usecase/event/get_wallet_events_usecase.dart' as _i71;
import 'package:wallet/src/domain/usecase/history/observe_recent_history_usecase.dart' as _i58;
import 'package:wallet/src/domain/usecase/issuance/accept_issuance_usecase.dart' as _i54;
import 'package:wallet/src/domain/usecase/issuance/cancel_issuance_usecase.dart' as _i79;
import 'package:wallet/src/domain/usecase/issuance/continue_issuance_usecase.dart' as _i78;
import 'package:wallet/src/domain/usecase/issuance/start_issuance_usecase.dart' as _i76;
import 'package:wallet/src/domain/usecase/navigation/check_navigation_prerequisites_usecase.dart' as _i50;
import 'package:wallet/src/domain/usecase/navigation/perform_pre_navigation_actions_usecase.dart' as _i34;
import 'package:wallet/src/domain/usecase/network/check_has_internet_usecase.dart' as _i49;
import 'package:wallet/src/domain/usecase/permission/check_has_permission_usecase.dart' as _i11;
import 'package:wallet/src/domain/usecase/pid/accept_offered_pid_usecase.dart' as _i51;
import 'package:wallet/src/domain/usecase/pid/cancel_pid_issuance_usecase.dart' as _i66;
import 'package:wallet/src/domain/usecase/pid/continue_pid_issuance_usecase.dart' as _i67;
import 'package:wallet/src/domain/usecase/pid/get_pid_issuance_url_usecase.dart' as _i65;
import 'package:wallet/src/domain/usecase/pin/change_pin_usecase.dart' as _i85;
import 'package:wallet/src/domain/usecase/pin/check_is_valid_pin_usecase.dart' as _i59;
import 'package:wallet/src/domain/usecase/pin/check_pin_usecase.dart' as _i46;
import 'package:wallet/src/domain/usecase/pin/disclose_for_issuance_usecase.dart' as _i81;
import 'package:wallet/src/domain/usecase/pin/unlock_wallet_with_pin_usecase.dart' as _i61;
import 'package:wallet/src/domain/usecase/qr/decode_qr_usecase.dart' as _i82;
import 'package:wallet/src/domain/usecase/sign/accept_sign_agreement_usecase.dart' as _i52;
import 'package:wallet/src/domain/usecase/sign/reject_sign_agreement_usecase.dart' as _i75;
import 'package:wallet/src/domain/usecase/sign/start_sign_usecase.dart' as _i73;
import 'package:wallet/src/domain/usecase/update/observe_version_state_usecase.dart' as _i91;
import 'package:wallet/src/domain/usecase/uri/decode_uri_usecase.dart' as _i42;
import 'package:wallet/src/domain/usecase/version/get_version_string_usecase.dart' as _i92;
import 'package:wallet/src/domain/usecase/wallet/create_wallet_usecase.dart' as _i60;
import 'package:wallet/src/domain/usecase/wallet/is_wallet_initialized_with_pid_usecase.dart' as _i44;
import 'package:wallet/src/domain/usecase/wallet/observe_wallet_locked_usecase.dart' as _i45;
import 'package:wallet/src/domain/usecase/wallet/reset_wallet_usecase.dart' as _i62;
import 'package:wallet/src/domain/usecase/wallet/setup_mocked_wallet_usecase.dart' as _i48;
import 'package:wallet/src/util/manager/biometric_unlock_manager.dart' as _i41;
import 'package:wallet/src/util/mapper/context_mapper.dart' as _i16;
import 'package:wallet/src/util/mapper/mapper.dart' as _i15;
import 'package:wallet/src/wallet_core/typed/typed_wallet_core.dart' as _i32;
import 'package:wallet_core/core.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFocusNode_0 extends _i1.SmartFake implements _i2.FocusNode {
  _FakeFocusNode_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeNavigator_2 extends _i1.SmartFake implements _i4.Navigator {
  _FakeNavigator_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeBuildContext_3 extends _i1.SmartFake implements _i5.BuildContext {
  _FakeBuildContext_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeWidget_4 extends _i1.SmartFake implements _i5.Widget {
  _FakeWidget_4(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeDiagnosticsNode_5 extends _i1.SmartFake implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_5(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeTicker_6 extends _i1.SmartFake implements _i6.Ticker {
  _FakeTicker_6(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

class _FakeWalletCard_7 extends _i1.SmartFake implements _i7.WalletCard {
  _FakeWalletCard_7(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeFuture_8<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_8(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeLocale_9 extends _i1.SmartFake implements _i9.Locale {
  _FakeLocale_9(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeContinueIssuanceResult_10 extends _i1.SmartFake implements _i10.ContinueIssuanceResult {
  _FakeContinueIssuanceResult_10(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakePermissionCheckResult_11 extends _i1.SmartFake implements _i11.PermissionCheckResult {
  _FakePermissionCheckResult_11(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [NavigatorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorState extends _i1.Mock implements _i4.NavigatorState {
  @override
  _i2.FocusNode get focusNode => (super.noSuchMethod(
        Invocation.getter(#focusNode),
        returnValue: _FakeFocusNode_0(this, Invocation.getter(#focusNode)),
        returnValueForMissingStub: _FakeFocusNode_0(
          this,
          Invocation.getter(#focusNode),
        ),
      ) as _i2.FocusNode);

  @override
  _i3.ValueNotifier<bool> get userGestureInProgressNotifier => (super.noSuchMethod(
        Invocation.getter(#userGestureInProgressNotifier),
        returnValue: _FakeValueNotifier_1<bool>(
          this,
          Invocation.getter(#userGestureInProgressNotifier),
        ),
        returnValueForMissingStub: _FakeValueNotifier_1<bool>(
          this,
          Invocation.getter(#userGestureInProgressNotifier),
        ),
      ) as _i3.ValueNotifier<bool>);

  @override
  bool get userGestureInProgress => (super.noSuchMethod(
        Invocation.getter(#userGestureInProgress),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Navigator get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeNavigator_2(this, Invocation.getter(#widget)),
        returnValueForMissingStub: _FakeNavigator_2(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.Navigator);

  @override
  _i5.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_3(this, Invocation.getter(#context)),
        returnValueForMissingStub: _FakeBuildContext_3(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.BuildContext);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get restorePending => (super.noSuchMethod(
        Invocation.getter(#restorePending),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void initState() => super.noSuchMethod(
        Invocation.method(#initState, []),
        returnValueForMissingStub: null,
      );

  @override
  void restoreState(_i12.RestorationBucket? oldBucket, bool? initialRestore) => super.noSuchMethod(
        Invocation.method(#restoreState, [oldBucket, initialRestore]),
        returnValueForMissingStub: null,
      );

  @override
  void didToggleBucket(_i12.RestorationBucket? oldBucket) => super.noSuchMethod(
        Invocation.method(#didToggleBucket, [oldBucket]),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeDependencies() => super.noSuchMethod(
        Invocation.method(#didChangeDependencies, []),
        returnValueForMissingStub: null,
      );

  @override
  void didUpdateWidget(_i5.StatefulWidget? oldWidget) => super.noSuchMethod(
        Invocation.method(#didUpdateWidget, [oldWidget]),
        returnValueForMissingStub: null,
      );

  @override
  void deactivate() => super.noSuchMethod(
        Invocation.method(#deactivate, []),
        returnValueForMissingStub: null,
      );

  @override
  void activate() => super.noSuchMethod(
        Invocation.method(#activate, []),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<T?> pushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#pushNamed, [routeName], {#arguments: arguments}),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  String restorablePushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushNamed,
          [routeName],
          {#arguments: arguments},
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushNamed,
            [routeName],
            {#arguments: arguments},
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushNamed,
            [routeName],
            {#arguments: arguments},
          ),
        ),
      ) as String);

  @override
  _i8.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacementNamed,
          [routeName],
          {#result: result, #arguments: arguments},
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  String restorablePushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushReplacementNamed,
          [routeName],
          {#result: result, #arguments: arguments},
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushReplacementNamed,
            [routeName],
            {#result: result, #arguments: arguments},
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushReplacementNamed,
            [routeName],
            {#result: result, #arguments: arguments},
          ),
        ),
      ) as String);

  @override
  _i8.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #popAndPushNamed,
          [routeName],
          {#result: result, #arguments: arguments},
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  String restorablePopAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePopAndPushNamed,
          [routeName],
          {#result: result, #arguments: arguments},
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePopAndPushNamed,
            [routeName],
            {#result: result, #arguments: arguments},
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePopAndPushNamed,
            [routeName],
            {#result: result, #arguments: arguments},
          ),
        ),
      ) as String);

  @override
  _i8.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i4.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [newRouteName, predicate],
          {#arguments: arguments},
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  String restorablePushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i4.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushNamedAndRemoveUntil,
          [newRouteName, predicate],
          {#arguments: arguments},
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushNamedAndRemoveUntil,
            [newRouteName, predicate],
            {#arguments: arguments},
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushNamedAndRemoveUntil,
            [newRouteName, predicate],
            {#arguments: arguments},
          ),
        ),
      ) as String);

  @override
  _i8.Future<T?> push<T extends Object?>(_i4.Route<T>? route) => (super.noSuchMethod(
        Invocation.method(#push, [route]),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  String restorablePush<T extends Object?>(
    _i4.RestorableRouteBuilder<T>? routeBuilder, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePush,
          [routeBuilder],
          {#arguments: arguments},
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePush,
            [routeBuilder],
            {#arguments: arguments},
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePush,
            [routeBuilder],
            {#arguments: arguments},
          ),
        ),
      ) as String);

  @override
  _i8.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
    _i4.Route<T>? newRoute, {
    TO? result,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#pushReplacement, [newRoute], {#result: result}),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  String restorablePushReplacement<T extends Object?, TO extends Object?>(
    _i4.RestorableRouteBuilder<T>? routeBuilder, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushReplacement,
          [routeBuilder],
          {#result: result, #arguments: arguments},
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushReplacement,
            [routeBuilder],
            {#result: result, #arguments: arguments},
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushReplacement,
            [routeBuilder],
            {#result: result, #arguments: arguments},
          ),
        ),
      ) as String);

  @override
  _i8.Future<T?> pushAndRemoveUntil<T extends Object?>(
    _i4.Route<T>? newRoute,
    _i4.RoutePredicate? predicate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#pushAndRemoveUntil, [newRoute, predicate]),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  String restorablePushAndRemoveUntil<T extends Object?>(
    _i4.RestorableRouteBuilder<T>? newRouteBuilder,
    _i4.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushAndRemoveUntil,
          [newRouteBuilder, predicate],
          {#arguments: arguments},
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushAndRemoveUntil,
            [newRouteBuilder, predicate],
            {#arguments: arguments},
          ),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #restorablePushAndRemoveUntil,
            [newRouteBuilder, predicate],
            {#arguments: arguments},
          ),
        ),
      ) as String);

  @override
  void replace<T extends Object?>({
    required _i4.Route<dynamic>? oldRoute,
    required _i4.Route<T>? newRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(#replace, [], {#oldRoute: oldRoute, #newRoute: newRoute}),
        returnValueForMissingStub: null,
      );

  @override
  String restorableReplace<T extends Object?>({
    required _i4.Route<dynamic>? oldRoute,
    required _i4.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#restorableReplace, [], {
          #oldRoute: oldRoute,
          #newRouteBuilder: newRouteBuilder,
          #arguments: arguments,
        }),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(#restorableReplace, [], {
            #oldRoute: oldRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments,
          }),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(#restorableReplace, [], {
            #oldRoute: oldRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments,
          }),
        ),
      ) as String);

  @override
  void replaceRouteBelow<T extends Object?>({
    required _i4.Route<dynamic>? anchorRoute,
    required _i4.Route<T>? newRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(#replaceRouteBelow, [], {
          #anchorRoute: anchorRoute,
          #newRoute: newRoute,
        }),
        returnValueForMissingStub: null,
      );

  @override
  String restorableReplaceRouteBelow<T extends Object?>({
    required _i4.Route<dynamic>? anchorRoute,
    required _i4.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#restorableReplaceRouteBelow, [], {
          #anchorRoute: anchorRoute,
          #newRouteBuilder: newRouteBuilder,
          #arguments: arguments,
        }),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(#restorableReplaceRouteBelow, [], {
            #anchorRoute: anchorRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments,
          }),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(#restorableReplaceRouteBelow, [], {
            #anchorRoute: anchorRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments,
          }),
        ),
      ) as String);

  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(#canPop, []),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<bool> maybePop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(#maybePop, [result]),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(#pop, [result]),
        returnValueForMissingStub: null,
      );

  @override
  void popUntil(_i4.RoutePredicate? predicate) => super.noSuchMethod(
        Invocation.method(#popUntil, [predicate]),
        returnValueForMissingStub: null,
      );

  @override
  void removeRoute(_i4.Route<dynamic>? route) => super.noSuchMethod(
        Invocation.method(#removeRoute, [route]),
        returnValueForMissingStub: null,
      );

  @override
  void removeRouteBelow(_i4.Route<dynamic>? anchorRoute) => super.noSuchMethod(
        Invocation.method(#removeRouteBelow, [anchorRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void finalizeRoute(_i4.Route<dynamic>? route) => super.noSuchMethod(
        Invocation.method(#finalizeRoute, [route]),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture() => super.noSuchMethod(
        Invocation.method(#didStartUserGesture, []),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(#didStopUserGesture, []),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Widget build(_i5.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(#build, [context]),
        returnValue: _FakeWidget_4(
          this,
          Invocation.method(#build, [context]),
        ),
        returnValueForMissingStub: _FakeWidget_4(
          this,
          Invocation.method(#build, [context]),
        ),
      ) as _i5.Widget);

  @override
  void reassemble() => super.noSuchMethod(
        Invocation.method(#reassemble, []),
        returnValueForMissingStub: null,
      );

  @override
  void setState(_i9.VoidCallback? fn) => super.noSuchMethod(
        Invocation.method(#setState, [fn]),
        returnValueForMissingStub: null,
      );

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) => super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(#toStringShort, []),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(#toStringShort, []),
        ),
        returnValueForMissingStub: _i13.dummyValue<String>(
          this,
          Invocation.method(#toStringShort, []),
        ),
      ) as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#toDiagnosticsNode, [], {
          #name: name,
          #style: style,
        }),
        returnValue: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(#toDiagnosticsNode, [], {
            #name: name,
            #style: style,
          }),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(#toDiagnosticsNode, [], {
            #name: name,
            #style: style,
          }),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  _i6.Ticker createTicker(_i6.TickerCallback? onTick) => (super.noSuchMethod(
        Invocation.method(#createTicker, [onTick]),
        returnValue: _FakeTicker_6(
          this,
          Invocation.method(#createTicker, [onTick]),
        ),
        returnValueForMissingStub: _FakeTicker_6(
          this,
          Invocation.method(#createTicker, [onTick]),
        ),
      ) as _i6.Ticker);

  @override
  void registerForRestoration(
    _i14.RestorableProperty<Object?>? property,
    String? restorationId,
  ) =>
      super.noSuchMethod(
        Invocation.method(#registerForRestoration, [property, restorationId]),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterFromRestoration(_i14.RestorableProperty<Object?>? property) => super.noSuchMethod(
        Invocation.method(#unregisterFromRestoration, [property]),
        returnValueForMissingStub: null,
      );

  @override
  void didUpdateRestorationId() => super.noSuchMethod(
        Invocation.method(#didUpdateRestorationId, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Mapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapper<I, O> extends _i1.Mock implements _i15.Mapper<I, O> {
  @override
  O map(I? input) => (super.noSuchMethod(
        Invocation.method(#map, [input]),
        returnValue: _i13.dummyValue<O>(
          this,
          Invocation.method(#map, [input]),
        ),
        returnValueForMissingStub: _i13.dummyValue<O>(
          this,
          Invocation.method(#map, [input]),
        ),
      ) as O);

  @override
  List<O> mapList(Iterable<I>? input) => (super.noSuchMethod(
        Invocation.method(#mapList, [input]),
        returnValue: <O>[],
        returnValueForMissingStub: <O>[],
      ) as List<O>);
}

/// A class which mocks [ContextMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockContextMapper<I, O> extends _i1.Mock implements _i16.ContextMapper<I, O> {
  @override
  O map(_i5.BuildContext? context, I? input) => (super.noSuchMethod(
        Invocation.method(#map, [context, input]),
        returnValue: _i13.dummyValue<O>(
          this,
          Invocation.method(#map, [context, input]),
        ),
        returnValueForMissingStub: _i13.dummyValue<O>(
          this,
          Invocation.method(#map, [context, input]),
        ),
      ) as O);

  @override
  List<O> mapList(_i5.BuildContext? context, List<I>? input) => (super.noSuchMethod(
        Invocation.method(#mapList, [context, input]),
        returnValue: <O>[],
        returnValueForMissingStub: <O>[],
      ) as List<O>);
}

/// A class which mocks [PidRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPidRepository extends _i1.Mock implements _i17.PidRepository {
  @override
  _i8.Future<String> getPidIssuanceUrl() => (super.noSuchMethod(
        Invocation.method(#getPidIssuanceUrl, []),
        returnValue: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#getPidIssuanceUrl, []),
          ),
        ),
        returnValueForMissingStub: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#getPidIssuanceUrl, []),
          ),
        ),
      ) as _i8.Future<String>);

  @override
  _i8.Future<List<_i18.DataAttribute>> continuePidIssuance(String? uri) => (super.noSuchMethod(
        Invocation.method(#continuePidIssuance, [uri]),
        returnValue: _i8.Future<List<_i18.DataAttribute>>.value(
          <_i18.DataAttribute>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i18.DataAttribute>>.value(
          <_i18.DataAttribute>[],
        ),
      ) as _i8.Future<List<_i18.DataAttribute>>);

  @override
  _i8.Future<void> cancelPidIssuance() => (super.noSuchMethod(
        Invocation.method(#cancelPidIssuance, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> hasActivePidIssuanceSession() => (super.noSuchMethod(
        Invocation.method(#hasActivePidIssuanceSession, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i19.WalletInstructionResult> acceptOfferedPid(String? pin) => (super.noSuchMethod(
        Invocation.method(#acceptOfferedPid, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#acceptOfferedPid, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#acceptOfferedPid, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);
}

/// A class which mocks [DisclosureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDisclosureRepository extends _i1.Mock implements _i20.DisclosureRepository {
  @override
  _i8.Future<_i21.StartDisclosureResult> startDisclosure(
    String? disclosureUri, {
    required bool? isQrCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startDisclosure,
          [disclosureUri],
          {#isQrCode: isQrCode},
        ),
        returnValue: _i8.Future<_i21.StartDisclosureResult>.value(
          _i13.dummyValue<_i21.StartDisclosureResult>(
            this,
            Invocation.method(
              #startDisclosure,
              [disclosureUri],
              {#isQrCode: isQrCode},
            ),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i21.StartDisclosureResult>.value(
          _i13.dummyValue<_i21.StartDisclosureResult>(
            this,
            Invocation.method(
              #startDisclosure,
              [disclosureUri],
              {#isQrCode: isQrCode},
            ),
          ),
        ),
      ) as _i8.Future<_i21.StartDisclosureResult>);

  @override
  _i8.Future<String?> cancelDisclosure() => (super.noSuchMethod(
        Invocation.method(#cancelDisclosure, []),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<bool> hasActiveDisclosureSession() => (super.noSuchMethod(
        Invocation.method(#hasActiveDisclosureSession, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i19.AcceptDisclosureResult> acceptDisclosure(String? pin) => (super.noSuchMethod(
        Invocation.method(#acceptDisclosure, [pin]),
        returnValue: _i8.Future<_i19.AcceptDisclosureResult>.value(
          _i13.dummyValue<_i19.AcceptDisclosureResult>(
            this,
            Invocation.method(#acceptDisclosure, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.AcceptDisclosureResult>.value(
          _i13.dummyValue<_i19.AcceptDisclosureResult>(
            this,
            Invocation.method(#acceptDisclosure, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.AcceptDisclosureResult>);
}

/// A class which mocks [WalletRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletRepository extends _i1.Mock implements _i22.WalletRepository {
  @override
  _i8.Stream<bool> get isLockedStream => (super.noSuchMethod(
        Invocation.getter(#isLockedStream),
        returnValue: _i8.Stream<bool>.empty(),
        returnValueForMissingStub: _i8.Stream<bool>.empty(),
      ) as _i8.Stream<bool>);

  @override
  _i8.Future<void> validatePin(String? pin) => (super.noSuchMethod(
        Invocation.method(#validatePin, [pin]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> createWallet(String? pin) => (super.noSuchMethod(
        Invocation.method(#createWallet, [pin]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> isRegistered() => (super.noSuchMethod(
        Invocation.method(#isRegistered, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i19.WalletInstructionResult> unlockWallet(String? pin) => (super.noSuchMethod(
        Invocation.method(#unlockWallet, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#unlockWallet, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#unlockWallet, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<void> unlockWalletWithBiometrics() => (super.noSuchMethod(
        Invocation.method(#unlockWalletWithBiometrics, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i19.WalletInstructionResult> checkPin(String? pin) => (super.noSuchMethod(
        Invocation.method(#checkPin, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#checkPin, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#checkPin, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> changePin(
    String? oldPin,
    String? newPin,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#changePin, [oldPin, newPin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#changePin, [oldPin, newPin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#changePin, [oldPin, newPin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> continueChangePin(String? pin) => (super.noSuchMethod(
        Invocation.method(#continueChangePin, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#continueChangePin, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#continueChangePin, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<void> lockWallet() => (super.noSuchMethod(
        Invocation.method(#lockWallet, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> containsPid() => (super.noSuchMethod(
        Invocation.method(#containsPid, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> resetWallet() => (super.noSuchMethod(
        Invocation.method(#resetWallet, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [WalletCardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletCardRepository extends _i1.Mock implements _i23.WalletCardRepository {
  @override
  _i8.Stream<List<_i7.WalletCard>> observeWalletCards() => (super.noSuchMethod(
        Invocation.method(#observeWalletCards, []),
        returnValue: _i8.Stream<List<_i7.WalletCard>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i7.WalletCard>>.empty(),
      ) as _i8.Stream<List<_i7.WalletCard>>);

  @override
  _i8.Future<bool> exists(String? docType) => (super.noSuchMethod(
        Invocation.method(#exists, [docType]),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<List<_i7.WalletCard>> readAll() => (super.noSuchMethod(
        Invocation.method(#readAll, []),
        returnValue: _i8.Future<List<_i7.WalletCard>>.value(
          <_i7.WalletCard>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i7.WalletCard>>.value(
          <_i7.WalletCard>[],
        ),
      ) as _i8.Future<List<_i7.WalletCard>>);

  @override
  _i8.Future<_i7.WalletCard> read(String? docType) => (super.noSuchMethod(
        Invocation.method(#read, [docType]),
        returnValue: _i8.Future<_i7.WalletCard>.value(
          _FakeWalletCard_7(this, Invocation.method(#read, [docType])),
        ),
        returnValueForMissingStub: _i8.Future<_i7.WalletCard>.value(
          _FakeWalletCard_7(this, Invocation.method(#read, [docType])),
        ),
      ) as _i8.Future<_i7.WalletCard>);
}

/// A class which mocks [WalletEventRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletEventRepository extends _i1.Mock implements _i24.WalletEventRepository {
  @override
  _i8.Future<List<_i25.WalletEvent>> getEvents() => (super.noSuchMethod(
        Invocation.method(#getEvents, []),
        returnValue: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i25.WalletEvent>>);

  @override
  _i8.Future<List<_i25.WalletEvent>> getEventsForCard(String? docType) => (super.noSuchMethod(
        Invocation.method(#getEventsForCard, [docType]),
        returnValue: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i25.WalletEvent>>);

  @override
  _i8.Stream<List<_i25.WalletEvent>> observeRecentEvents() => (super.noSuchMethod(
        Invocation.method(#observeRecentEvents, []),
        returnValue: _i8.Stream<List<_i25.WalletEvent>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i25.WalletEvent>>.empty(),
      ) as _i8.Stream<List<_i25.WalletEvent>>);

  @override
  _i8.Future<_i25.DisclosureEvent?> readMostRecentDisclosureEvent(
    String? docType,
    _i25.EventStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#readMostRecentDisclosureEvent, [
          docType,
          status,
        ]),
        returnValue: _i8.Future<_i25.DisclosureEvent?>.value(),
        returnValueForMissingStub: _i8.Future<_i25.DisclosureEvent?>.value(),
      ) as _i8.Future<_i25.DisclosureEvent?>);

  @override
  _i8.Future<_i25.IssuanceEvent?> readMostRecentIssuanceEvent(
    String? docType,
    _i25.EventStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#readMostRecentIssuanceEvent, [docType, status]),
        returnValue: _i8.Future<_i25.IssuanceEvent?>.value(),
        returnValueForMissingStub: _i8.Future<_i25.IssuanceEvent?>.value(),
      ) as _i8.Future<_i25.IssuanceEvent?>);
}

/// A class which mocks [ConfigurationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigurationRepository extends _i1.Mock implements _i26.ConfigurationRepository {
  @override
  _i8.Stream<_i27.FlutterAppConfiguration> get appConfiguration => (super.noSuchMethod(
        Invocation.getter(#appConfiguration),
        returnValue: _i8.Stream<_i27.FlutterAppConfiguration>.empty(),
        returnValueForMissingStub: _i8.Stream<_i27.FlutterAppConfiguration>.empty(),
      ) as _i8.Stream<_i27.FlutterAppConfiguration>);
}

/// A class which mocks [LanguageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageRepository extends _i1.Mock implements _i28.LanguageRepository {
  @override
  _i8.Stream<_i9.Locale?> get preferredLocale => (super.noSuchMethod(
        Invocation.getter(#preferredLocale),
        returnValue: _i8.Stream<_i9.Locale?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i9.Locale?>.empty(),
      ) as _i8.Stream<_i9.Locale?>);

  @override
  _i8.Future<List<_i9.Locale>> getAvailableLocales() => (super.noSuchMethod(
        Invocation.method(#getAvailableLocales, []),
        returnValue: _i8.Future<List<_i9.Locale>>.value(<_i9.Locale>[]),
        returnValueForMissingStub: _i8.Future<List<_i9.Locale>>.value(
          <_i9.Locale>[],
        ),
      ) as _i8.Future<List<_i9.Locale>>);

  @override
  _i8.Future<void> setPreferredLocale(_i9.Locale? locale) => (super.noSuchMethod(
        Invocation.method(#setPreferredLocale, [locale]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [BiometricRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricRepository extends _i1.Mock implements _i29.BiometricRepository {
  @override
  _i8.Future<bool> isBiometricLoginEnabled() => (super.noSuchMethod(
        Invocation.method(#isBiometricLoginEnabled, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> enableBiometricLogin() => (super.noSuchMethod(
        Invocation.method(#enableBiometricLogin, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> disableBiometricLogin() => (super.noSuchMethod(
        Invocation.method(#disableBiometricLogin, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [VersionStateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVersionStateRepository extends _i1.Mock implements _i30.VersionStateRepository {
  @override
  _i8.Stream<_i31.VersionState> observeVersionState() => (super.noSuchMethod(
        Invocation.method(#observeVersionState, []),
        returnValue: _i8.Stream<_i31.VersionState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i31.VersionState>.empty(),
      ) as _i8.Stream<_i31.VersionState>);
}

/// A class which mocks [TypedWalletCore].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypedWalletCore extends _i1.Mock implements _i32.TypedWalletCore {
  @override
  _i8.Stream<bool> get isLocked => (super.noSuchMethod(
        Invocation.getter(#isLocked),
        returnValue: _i8.Stream<bool>.empty(),
        returnValueForMissingStub: _i8.Stream<bool>.empty(),
      ) as _i8.Stream<bool>);

  @override
  _i8.Future<_i19.PinValidationResult> isValidPin(String? pin) => (super.noSuchMethod(
        Invocation.method(#isValidPin, [pin]),
        returnValue: _i8.Future<_i19.PinValidationResult>.value(
          _i19.PinValidationResult.Ok,
        ),
        returnValueForMissingStub: _i8.Future<_i19.PinValidationResult>.value(
          _i19.PinValidationResult.Ok,
        ),
      ) as _i8.Future<_i19.PinValidationResult>);

  @override
  _i8.Future<void> register(String? pin) => (super.noSuchMethod(
        Invocation.method(#register, [pin]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> isRegistered() => (super.noSuchMethod(
        Invocation.method(#isRegistered, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> lockWallet() => (super.noSuchMethod(
        Invocation.method(#lockWallet, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i19.WalletInstructionResult> unlockWallet(String? pin) => (super.noSuchMethod(
        Invocation.method(#unlockWallet, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#unlockWallet, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#unlockWallet, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> checkPin(String? pin) => (super.noSuchMethod(
        Invocation.method(#checkPin, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#checkPin, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#checkPin, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> changePin(
    String? oldPin,
    dynamic newPin,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#changePin, [oldPin, newPin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#changePin, [oldPin, newPin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#changePin, [oldPin, newPin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> continueChangePin(String? pin) => (super.noSuchMethod(
        Invocation.method(#continueChangePin, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#continueChangePin, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#continueChangePin, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Stream<_i19.FlutterConfiguration> observeConfig() => (super.noSuchMethod(
        Invocation.method(#observeConfig, []),
        returnValue: _i8.Stream<_i19.FlutterConfiguration>.empty(),
        returnValueForMissingStub: _i8.Stream<_i19.FlutterConfiguration>.empty(),
      ) as _i8.Stream<_i19.FlutterConfiguration>);

  @override
  _i8.Stream<_i19.FlutterVersionState> observeVersionState() => (super.noSuchMethod(
        Invocation.method(#observeVersionState, []),
        returnValue: _i8.Stream<_i19.FlutterVersionState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i19.FlutterVersionState>.empty(),
      ) as _i8.Stream<_i19.FlutterVersionState>);

  @override
  _i8.Future<String> createPidIssuanceRedirectUri() => (super.noSuchMethod(
        Invocation.method(#createPidIssuanceRedirectUri, []),
        returnValue: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#createPidIssuanceRedirectUri, []),
          ),
        ),
        returnValueForMissingStub: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#createPidIssuanceRedirectUri, []),
          ),
        ),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i19.IdentifyUriResult> identifyUri(String? uri) => (super.noSuchMethod(
        Invocation.method(#identifyUri, [uri]),
        returnValue: _i8.Future<_i19.IdentifyUriResult>.value(
          _i19.IdentifyUriResult.PidIssuance,
        ),
        returnValueForMissingStub: _i8.Future<_i19.IdentifyUriResult>.value(
          _i19.IdentifyUriResult.PidIssuance,
        ),
      ) as _i8.Future<_i19.IdentifyUriResult>);

  @override
  _i8.Future<void> cancelPidIssuance() => (super.noSuchMethod(
        Invocation.method(#cancelPidIssuance, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i19.Card>> continuePidIssuance(String? uri) => (super.noSuchMethod(
        Invocation.method(#continuePidIssuance, [uri]),
        returnValue: _i8.Future<List<_i19.Card>>.value(<_i19.Card>[]),
        returnValueForMissingStub: _i8.Future<List<_i19.Card>>.value(
          <_i19.Card>[],
        ),
      ) as _i8.Future<List<_i19.Card>>);

  @override
  _i8.Future<_i19.WalletInstructionResult> acceptOfferedPid(String? pin) => (super.noSuchMethod(
        Invocation.method(#acceptOfferedPid, [pin]),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#acceptOfferedPid, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#acceptOfferedPid, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<bool> hasActivePidIssuanceSession() => (super.noSuchMethod(
        Invocation.method(#hasActivePidIssuanceSession, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i19.StartDisclosureResult> startDisclosure(
    String? uri, {
    bool? isQrCode = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#startDisclosure, [uri], {#isQrCode: isQrCode}),
        returnValue: _i8.Future<_i19.StartDisclosureResult>.value(
          _i13.dummyValue<_i19.StartDisclosureResult>(
            this,
            Invocation.method(
              #startDisclosure,
              [uri],
              {#isQrCode: isQrCode},
            ),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.StartDisclosureResult>.value(
          _i13.dummyValue<_i19.StartDisclosureResult>(
            this,
            Invocation.method(
              #startDisclosure,
              [uri],
              {#isQrCode: isQrCode},
            ),
          ),
        ),
      ) as _i8.Future<_i19.StartDisclosureResult>);

  @override
  _i8.Future<String?> cancelDisclosure() => (super.noSuchMethod(
        Invocation.method(#cancelDisclosure, []),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i19.AcceptDisclosureResult> acceptDisclosure(String? pin) => (super.noSuchMethod(
        Invocation.method(#acceptDisclosure, [pin]),
        returnValue: _i8.Future<_i19.AcceptDisclosureResult>.value(
          _i13.dummyValue<_i19.AcceptDisclosureResult>(
            this,
            Invocation.method(#acceptDisclosure, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.AcceptDisclosureResult>.value(
          _i13.dummyValue<_i19.AcceptDisclosureResult>(
            this,
            Invocation.method(#acceptDisclosure, [pin]),
          ),
        ),
      ) as _i8.Future<_i19.AcceptDisclosureResult>);

  @override
  _i8.Future<bool> hasActiveDisclosureSession() => (super.noSuchMethod(
        Invocation.method(#hasActiveDisclosureSession, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Stream<List<_i19.Card>> observeCards() => (super.noSuchMethod(
        Invocation.method(#observeCards, []),
        returnValue: _i8.Stream<List<_i19.Card>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i19.Card>>.empty(),
      ) as _i8.Stream<List<_i19.Card>>);

  @override
  _i8.Future<void> resetWallet() => (super.noSuchMethod(
        Invocation.method(#resetWallet, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i19.WalletEvent>> getHistory() => (super.noSuchMethod(
        Invocation.method(#getHistory, []),
        returnValue: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i19.WalletEvent>>);

  @override
  _i8.Future<List<_i19.WalletEvent>> getHistoryForCard(String? docType) => (super.noSuchMethod(
        Invocation.method(#getHistoryForCard, [docType]),
        returnValue: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i19.WalletEvent>>);

  @override
  _i8.Stream<List<_i19.WalletEvent>> observeRecentHistory() => (super.noSuchMethod(
        Invocation.method(#observeRecentHistory, []),
        returnValue: _i8.Stream<List<_i19.WalletEvent>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i19.WalletEvent>>.empty(),
      ) as _i8.Stream<List<_i19.WalletEvent>>);

  @override
  _i8.Future<bool> isBiometricLoginEnabled() => (super.noSuchMethod(
        Invocation.method(#isBiometricLoginEnabled, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> setBiometricUnlock({required bool? enabled}) => (super.noSuchMethod(
        Invocation.method(#setBiometricUnlock, [], {#enabled: enabled}),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> unlockWithBiometrics() => (super.noSuchMethod(
        Invocation.method(#unlockWithBiometrics, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> getVersionString() => (super.noSuchMethod(
        Invocation.method(#getVersionString, []),
        returnValue: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#getVersionString, []),
          ),
        ),
        returnValueForMissingStub: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#getVersionString, []),
          ),
        ),
      ) as _i8.Future<String>);

  @override
  _i8.Future<T> call<T>(_i8.Future<T> Function()? runnable) => (super.noSuchMethod(
        Invocation.method(#call, [runnable]),
        returnValue: _i13.ifNotNull(
              _i13.dummyValueOrNull<T>(
                this,
                Invocation.method(#call, [runnable]),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(this, Invocation.method(#call, [runnable])),
        returnValueForMissingStub: _i13.ifNotNull(
              _i13.dummyValueOrNull<T>(
                this,
                Invocation.method(#call, [runnable]),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(this, Invocation.method(#call, [runnable])),
      ) as _i8.Future<T>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i33.NavigationService {
  @override
  _i8.Future<void> handleNavigationRequest(
    _i34.NavigationRequest? request, {
    bool? queueIfNotReady = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleNavigationRequest,
          [request],
          {#queueIfNotReady: queueIfNotReady},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> processQueue() => (super.noSuchMethod(
        Invocation.method(#processQueue, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> processUpdateNotification(
    _i35.UpdateNotification? notification,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#processUpdateNotification, [notification]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<bool> observeUpdateNotificationDialogVisible() => (super.noSuchMethod(
        Invocation.method(#observeUpdateNotificationDialogVisible, []),
        returnValue: _i8.Stream<bool>.empty(),
        returnValueForMissingStub: _i8.Stream<bool>.empty(),
      ) as _i8.Stream<bool>);
}

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock implements _i36.LocalAuthentication {
  @override
  _i8.Future<bool> get canCheckBiometrics => (super.noSuchMethod(
        Invocation.getter(#canCheckBiometrics),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> authenticate({
    required String? localizedReason,
    Iterable<_i37.AuthMessages>? authMessages = const [
      _i38.IOSAuthMessages(),
      _i37.AndroidAuthMessages(),
      _i39.WindowsAuthMessages(),
    ],
    _i37.AuthenticationOptions? options = const _i37.AuthenticationOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(#authenticate, [], {
          #localizedReason: localizedReason,
          #authMessages: authMessages,
          #options: options,
        }),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> stopAuthentication() => (super.noSuchMethod(
        Invocation.method(#stopAuthentication, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> isDeviceSupported() => (super.noSuchMethod(
        Invocation.method(#isDeviceSupported, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<List<_i37.BiometricType>> getAvailableBiometrics() => (super.noSuchMethod(
        Invocation.method(#getAvailableBiometrics, []),
        returnValue: _i8.Future<List<_i37.BiometricType>>.value(
          <_i37.BiometricType>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i37.BiometricType>>.value(
          <_i37.BiometricType>[],
        ),
      ) as _i8.Future<List<_i37.BiometricType>>);
}

/// A class which mocks [ActiveLocaleProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveLocaleProvider extends _i1.Mock implements _i40.ActiveLocaleProvider {
  @override
  _i9.Locale get activeLocale => (super.noSuchMethod(
        Invocation.getter(#activeLocale),
        returnValue: _FakeLocale_9(this, Invocation.getter(#activeLocale)),
        returnValueForMissingStub: _FakeLocale_9(
          this,
          Invocation.getter(#activeLocale),
        ),
      ) as _i9.Locale);

  @override
  _i8.Stream<_i9.Locale> observe() => (super.noSuchMethod(
        Invocation.method(#observe, []),
        returnValue: _i8.Stream<_i9.Locale>.empty(),
        returnValueForMissingStub: _i8.Stream<_i9.Locale>.empty(),
      ) as _i8.Stream<_i9.Locale>);
}

/// A class which mocks [BiometricUnlockManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricUnlockManager extends _i1.Mock implements _i41.BiometricUnlockManager {
  @override
  bool get shouldTriggerUnlock => (super.noSuchMethod(
        Invocation.getter(#shouldTriggerUnlock),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool getAndSetShouldTriggerUnlock({required bool? updatedValue}) => (super.noSuchMethod(
        Invocation.method(#getAndSetShouldTriggerUnlock, [], {
          #updatedValue: updatedValue,
        }),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [DecodeUriUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecodeUriUseCase extends _i1.Mock implements _i42.DecodeUriUseCase {
  @override
  _i8.Future<_i34.NavigationRequest> invoke(Uri? uri) => (super.noSuchMethod(
        Invocation.method(#invoke, [uri]),
        returnValue: _i8.Future<_i34.NavigationRequest>.value(
          _i13.dummyValue<_i34.NavigationRequest>(
            this,
            Invocation.method(#invoke, [uri]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i34.NavigationRequest>.value(
          _i13.dummyValue<_i34.NavigationRequest>(
            this,
            Invocation.method(#invoke, [uri]),
          ),
        ),
      ) as _i8.Future<_i34.NavigationRequest>);
}

/// A class which mocks [IsWalletInitializedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsWalletInitializedUseCase extends _i1.Mock implements _i43.IsWalletInitializedUseCase {
  @override
  _i8.Future<bool> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [IsWalletInitializedWithPidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsWalletInitializedWithPidUseCase extends _i1.Mock implements _i44.IsWalletInitializedWithPidUseCase {
  @override
  _i8.Future<bool> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [ObserveWalletLockedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletLockedUseCase extends _i1.Mock implements _i45.ObserveWalletLockedUseCase {
  @override
  _i8.Stream<bool> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Stream<bool>.empty(),
        returnValueForMissingStub: _i8.Stream<bool>.empty(),
      ) as _i8.Stream<bool>);
}

/// A class which mocks [CheckPinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckPinUseCase extends _i1.Mock implements _i46.CheckPinUseCase {
  @override
  _i8.Future<_i47.CheckPinResult> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
      ) as _i8.Future<_i47.CheckPinResult>);
}

/// A class which mocks [SetupMockedWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetupMockedWalletUseCase extends _i1.Mock implements _i48.SetupMockedWalletUseCase {
  @override
  _i8.Future<void> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [CheckHasInternetUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckHasInternetUseCase extends _i1.Mock implements _i49.CheckHasInternetUseCase {
  @override
  _i8.Future<bool> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [PerformPreNavigationActionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformPreNavigationActionsUseCase extends _i1.Mock implements _i34.PerformPreNavigationActionsUseCase {
  @override
  _i8.Future<void> invoke(List<_i34.PreNavigationAction>? actions) => (super.noSuchMethod(
        Invocation.method(#invoke, [actions]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [CheckNavigationPrerequisitesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckNavigationPrerequisitesUseCase extends _i1.Mock implements _i50.CheckNavigationPrerequisitesUseCase {
  @override
  _i8.Future<bool> invoke(List<_i34.NavigationPrerequisite>? prerequisites) => (super.noSuchMethod(
        Invocation.method(#invoke, [prerequisites]),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [AcceptOfferedPidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptOfferedPidUseCase extends _i1.Mock implements _i51.AcceptOfferedPidUseCase {
  @override
  _i8.Future<_i47.CheckPinResult> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
      ) as _i8.Future<_i47.CheckPinResult>);
}

/// A class which mocks [AcceptSignAgreementUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptSignAgreementUseCase extends _i1.Mock implements _i52.AcceptSignAgreementUseCase {
  @override
  _i8.Future<_i47.CheckPinResult> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
      ) as _i8.Future<_i47.CheckPinResult>);
}

/// A class which mocks [AcceptDisclosureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptDisclosureUseCase extends _i1.Mock implements _i53.AcceptDisclosureUseCase {
  @override
  _i8.Future<_i47.CheckPinResult> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
      ) as _i8.Future<_i47.CheckPinResult>);
}

/// A class which mocks [AcceptIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptIssuanceUseCase extends _i1.Mock implements _i54.AcceptIssuanceUseCase {
  @override
  _i8.Future<void> invoke(Iterable<String>? cardDocTypes) => (super.noSuchMethod(
        Invocation.method(#invoke, [cardDocTypes]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [StartDisclosureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartDisclosureUseCase extends _i1.Mock implements _i55.StartDisclosureUseCase {
  @override
  _i8.Future<_i21.StartDisclosureResult> invoke(
    String? disclosureUri, {
    bool? isQrCode = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#invoke, [disclosureUri], {#isQrCode: isQrCode}),
        returnValue: _i8.Future<_i21.StartDisclosureResult>.value(
          _i13.dummyValue<_i21.StartDisclosureResult>(
            this,
            Invocation.method(
              #invoke,
              [disclosureUri],
              {#isQrCode: isQrCode},
            ),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i21.StartDisclosureResult>.value(
          _i13.dummyValue<_i21.StartDisclosureResult>(
            this,
            Invocation.method(
              #invoke,
              [disclosureUri],
              {#isQrCode: isQrCode},
            ),
          ),
        ),
      ) as _i8.Future<_i21.StartDisclosureResult>);
}

/// A class which mocks [CancelDisclosureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelDisclosureUseCase extends _i1.Mock implements _i56.CancelDisclosureUseCase {
  @override
  _i8.Future<String?> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);
}

/// A class which mocks [ObserveWalletCardsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletCardsUseCase extends _i1.Mock implements _i57.ObserveWalletCardsUseCase {
  @override
  _i8.Stream<List<_i7.WalletCard>> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Stream<List<_i7.WalletCard>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i7.WalletCard>>.empty(),
      ) as _i8.Stream<List<_i7.WalletCard>>);
}

/// A class which mocks [ObserveRecentHistoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveRecentHistoryUseCase extends _i1.Mock implements _i58.ObserveRecentHistoryUseCase {
  @override
  _i8.Stream<List<_i25.WalletEvent>> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Stream<List<_i25.WalletEvent>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i25.WalletEvent>>.empty(),
      ) as _i8.Stream<List<_i25.WalletEvent>>);
}

/// A class which mocks [CheckIsValidPinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckIsValidPinUseCase extends _i1.Mock implements _i59.CheckIsValidPinUseCase {
  @override
  _i8.Future<void> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [CreateWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateWalletUseCase extends _i1.Mock implements _i60.CreateWalletUseCase {
  @override
  _i8.Future<void> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [UnlockWalletWithPinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnlockWalletWithPinUseCase extends _i1.Mock implements _i61.UnlockWalletWithPinUseCase {
  @override
  _i8.Future<_i47.CheckPinResult> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
      ) as _i8.Future<_i47.CheckPinResult>);
}

/// A class which mocks [ResetWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetWalletUseCase extends _i1.Mock implements _i62.ResetWalletUseCase {
  @override
  _i8.Future<void> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ObserveWalletCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletCardUseCase extends _i1.Mock implements _i63.ObserveWalletCardUseCase {
  @override
  _i8.Stream<_i7.WalletCard> invoke(String? cardId) => (super.noSuchMethod(
        Invocation.method(#invoke, [cardId]),
        returnValue: _i8.Stream<_i7.WalletCard>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.WalletCard>.empty(),
      ) as _i8.Stream<_i7.WalletCard>);
}

/// A class which mocks [GetWalletCardsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletCardsUseCase extends _i1.Mock implements _i64.GetWalletCardsUseCase {
  @override
  _i8.Future<List<_i7.WalletCard>> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<List<_i7.WalletCard>>.value(
          <_i7.WalletCard>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i7.WalletCard>>.value(
          <_i7.WalletCard>[],
        ),
      ) as _i8.Future<List<_i7.WalletCard>>);
}

/// A class which mocks [GetPidIssuanceUrlUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPidIssuanceUrlUseCase extends _i1.Mock implements _i65.GetPidIssuanceUrlUseCase {
  @override
  _i8.Future<String> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<String>.value(
          _i13.dummyValue<String>(this, Invocation.method(#invoke, [])),
        ),
        returnValueForMissingStub: _i8.Future<String>.value(
          _i13.dummyValue<String>(this, Invocation.method(#invoke, [])),
        ),
      ) as _i8.Future<String>);
}

/// A class which mocks [CancelPidIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelPidIssuanceUseCase extends _i1.Mock implements _i66.CancelPidIssuanceUseCase {
  @override
  _i8.Future<void> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ContinuePidIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockContinuePidIssuanceUseCase extends _i1.Mock implements _i67.ContinuePidIssuanceUseCase {
  @override
  _i8.Future<_i17.PidIssuanceStatus> invoke(String? uri) => (super.noSuchMethod(
        Invocation.method(#invoke, [uri]),
        returnValue: _i8.Future<_i17.PidIssuanceStatus>.value(
          _i13.dummyValue<_i17.PidIssuanceStatus>(
            this,
            Invocation.method(#invoke, [uri]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i17.PidIssuanceStatus>.value(
          _i13.dummyValue<_i17.PidIssuanceStatus>(
            this,
            Invocation.method(#invoke, [uri]),
          ),
        ),
      ) as _i8.Future<_i17.PidIssuanceStatus>);
}

/// A class which mocks [ObserveWalletCardDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletCardDetailUseCase extends _i1.Mock implements _i68.ObserveWalletCardDetailUseCase {
  @override
  _i8.Stream<_i69.WalletCardDetail> invoke(String? cardId) => (super.noSuchMethod(
        Invocation.method(#invoke, [cardId]),
        returnValue: _i8.Stream<_i69.WalletCardDetail>.empty(),
        returnValueForMissingStub: _i8.Stream<_i69.WalletCardDetail>.empty(),
      ) as _i8.Stream<_i69.WalletCardDetail>);
}

/// A class which mocks [GetWalletCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletCardUseCase extends _i1.Mock implements _i70.GetWalletCardUseCase {
  @override
  _i8.Future<_i7.WalletCard> invoke(String? docType) => (super.noSuchMethod(
        Invocation.method(#invoke, [docType]),
        returnValue: _i8.Future<_i7.WalletCard>.value(
          _FakeWalletCard_7(this, Invocation.method(#invoke, [docType])),
        ),
        returnValueForMissingStub: _i8.Future<_i7.WalletCard>.value(
          _FakeWalletCard_7(this, Invocation.method(#invoke, [docType])),
        ),
      ) as _i8.Future<_i7.WalletCard>);
}

/// A class which mocks [GetWalletEventsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletEventsUseCase extends _i1.Mock implements _i71.GetWalletEventsUseCase {
  @override
  _i8.Future<List<_i25.WalletEvent>> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i25.WalletEvent>>);
}

/// A class which mocks [GetWalletEventsForCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletEventsForCardUseCase extends _i1.Mock implements _i72.GetWalletEventsForCardUseCase {
  @override
  _i8.Future<List<_i25.WalletEvent>> invoke(String? docType) => (super.noSuchMethod(
        Invocation.method(#invoke, [docType]),
        returnValue: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i25.WalletEvent>>.value(
          <_i25.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i25.WalletEvent>>);
}

/// A class which mocks [StartSignUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartSignUseCase extends _i1.Mock implements _i73.StartSignUseCase {
  @override
  _i8.Future<_i74.StartSignResult> invoke(String? signUri) => (super.noSuchMethod(
        Invocation.method(#invoke, [signUri]),
        returnValue: _i8.Future<_i74.StartSignResult>.value(
          _i13.dummyValue<_i74.StartSignResult>(
            this,
            Invocation.method(#invoke, [signUri]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i74.StartSignResult>.value(
          _i13.dummyValue<_i74.StartSignResult>(
            this,
            Invocation.method(#invoke, [signUri]),
          ),
        ),
      ) as _i8.Future<_i74.StartSignResult>);
}

/// A class which mocks [RejectSignAgreementUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRejectSignAgreementUseCase extends _i1.Mock implements _i75.RejectSignAgreementUseCase {
  @override
  _i8.Future<void> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [StartIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartIssuanceUseCase extends _i1.Mock implements _i76.StartIssuanceUseCase {
  @override
  _i8.Future<_i77.StartIssuanceResult> invoke(String? issuanceUri) => (super.noSuchMethod(
        Invocation.method(#invoke, [issuanceUri]),
        returnValue: _i8.Future<_i77.StartIssuanceResult>.value(
          _i13.dummyValue<_i77.StartIssuanceResult>(
            this,
            Invocation.method(#invoke, [issuanceUri]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i77.StartIssuanceResult>.value(
          _i13.dummyValue<_i77.StartIssuanceResult>(
            this,
            Invocation.method(#invoke, [issuanceUri]),
          ),
        ),
      ) as _i8.Future<_i77.StartIssuanceResult>);
}

/// A class which mocks [ContinueIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockContinueIssuanceUseCase extends _i1.Mock implements _i78.ContinueIssuanceUseCase {
  @override
  _i8.Future<_i10.ContinueIssuanceResult> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<_i10.ContinueIssuanceResult>.value(
          _FakeContinueIssuanceResult_10(
            this,
            Invocation.method(#invoke, []),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i10.ContinueIssuanceResult>.value(
          _FakeContinueIssuanceResult_10(
            this,
            Invocation.method(#invoke, []),
          ),
        ),
      ) as _i8.Future<_i10.ContinueIssuanceResult>);
}

/// A class which mocks [CancelIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelIssuanceUseCase extends _i1.Mock implements _i79.CancelIssuanceUseCase {
  @override
  _i8.Future<void> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [LockWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLockWalletUseCase extends _i1.Mock implements _i80.LockWalletUseCase {
  @override
  void invoke() => super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DiscloseForIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscloseForIssuanceUseCase extends _i1.Mock implements _i81.DiscloseForIssuanceUseCase {
  @override
  _i8.Future<_i47.CheckPinResult> invoke(String? pin) => (super.noSuchMethod(
        Invocation.method(#invoke, [pin]),
        returnValue: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i47.CheckPinResult>.value(
          _i13.dummyValue<_i47.CheckPinResult>(
            this,
            Invocation.method(#invoke, [pin]),
          ),
        ),
      ) as _i8.Future<_i47.CheckPinResult>);
}

/// A class which mocks [DecodeQrUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecodeQrUseCase extends _i1.Mock implements _i82.DecodeQrUseCase {
  @override
  _i8.Future<_i34.NavigationRequest?> invoke(_i83.Barcode? barcode) => (super.noSuchMethod(
        Invocation.method(#invoke, [barcode]),
        returnValue: _i8.Future<_i34.NavigationRequest?>.value(),
        returnValueForMissingStub: _i8.Future<_i34.NavigationRequest?>.value(),
      ) as _i8.Future<_i34.NavigationRequest?>);
}

/// A class which mocks [CheckHasPermissionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckHasPermissionUseCase extends _i1.Mock implements _i11.CheckHasPermissionUseCase {
  @override
  _i8.Future<_i11.PermissionCheckResult> invoke(_i84.Permission? permission) => (super.noSuchMethod(
        Invocation.method(#invoke, [permission]),
        returnValue: _i8.Future<_i11.PermissionCheckResult>.value(
          _FakePermissionCheckResult_11(
            this,
            Invocation.method(#invoke, [permission]),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i11.PermissionCheckResult>.value(
          _FakePermissionCheckResult_11(
            this,
            Invocation.method(#invoke, [permission]),
          ),
        ),
      ) as _i8.Future<_i11.PermissionCheckResult>);
}

/// A class which mocks [ChangePinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePinUseCase extends _i1.Mock implements _i85.ChangePinUseCase {
  @override
  _i8.Future<void> invoke(String? oldPin, String? newPin) => (super.noSuchMethod(
        Invocation.method(#invoke, [oldPin, newPin]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GetAvailableBiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAvailableBiometricsUseCase extends _i1.Mock implements _i86.GetAvailableBiometricsUseCase {
  @override
  _i8.Future<_i87.Biometrics> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<_i87.Biometrics>.value(
          _i87.Biometrics.face,
        ),
        returnValueForMissingStub: _i8.Future<_i87.Biometrics>.value(
          _i87.Biometrics.face,
        ),
      ) as _i8.Future<_i87.Biometrics>);
}

/// A class which mocks [SetBiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetBiometricsUseCase extends _i1.Mock implements _i88.SetBiometricsUseCase {
  @override
  _i8.Future<void> invoke({
    required bool? enable,
    required bool? authenticateBeforeEnabling,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#invoke, [], {
          #enable: enable,
          #authenticateBeforeEnabling: authenticateBeforeEnabling,
        }),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GetSupportedBiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSupportedBiometricsUseCase extends _i1.Mock implements _i89.GetSupportedBiometricsUseCase {
  @override
  _i8.Future<_i87.Biometrics> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<_i87.Biometrics>.value(
          _i87.Biometrics.face,
        ),
        returnValueForMissingStub: _i8.Future<_i87.Biometrics>.value(
          _i87.Biometrics.face,
        ),
      ) as _i8.Future<_i87.Biometrics>);
}

/// A class which mocks [IsBiometricLoginEnabledUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsBiometricLoginEnabledUseCase extends _i1.Mock implements _i90.IsBiometricLoginEnabledUseCase {
  @override
  _i8.Future<bool> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [ObserveVersionStateUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveVersionStateUsecase extends _i1.Mock implements _i91.ObserveVersionStateUsecase {
  @override
  _i8.Stream<_i31.VersionState> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Stream<_i31.VersionState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i31.VersionState>.empty(),
      ) as _i8.Stream<_i31.VersionState>);
}

/// A class which mocks [GetVersionStringUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVersionStringUseCase extends _i1.Mock implements _i92.GetVersionStringUseCase {
  @override
  _i8.Future<String> invoke() => (super.noSuchMethod(
        Invocation.method(#invoke, []),
        returnValue: _i8.Future<String>.value(
          _i13.dummyValue<String>(this, Invocation.method(#invoke, [])),
        ),
        returnValueForMissingStub: _i8.Future<String>.value(
          _i13.dummyValue<String>(this, Invocation.method(#invoke, [])),
        ),
      ) as _i8.Future<String>);
}

/// A class which mocks [WalletCoreApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletCoreApi extends _i1.Mock implements _i19.WalletCoreApi {
  @override
  _i8.Future<_i19.AcceptDisclosureResult> crateApiFullAcceptDisclosure({
    required String? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullAcceptDisclosure, [], {#pin: pin}),
        returnValue: _i8.Future<_i19.AcceptDisclosureResult>.value(
          _i13.dummyValue<_i19.AcceptDisclosureResult>(
            this,
            Invocation.method(#crateApiFullAcceptDisclosure, [], {
              #pin: pin,
            }),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.AcceptDisclosureResult>.value(
          _i13.dummyValue<_i19.AcceptDisclosureResult>(
            this,
            Invocation.method(#crateApiFullAcceptDisclosure, [], {
              #pin: pin,
            }),
          ),
        ),
      ) as _i8.Future<_i19.AcceptDisclosureResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> crateApiFullAcceptPidIssuance({
    required String? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullAcceptPidIssuance, [], {#pin: pin}),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullAcceptPidIssuance, [], {
              #pin: pin,
            }),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullAcceptPidIssuance, [], {
              #pin: pin,
            }),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<String?> crateApiFullCancelDisclosure() => (super.noSuchMethod(
        Invocation.method(#crateApiFullCancelDisclosure, []),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> crateApiFullCancelPidIssuance() => (super.noSuchMethod(
        Invocation.method(#crateApiFullCancelPidIssuance, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i19.WalletInstructionResult> crateApiFullChangePin({
    required String? oldPin,
    required String? newPin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullChangePin, [], {
          #oldPin: oldPin,
          #newPin: newPin,
        }),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullChangePin, [], {
              #oldPin: oldPin,
              #newPin: newPin,
            }),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullChangePin, [], {
              #oldPin: oldPin,
              #newPin: newPin,
            }),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> crateApiFullCheckPin({
    required String? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullCheckPin, [], {#pin: pin}),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullCheckPin, [], {#pin: pin}),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullCheckPin, [], {#pin: pin}),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<void> crateApiFullClearCardsStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullClearCardsStream, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> crateApiFullClearConfigurationStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullClearConfigurationStream, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> crateApiFullClearLockStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullClearLockStream, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> crateApiFullClearRecentHistoryStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullClearRecentHistoryStream, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> crateApiFullClearVersionStateStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullClearVersionStateStream, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i19.WalletInstructionResult> crateApiFullContinueChangePin({
    required String? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullContinueChangePin, [], {#pin: pin}),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullContinueChangePin, [], {
              #pin: pin,
            }),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullContinueChangePin, [], {
              #pin: pin,
            }),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<List<_i19.Card>> crateApiFullContinuePidIssuance({
    required String? uri,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullContinuePidIssuance, [], {
          #uri: uri,
        }),
        returnValue: _i8.Future<List<_i19.Card>>.value(<_i19.Card>[]),
        returnValueForMissingStub: _i8.Future<List<_i19.Card>>.value(
          <_i19.Card>[],
        ),
      ) as _i8.Future<List<_i19.Card>>);

  @override
  _i8.Future<String> crateApiFullCreatePidIssuanceRedirectUri() => (super.noSuchMethod(
        Invocation.method(#crateApiFullCreatePidIssuanceRedirectUri, []),
        returnValue: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(
              #crateApiFullCreatePidIssuanceRedirectUri,
              [],
            ),
          ),
        ),
        returnValueForMissingStub: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(
              #crateApiFullCreatePidIssuanceRedirectUri,
              [],
            ),
          ),
        ),
      ) as _i8.Future<String>);

  @override
  _i8.Future<List<_i19.WalletEvent>> crateApiFullGetHistory() => (super.noSuchMethod(
        Invocation.method(#crateApiFullGetHistory, []),
        returnValue: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i19.WalletEvent>>);

  @override
  _i8.Future<List<_i19.WalletEvent>> crateApiFullGetHistoryForCard({
    required String? docType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullGetHistoryForCard, [], {
          #docType: docType,
        }),
        returnValue: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
        returnValueForMissingStub: _i8.Future<List<_i19.WalletEvent>>.value(
          <_i19.WalletEvent>[],
        ),
      ) as _i8.Future<List<_i19.WalletEvent>>);

  @override
  _i8.Future<String> crateApiFullGetVersionString() => (super.noSuchMethod(
        Invocation.method(#crateApiFullGetVersionString, []),
        returnValue: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#crateApiFullGetVersionString, []),
          ),
        ),
        returnValueForMissingStub: _i8.Future<String>.value(
          _i13.dummyValue<String>(
            this,
            Invocation.method(#crateApiFullGetVersionString, []),
          ),
        ),
      ) as _i8.Future<String>);

  @override
  _i8.Future<bool> crateApiFullHasActiveDisclosureSession() => (super.noSuchMethod(
        Invocation.method(#crateApiFullHasActiveDisclosureSession, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> crateApiFullHasActivePidIssuanceSession() => (super.noSuchMethod(
        Invocation.method(#crateApiFullHasActivePidIssuanceSession, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> crateApiFullHasRegistration() => (super.noSuchMethod(
        Invocation.method(#crateApiFullHasRegistration, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i19.IdentifyUriResult> crateApiFullIdentifyUri({
    required String? uri,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullIdentifyUri, [], {#uri: uri}),
        returnValue: _i8.Future<_i19.IdentifyUriResult>.value(
          _i19.IdentifyUriResult.PidIssuance,
        ),
        returnValueForMissingStub: _i8.Future<_i19.IdentifyUriResult>.value(
          _i19.IdentifyUriResult.PidIssuance,
        ),
      ) as _i8.Future<_i19.IdentifyUriResult>);

  @override
  _i8.Future<void> crateApiFullInit() => (super.noSuchMethod(
        Invocation.method(#crateApiFullInit, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> crateApiFullIsBiometricUnlockEnabled() => (super.noSuchMethod(
        Invocation.method(#crateApiFullIsBiometricUnlockEnabled, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> crateApiFullIsInitialized() => (super.noSuchMethod(
        Invocation.method(#crateApiFullIsInitialized, []),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i19.PinValidationResult> crateApiFullIsValidPin({
    required String? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullIsValidPin, [], {#pin: pin}),
        returnValue: _i8.Future<_i19.PinValidationResult>.value(
          _i19.PinValidationResult.Ok,
        ),
        returnValueForMissingStub: _i8.Future<_i19.PinValidationResult>.value(
          _i19.PinValidationResult.Ok,
        ),
      ) as _i8.Future<_i19.PinValidationResult>);

  @override
  _i8.Future<void> crateApiFullLockWallet() => (super.noSuchMethod(
        Invocation.method(#crateApiFullLockWallet, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> crateApiFullRegister({required String? pin}) => (super.noSuchMethod(
        Invocation.method(#crateApiFullRegister, [], {#pin: pin}),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> crateApiFullResetWallet() => (super.noSuchMethod(
        Invocation.method(#crateApiFullResetWallet, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> crateApiFullSetBiometricUnlock({required bool? enable}) => (super.noSuchMethod(
        Invocation.method(#crateApiFullSetBiometricUnlock, [], {
          #enable: enable,
        }),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i19.Card>> crateApiFullSetCardsStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullSetCardsStream, []),
        returnValue: _i8.Stream<List<_i19.Card>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i19.Card>>.empty(),
      ) as _i8.Stream<List<_i19.Card>>);

  @override
  _i8.Stream<_i19.FlutterConfiguration> crateApiFullSetConfigurationStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullSetConfigurationStream, []),
        returnValue: _i8.Stream<_i19.FlutterConfiguration>.empty(),
        returnValueForMissingStub: _i8.Stream<_i19.FlutterConfiguration>.empty(),
      ) as _i8.Stream<_i19.FlutterConfiguration>);

  @override
  _i8.Stream<bool> crateApiFullSetLockStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullSetLockStream, []),
        returnValue: _i8.Stream<bool>.empty(),
        returnValueForMissingStub: _i8.Stream<bool>.empty(),
      ) as _i8.Stream<bool>);

  @override
  _i8.Stream<List<_i19.WalletEvent>> crateApiFullSetRecentHistoryStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullSetRecentHistoryStream, []),
        returnValue: _i8.Stream<List<_i19.WalletEvent>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i19.WalletEvent>>.empty(),
      ) as _i8.Stream<List<_i19.WalletEvent>>);

  @override
  _i8.Stream<_i19.FlutterVersionState> crateApiFullSetVersionStateStream() => (super.noSuchMethod(
        Invocation.method(#crateApiFullSetVersionStateStream, []),
        returnValue: _i8.Stream<_i19.FlutterVersionState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i19.FlutterVersionState>.empty(),
      ) as _i8.Stream<_i19.FlutterVersionState>);

  @override
  _i8.Future<_i19.StartDisclosureResult> crateApiFullStartDisclosure({
    required String? uri,
    required bool? isQrCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullStartDisclosure, [], {
          #uri: uri,
          #isQrCode: isQrCode,
        }),
        returnValue: _i8.Future<_i19.StartDisclosureResult>.value(
          _i13.dummyValue<_i19.StartDisclosureResult>(
            this,
            Invocation.method(#crateApiFullStartDisclosure, [], {
              #uri: uri,
              #isQrCode: isQrCode,
            }),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.StartDisclosureResult>.value(
          _i13.dummyValue<_i19.StartDisclosureResult>(
            this,
            Invocation.method(#crateApiFullStartDisclosure, [], {
              #uri: uri,
              #isQrCode: isQrCode,
            }),
          ),
        ),
      ) as _i8.Future<_i19.StartDisclosureResult>);

  @override
  _i8.Future<_i19.WalletInstructionResult> crateApiFullUnlockWallet({
    required String? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#crateApiFullUnlockWallet, [], {#pin: pin}),
        returnValue: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullUnlockWallet, [], {#pin: pin}),
          ),
        ),
        returnValueForMissingStub: _i8.Future<_i19.WalletInstructionResult>.value(
          _i13.dummyValue<_i19.WalletInstructionResult>(
            this,
            Invocation.method(#crateApiFullUnlockWallet, [], {
              #pin: pin,
            }),
          ),
        ),
      ) as _i8.Future<_i19.WalletInstructionResult>);

  @override
  _i8.Future<void> crateApiFullUnlockWalletWithBiometrics() => (super.noSuchMethod(
        Invocation.method(#crateApiFullUnlockWalletWithBiometrics, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
