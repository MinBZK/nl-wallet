// Mocks generated by Mockito 5.4.6 from annotations
// in wallet/test/src/mocks/wallet_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/scheduler.dart' as _i6;
import 'package:flutter/services.dart' as _i13;
import 'package:flutter/src/widgets/focus_manager.dart' as _i2;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/widgets/notification_listener.dart' as _i16;
import 'package:flutter/src/widgets/restoration.dart' as _i15;
import 'package:internet_connection_checker/internet_connection_checker.dart' as _i8;
import 'package:local_auth/src/local_auth.dart' as _i46;
import 'package:local_auth_android/local_auth_android.dart' as _i47;
import 'package:local_auth_darwin/local_auth_darwin.dart' as _i48;
import 'package:local_auth_windows/local_auth_windows.dart' as _i49;
import 'package:mobile_scanner/mobile_scanner.dart' as _i97;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:permission_handler/permission_handler.dart' as _i98;
import 'package:video_player/src/closed_caption_file.dart' as _i18;
import 'package:video_player/video_player.dart' as _i7;
import 'package:video_player_platform_interface/video_player_platform_interface.dart' as _i17;
import 'package:wallet/src/data/repository/biometric/biometric_repository.dart' as _i35;
import 'package:wallet/src/data/repository/card/wallet_card_repository.dart' as _i29;
import 'package:wallet/src/data/repository/configuration/configuration_repository.dart' as _i32;
import 'package:wallet/src/data/repository/disclosure/disclosure_repository.dart' as _i23;
import 'package:wallet/src/data/repository/event/wallet_event_repository.dart' as _i30;
import 'package:wallet/src/data/repository/issuance/issuance_repository.dart' as _i39;
import 'package:wallet/src/data/repository/language/language_repository.dart' as _i34;
import 'package:wallet/src/data/repository/network/network_repository.dart' as _i63;
import 'package:wallet/src/data/repository/pid/pid_repository.dart' as _i21;
import 'package:wallet/src/data/repository/pin/pin_repository.dart' as _i28;
import 'package:wallet/src/data/repository/tour/tour_repository.dart' as _i38;
import 'package:wallet/src/data/repository/transfer/transfer_repository.dart' as _i40;
import 'package:wallet/src/data/repository/version/version_state_repository.dart' as _i36;
import 'package:wallet/src/data/repository/wallet/wallet_repository.dart' as _i25;
import 'package:wallet/src/data/service/auto_lock_service.dart' as _i55;
import 'package:wallet/src/data/service/event/app_event_coordinator.dart' as _i53;
import 'package:wallet/src/data/service/navigation_service.dart' as _i43;
import 'package:wallet/src/data/service/semantics_event_service.dart' as _i52;
import 'package:wallet/src/data/store/active_locale_provider.dart' as _i50;
import 'package:wallet/src/domain/app_event/app_event_listener.dart' as _i54;
import 'package:wallet/src/domain/model/attribute/attribute.dart' as _i22;
import 'package:wallet/src/domain/model/card/wallet_card.dart' as _i9;
import 'package:wallet/src/domain/model/configuration/flutter_app_configuration.dart' as _i33;
import 'package:wallet/src/domain/model/disclosure/start_disclosure_result.dart' as _i24;
import 'package:wallet/src/domain/model/event/wallet_event.dart' as _i31;
import 'package:wallet/src/domain/model/result/result.dart' as _i57;
import 'package:wallet/src/domain/model/start_sign_result/start_sign_result.dart' as _i90;
import 'package:wallet/src/domain/model/tour/tour_video.dart' as _i111;
import 'package:wallet/src/domain/model/transfer/wallet_transfer_status.dart' as _i41;
import 'package:wallet/src/domain/model/update/update_notification.dart' as _i45;
import 'package:wallet/src/domain/model/update/version_state.dart' as _i37;
import 'package:wallet/src/domain/model/wallet_card_detail.dart' as _i85;
import 'package:wallet/src/domain/model/wallet_state.dart' as _i27;
import 'package:wallet/src/domain/usecase/app/check_is_app_initialized_usecase.dart' as _i58;
import 'package:wallet/src/domain/usecase/biometrics/biometric_authentication_result.dart' as _i108;
import 'package:wallet/src/domain/usecase/biometrics/biometrics.dart' as _i101;
import 'package:wallet/src/domain/usecase/biometrics/get_available_biometrics_usecase.dart' as _i100;
import 'package:wallet/src/domain/usecase/biometrics/get_supported_biometrics_usecase.dart' as _i103;
import 'package:wallet/src/domain/usecase/biometrics/is_biometric_login_enabled_usecase.dart' as _i104;
import 'package:wallet/src/domain/usecase/biometrics/request_biometrics_usecase.dart' as _i107;
import 'package:wallet/src/domain/usecase/biometrics/set_biometrics_usecase.dart' as _i102;
import 'package:wallet/src/domain/usecase/card/get_pid_cards_usecase.dart' as _i113;
import 'package:wallet/src/domain/usecase/card/get_wallet_card_usecase.dart' as _i86;
import 'package:wallet/src/domain/usecase/card/get_wallet_cards_usecase.dart' as _i80;
import 'package:wallet/src/domain/usecase/card/observe_wallet_card_detail_usecase.dart' as _i84;
import 'package:wallet/src/domain/usecase/card/observe_wallet_card_usecase.dart' as _i79;
import 'package:wallet/src/domain/usecase/card/observe_wallet_cards_usecase.dart' as _i71;
import 'package:wallet/src/domain/usecase/disclosure/accept_disclosure_usecase.dart' as _i67;
import 'package:wallet/src/domain/usecase/disclosure/cancel_disclosure_usecase.dart' as _i70;
import 'package:wallet/src/domain/usecase/disclosure/start_disclosure_usecase.dart' as _i69;
import 'package:wallet/src/domain/usecase/event/get_most_recent_wallet_event_usecase.dart' as _i74;
import 'package:wallet/src/domain/usecase/event/get_wallet_events_for_card_usecase.dart' as _i88;
import 'package:wallet/src/domain/usecase/event/get_wallet_events_usecase.dart' as _i87;
import 'package:wallet/src/domain/usecase/event/observe_recent_wallet_events_usecase.dart' as _i72;
import 'package:wallet/src/domain/usecase/issuance/accept_issuance_usecase.dart' as _i68;
import 'package:wallet/src/domain/usecase/issuance/cancel_issuance_usecase.dart' as _i93;
import 'package:wallet/src/domain/usecase/issuance/start_issuance_usecase.dart' as _i92;
import 'package:wallet/src/domain/usecase/navigation/check_navigation_prerequisites_usecase.dart' as _i64;
import 'package:wallet/src/domain/usecase/navigation/perform_pre_navigation_actions_usecase.dart' as _i44;
import 'package:wallet/src/domain/usecase/permission/check_has_permission_usecase.dart' as _i12;
import 'package:wallet/src/domain/usecase/pid/accept_offered_pid_usecase.dart' as _i65;
import 'package:wallet/src/domain/usecase/pid/cancel_pid_issuance_usecase.dart' as _i82;
import 'package:wallet/src/domain/usecase/pid/continue_pid_issuance_usecase.dart' as _i83;
import 'package:wallet/src/domain/usecase/pid/get_pid_issuance_url_usecase.dart' as _i81;
import 'package:wallet/src/domain/usecase/pid/get_pid_renewal_url_usecase.dart' as _i112;
import 'package:wallet/src/domain/usecase/pin/cancel_pin_recovery_usecase.dart' as _i122;
import 'package:wallet/src/domain/usecase/pin/change_pin_usecase.dart' as _i99;
import 'package:wallet/src/domain/usecase/pin/check_is_valid_pin_usecase.dart' as _i75;
import 'package:wallet/src/domain/usecase/pin/check_pin_usecase.dart' as _i61;
import 'package:wallet/src/domain/usecase/pin/complete_pin_recovery_usecase.dart' as _i123;
import 'package:wallet/src/domain/usecase/pin/continue_pin_recovery_usecase.dart' as _i121;
import 'package:wallet/src/domain/usecase/pin/create_pin_recovery_url_usecase.dart' as _i120;
import 'package:wallet/src/domain/usecase/pin/disclose_for_issuance_usecase.dart' as _i95;
import 'package:wallet/src/domain/usecase/pin/unlock_wallet_with_pin_usecase.dart' as _i77;
import 'package:wallet/src/domain/usecase/qr/decode_qr_usecase.dart' as _i96;
import 'package:wallet/src/domain/usecase/sign/accept_sign_agreement_usecase.dart' as _i66;
import 'package:wallet/src/domain/usecase/sign/reject_sign_agreement_usecase.dart' as _i91;
import 'package:wallet/src/domain/usecase/sign/start_sign_usecase.dart' as _i89;
import 'package:wallet/src/domain/usecase/tour/fetch_tour_videos_usecase.dart' as _i110;
import 'package:wallet/src/domain/usecase/tour/observe_show_tour_banner_usecase.dart' as _i73;
import 'package:wallet/src/domain/usecase/tour/tour_overview_viewed_usecase.dart' as _i109;
import 'package:wallet/src/domain/usecase/transfer/acknowledge_wallet_transfer_usecase.dart' as _i116;
import 'package:wallet/src/domain/usecase/transfer/cancel_wallet_transfer_usecase.dart' as _i115;
import 'package:wallet/src/domain/usecase/transfer/get_wallet_transfer_status_usecase.dart' as _i117;
import 'package:wallet/src/domain/usecase/transfer/init_wallet_transfer_usecase.dart' as _i118;
import 'package:wallet/src/domain/usecase/transfer/receive_wallet_transfer_usecase.dart' as _i125;
import 'package:wallet/src/domain/usecase/transfer/skip_wallet_transfer_usecase.dart' as _i119;
import 'package:wallet/src/domain/usecase/transfer/start_wallet_transfer_usecase.dart' as _i114;
import 'package:wallet/src/domain/usecase/update/observe_version_state_usecase.dart' as _i105;
import 'package:wallet/src/domain/usecase/uri/decode_uri_usecase.dart' as _i56;
import 'package:wallet/src/domain/usecase/version/get_version_string_usecase.dart' as _i106;
import 'package:wallet/src/domain/usecase/wallet/create_wallet_usecase.dart' as _i76;
import 'package:wallet/src/domain/usecase/wallet/get_wallet_state_usecase.dart' as _i124;
import 'package:wallet/src/domain/usecase/wallet/is_wallet_initialized_with_pid_usecase.dart' as _i59;
import 'package:wallet/src/domain/usecase/wallet/lock_wallet_usecase.dart' as _i94;
import 'package:wallet/src/domain/usecase/wallet/observe_wallet_locked_usecase.dart' as _i60;
import 'package:wallet/src/domain/usecase/wallet/reset_wallet_usecase.dart' as _i78;
import 'package:wallet/src/domain/usecase/wallet/setup_mocked_wallet_usecase.dart' as _i62;
import 'package:wallet/src/util/manager/biometric_unlock_manager.dart' as _i51;
import 'package:wallet/src/util/mapper/context_mapper.dart' as _i20;
import 'package:wallet/src/util/mapper/mapper.dart' as _i19;
import 'package:wallet/src/wallet_core/typed/typed_wallet_core.dart' as _i42;
import 'package:wallet_core/core.dart' as _i26;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFocusNode_0 extends _i1.SmartFake implements _i2.FocusNode {
  _FakeFocusNode_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeNavigator_2 extends _i1.SmartFake implements _i4.Navigator {
  _FakeNavigator_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeBuildContext_3 extends _i1.SmartFake implements _i5.BuildContext {
  _FakeBuildContext_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeWidget_4 extends _i1.SmartFake implements _i5.Widget {
  _FakeWidget_4(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeDiagnosticsNode_5 extends _i1.SmartFake implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_5(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeTicker_6 extends _i1.SmartFake implements _i6.Ticker {
  _FakeTicker_6(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

class _FakeInheritedWidget_7 extends _i1.SmartFake implements _i5.InheritedWidget {
  _FakeInheritedWidget_7(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeVideoPlayerValue_8 extends _i1.SmartFake implements _i7.VideoPlayerValue {
  _FakeVideoPlayerValue_8(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeDuration_9 extends _i1.SmartFake implements Duration {
  _FakeDuration_9(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeAddressCheckResult_10 extends _i1.SmartFake implements _i8.AddressCheckResult {
  _FakeAddressCheckResult_10(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeWalletCard_11 extends _i1.SmartFake implements _i9.WalletCard {
  _FakeWalletCard_11(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeFuture_12<T1> extends _i1.SmartFake implements _i10.Future<T1> {
  _FakeFuture_12(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeLocale_13 extends _i1.SmartFake implements _i11.Locale {
  _FakeLocale_13(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakePermissionCheckResult_14 extends _i1.SmartFake implements _i12.PermissionCheckResult {
  _FakePermissionCheckResult_14(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [NavigatorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorState extends _i1.Mock implements _i4.NavigatorState {
  @override
  _i2.FocusNode get focusNode =>
      (super.noSuchMethod(
            Invocation.getter(#focusNode),
            returnValue: _FakeFocusNode_0(this, Invocation.getter(#focusNode)),
            returnValueForMissingStub: _FakeFocusNode_0(
              this,
              Invocation.getter(#focusNode),
            ),
          )
          as _i2.FocusNode);

  @override
  _i3.ValueNotifier<bool> get userGestureInProgressNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#userGestureInProgressNotifier),
            returnValue: _FakeValueNotifier_1<bool>(
              this,
              Invocation.getter(#userGestureInProgressNotifier),
            ),
            returnValueForMissingStub: _FakeValueNotifier_1<bool>(
              this,
              Invocation.getter(#userGestureInProgressNotifier),
            ),
          )
          as _i3.ValueNotifier<bool>);

  @override
  bool get userGestureInProgress =>
      (super.noSuchMethod(
            Invocation.getter(#userGestureInProgress),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Navigator get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeNavigator_2(this, Invocation.getter(#widget)),
            returnValueForMissingStub: _FakeNavigator_2(
              this,
              Invocation.getter(#widget),
            ),
          )
          as _i4.Navigator);

  @override
  _i5.BuildContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeBuildContext_3(this, Invocation.getter(#context)),
            returnValueForMissingStub: _FakeBuildContext_3(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i5.BuildContext);

  @override
  bool get mounted =>
      (super.noSuchMethod(
            Invocation.getter(#mounted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get restorePending =>
      (super.noSuchMethod(
            Invocation.getter(#restorePending),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void initState() => super.noSuchMethod(
    Invocation.method(#initState, []),
    returnValueForMissingStub: null,
  );

  @override
  void restoreState(_i13.RestorationBucket? oldBucket, bool? initialRestore) => super.noSuchMethod(
    Invocation.method(#restoreState, [oldBucket, initialRestore]),
    returnValueForMissingStub: null,
  );

  @override
  void didToggleBucket(_i13.RestorationBucket? oldBucket) => super.noSuchMethod(
    Invocation.method(#didToggleBucket, [oldBucket]),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeDependencies() => super.noSuchMethod(
    Invocation.method(#didChangeDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  void didUpdateWidget(_i5.StatefulWidget? oldWidget) => super.noSuchMethod(
    Invocation.method(#didUpdateWidget, [oldWidget]),
    returnValueForMissingStub: null,
  );

  @override
  void deactivate() => super.noSuchMethod(
    Invocation.method(#deactivate, []),
    returnValueForMissingStub: null,
  );

  @override
  void activate() => super.noSuchMethod(
    Invocation.method(#activate, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Future<T?> pushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pushNamed, [routeName], {#arguments: arguments}),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  String restorablePushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushNamed,
              [routeName],
              {#arguments: arguments},
            ),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamed,
                [routeName],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamed,
                [routeName],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i10.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushReplacementNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  String restorablePushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushReplacementNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacementNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacementNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i10.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #popAndPushNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  String restorablePopAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePopAndPushNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePopAndPushNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePopAndPushNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i10.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i4.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushNamedAndRemoveUntil,
              [newRouteName, predicate],
              {#arguments: arguments},
            ),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  String restorablePushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i4.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushNamedAndRemoveUntil,
              [newRouteName, predicate],
              {#arguments: arguments},
            ),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamedAndRemoveUntil,
                [newRouteName, predicate],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamedAndRemoveUntil,
                [newRouteName, predicate],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i10.Future<T?> push<T extends Object?>(_i4.Route<T>? route) =>
      (super.noSuchMethod(
            Invocation.method(#push, [route]),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  String restorablePush<T extends Object?>(
    _i4.RestorableRouteBuilder<T>? routeBuilder, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePush,
              [routeBuilder],
              {#arguments: arguments},
            ),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePush,
                [routeBuilder],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePush,
                [routeBuilder],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i10.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
    _i4.Route<T>? newRoute, {
    TO? result,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pushReplacement, [newRoute], {#result: result}),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  String restorablePushReplacement<T extends Object?, TO extends Object?>(
    _i4.RestorableRouteBuilder<T>? routeBuilder, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushReplacement,
              [routeBuilder],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacement,
                [routeBuilder],
                {#result: result, #arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacement,
                [routeBuilder],
                {#result: result, #arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i10.Future<T?> pushAndRemoveUntil<T extends Object?>(
    _i4.Route<T>? newRoute,
    _i4.RoutePredicate? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#pushAndRemoveUntil, [newRoute, predicate]),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  String restorablePushAndRemoveUntil<T extends Object?>(
    _i4.RestorableRouteBuilder<T>? newRouteBuilder,
    _i4.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushAndRemoveUntil,
              [newRouteBuilder, predicate],
              {#arguments: arguments},
            ),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushAndRemoveUntil,
                [newRouteBuilder, predicate],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushAndRemoveUntil,
                [newRouteBuilder, predicate],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  void replace<T extends Object?>({
    required _i4.Route<dynamic>? oldRoute,
    required _i4.Route<T>? newRoute,
  }) => super.noSuchMethod(
    Invocation.method(#replace, [], {#oldRoute: oldRoute, #newRoute: newRoute}),
    returnValueForMissingStub: null,
  );

  @override
  String restorableReplace<T extends Object?>({
    required _i4.Route<dynamic>? oldRoute,
    required _i4.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#restorableReplace, [], {
              #oldRoute: oldRoute,
              #newRouteBuilder: newRouteBuilder,
              #arguments: arguments,
            }),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#restorableReplace, [], {
                #oldRoute: oldRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#restorableReplace, [], {
                #oldRoute: oldRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
          )
          as String);

  @override
  void replaceRouteBelow<T extends Object?>({
    required _i4.Route<dynamic>? anchorRoute,
    required _i4.Route<T>? newRoute,
  }) => super.noSuchMethod(
    Invocation.method(#replaceRouteBelow, [], {
      #anchorRoute: anchorRoute,
      #newRoute: newRoute,
    }),
    returnValueForMissingStub: null,
  );

  @override
  String restorableReplaceRouteBelow<T extends Object?>({
    required _i4.Route<dynamic>? anchorRoute,
    required _i4.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#restorableReplaceRouteBelow, [], {
              #anchorRoute: anchorRoute,
              #newRouteBuilder: newRouteBuilder,
              #arguments: arguments,
            }),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#restorableReplaceRouteBelow, [], {
                #anchorRoute: anchorRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#restorableReplaceRouteBelow, [], {
                #anchorRoute: anchorRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
          )
          as String);

  @override
  bool canPop() =>
      (super.noSuchMethod(
            Invocation.method(#canPop, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i10.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
            Invocation.method(#maybePop, [result]),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
    Invocation.method(#pop, [result]),
    returnValueForMissingStub: null,
  );

  @override
  void popUntil(_i4.RoutePredicate? predicate) => super.noSuchMethod(
    Invocation.method(#popUntil, [predicate]),
    returnValueForMissingStub: null,
  );

  @override
  void removeRoute<T extends Object?>(_i4.Route<T>? route, [T? result]) => super.noSuchMethod(
    Invocation.method(#removeRoute, [route, result]),
    returnValueForMissingStub: null,
  );

  @override
  void removeRouteBelow<T extends Object?>(
    _i4.Route<T>? anchorRoute, [
    T? result,
  ]) => super.noSuchMethod(
    Invocation.method(#removeRouteBelow, [anchorRoute, result]),
    returnValueForMissingStub: null,
  );

  @override
  void finalizeRoute(_i4.Route<dynamic>? route) => super.noSuchMethod(
    Invocation.method(#finalizeRoute, [route]),
    returnValueForMissingStub: null,
  );

  @override
  void didStartUserGesture() => super.noSuchMethod(
    Invocation.method(#didStartUserGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  void didStopUserGesture() => super.noSuchMethod(
    Invocation.method(#didStopUserGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Widget build(_i5.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#build, [context]),
            returnValue: _FakeWidget_4(
              this,
              Invocation.method(#build, [context]),
            ),
            returnValueForMissingStub: _FakeWidget_4(
              this,
              Invocation.method(#build, [context]),
            ),
          )
          as _i5.Widget);

  @override
  void reassemble() => super.noSuchMethod(
    Invocation.method(#reassemble, []),
    returnValueForMissingStub: null,
  );

  @override
  void setState(_i11.VoidCallback? fn) => super.noSuchMethod(
    Invocation.method(#setState, [fn]),
    returnValueForMissingStub: null,
  );

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) => super.noSuchMethod(
    Invocation.method(#debugFillProperties, [properties]),
    returnValueForMissingStub: null,
  );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  _i6.Ticker createTicker(_i6.TickerCallback? onTick) =>
      (super.noSuchMethod(
            Invocation.method(#createTicker, [onTick]),
            returnValue: _FakeTicker_6(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
            returnValueForMissingStub: _FakeTicker_6(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
          )
          as _i6.Ticker);

  @override
  void registerForRestoration(
    _i15.RestorableProperty<Object?>? property,
    String? restorationId,
  ) => super.noSuchMethod(
    Invocation.method(#registerForRestoration, [property, restorationId]),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterFromRestoration(_i15.RestorableProperty<Object?>? property) => super.noSuchMethod(
    Invocation.method(#unregisterFromRestoration, [property]),
    returnValueForMissingStub: null,
  );

  @override
  void didUpdateRestorationId() => super.noSuchMethod(
    Invocation.method(#didUpdateRestorationId, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorKey extends _i1.Mock implements _i5.GlobalKey<_i4.NavigatorState> {}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i5.BuildContext {
  @override
  _i5.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_4(this, Invocation.getter(#widget)),
            returnValueForMissingStub: _FakeWidget_4(
              this,
              Invocation.getter(#widget),
            ),
          )
          as _i5.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(
            Invocation.getter(#mounted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.InheritedWidget dependOnInheritedElement(
    _i5.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_7(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
            returnValueForMissingStub: _FakeInheritedWidget_7(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i5.InheritedWidget);

  @override
  void visitAncestorElements(_i5.ConditionalElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitAncestorElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void visitChildElements(_i5.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i16.Notification? notification) => super.noSuchMethod(
    Invocation.method(#dispatchNotification, [notification]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i3.DiagnosticsNode>[],
            returnValueForMissingStub: <_i3.DiagnosticsNode>[],
          )
          as List<_i3.DiagnosticsNode>);

  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i3.DiagnosticsNode);
}

/// A class which mocks [VideoPlayerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoPlayerController extends _i1.Mock implements _i7.VideoPlayerController {
  @override
  String get dataSource =>
      (super.noSuchMethod(
            Invocation.getter(#dataSource),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#dataSource),
            ),
            returnValueForMissingStub: _i14.dummyValue<String>(
              this,
              Invocation.getter(#dataSource),
            ),
          )
          as String);

  @override
  Map<String, String> get httpHeaders =>
      (super.noSuchMethod(
            Invocation.getter(#httpHeaders),
            returnValue: <String, String>{},
            returnValueForMissingStub: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i17.DataSourceType get dataSourceType =>
      (super.noSuchMethod(
            Invocation.getter(#dataSourceType),
            returnValue: _i17.DataSourceType.asset,
            returnValueForMissingStub: _i17.DataSourceType.asset,
          )
          as _i17.DataSourceType);

  @override
  _i17.VideoViewType get viewType =>
      (super.noSuchMethod(
            Invocation.getter(#viewType),
            returnValue: _i17.VideoViewType.textureView,
            returnValueForMissingStub: _i17.VideoViewType.textureView,
          )
          as _i17.VideoViewType);

  @override
  int get playerId =>
      (super.noSuchMethod(
            Invocation.getter(#playerId),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i10.Future<Duration?> get position =>
      (super.noSuchMethod(
            Invocation.getter(#position),
            returnValue: _i10.Future<Duration?>.value(),
            returnValueForMissingStub: _i10.Future<Duration?>.value(),
          )
          as _i10.Future<Duration?>);

  @override
  _i7.VideoPlayerValue get value =>
      (super.noSuchMethod(
            Invocation.getter(#value),
            returnValue: _FakeVideoPlayerValue_8(
              this,
              Invocation.getter(#value),
            ),
            returnValueForMissingStub: _FakeVideoPlayerValue_8(
              this,
              Invocation.getter(#value),
            ),
          )
          as _i7.VideoPlayerValue);

  @override
  set value(_i7.VideoPlayerValue? newValue) => super.noSuchMethod(
    Invocation.setter(#value, newValue),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i10.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> play() =>
      (super.noSuchMethod(
            Invocation.method(#play, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> setLooping(bool? looping) =>
      (super.noSuchMethod(
            Invocation.method(#setLooping, [looping]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> seekTo(Duration? position) =>
      (super.noSuchMethod(
            Invocation.method(#seekTo, [position]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> setVolume(double? volume) =>
      (super.noSuchMethod(
            Invocation.method(#setVolume, [volume]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> setPlaybackSpeed(double? speed) =>
      (super.noSuchMethod(
            Invocation.method(#setPlaybackSpeed, [speed]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void setCaptionOffset(Duration? offset) => super.noSuchMethod(
    Invocation.method(#setCaptionOffset, [offset]),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Future<void> setClosedCaptionFile(
    _i10.Future<_i18.ClosedCaptionFile>? closedCaptionFile,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setClosedCaptionFile, [closedCaptionFile]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock implements _i8.InternetConnectionChecker {
  @override
  bool get requireAllAddressesToRespond =>
      (super.noSuchMethod(
            Invocation.getter(#requireAllAddressesToRespond),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get enableToCheckForSlowConnection =>
      (super.noSuchMethod(
            Invocation.getter(#enableToCheckForSlowConnection),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Duration get slowConnectionThreshold =>
      (super.noSuchMethod(
            Invocation.getter(#slowConnectionThreshold),
            returnValue: _FakeDuration_9(
              this,
              Invocation.getter(#slowConnectionThreshold),
            ),
            returnValueForMissingStub: _FakeDuration_9(
              this,
              Invocation.getter(#slowConnectionThreshold),
            ),
          )
          as Duration);

  @override
  Duration get checkTimeout =>
      (super.noSuchMethod(
            Invocation.getter(#checkTimeout),
            returnValue: _FakeDuration_9(
              this,
              Invocation.getter(#checkTimeout),
            ),
            returnValueForMissingStub: _FakeDuration_9(
              this,
              Invocation.getter(#checkTimeout),
            ),
          )
          as Duration);

  @override
  Duration get checkInterval =>
      (super.noSuchMethod(
            Invocation.getter(#checkInterval),
            returnValue: _FakeDuration_9(
              this,
              Invocation.getter(#checkInterval),
            ),
            returnValueForMissingStub: _FakeDuration_9(
              this,
              Invocation.getter(#checkInterval),
            ),
          )
          as Duration);

  @override
  List<_i8.AddressCheckOption> get addresses =>
      (super.noSuchMethod(
            Invocation.getter(#addresses),
            returnValue: <_i8.AddressCheckOption>[],
            returnValueForMissingStub: <_i8.AddressCheckOption>[],
          )
          as List<_i8.AddressCheckOption>);

  @override
  _i10.Stream<_i8.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
            Invocation.getter(#onStatusChange),
            returnValue: _i10.Stream<_i8.InternetConnectionStatus>.empty(),
            returnValueForMissingStub: _i10.Stream<_i8.InternetConnectionStatus>.empty(),
          )
          as _i10.Stream<_i8.InternetConnectionStatus>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i10.Future<bool> get hasConnection =>
      (super.noSuchMethod(
            Invocation.getter(#hasConnection),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i8.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i10.Future<_i8.InternetConnectionStatus>.value(
              _i8.InternetConnectionStatus.connected,
            ),
            returnValueForMissingStub: _i10.Future<_i8.InternetConnectionStatus>.value(
              _i8.InternetConnectionStatus.connected,
            ),
          )
          as _i10.Future<_i8.InternetConnectionStatus>);

  @override
  set requireAllAddressesToRespond(bool? _requireAllAddressesToRespond) => super.noSuchMethod(
    Invocation.setter(
      #requireAllAddressesToRespond,
      _requireAllAddressesToRespond,
    ),
    returnValueForMissingStub: null,
  );

  @override
  set enableToCheckForSlowConnection(bool? _enableToCheckForSlowConnection) => super.noSuchMethod(
    Invocation.setter(
      #enableToCheckForSlowConnection,
      _enableToCheckForSlowConnection,
    ),
    returnValueForMissingStub: null,
  );

  @override
  set slowConnectionThreshold(Duration? _slowConnectionThreshold) => super.noSuchMethod(
    Invocation.setter(#slowConnectionThreshold, _slowConnectionThreshold),
    returnValueForMissingStub: null,
  );

  @override
  set checkTimeout(Duration? _checkTimeout) => super.noSuchMethod(
    Invocation.setter(#checkTimeout, _checkTimeout),
    returnValueForMissingStub: null,
  );

  @override
  set checkInterval(Duration? _checkInterval) => super.noSuchMethod(
    Invocation.setter(#checkInterval, _checkInterval),
    returnValueForMissingStub: null,
  );

  @override
  set addresses(List<_i8.AddressCheckOption>? value) => super.noSuchMethod(
    Invocation.setter(#addresses, value),
    returnValueForMissingStub: null,
  );

  @override
  set setLastStatus(_i8.InternetConnectionStatus? status) => super.noSuchMethod(
    Invocation.setter(#setLastStatus, status),
    returnValueForMissingStub: null,
  );

  @override
  set setRequireAllAddressesToRespond(bool? value) => super.noSuchMethod(
    Invocation.setter(#setRequireAllAddressesToRespond, value),
    returnValueForMissingStub: null,
  );

  @override
  Iterable<_i10.Future<_i8.AddressCheckResult>> createAddressCheckFutures(
    List<_i8.AddressCheckOption>? addresses,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createAddressCheckFutures, [addresses]),
            returnValue: <_i10.Future<_i8.AddressCheckResult>>[],
            returnValueForMissingStub: <_i10.Future<_i8.AddressCheckResult>>[],
          )
          as Iterable<_i10.Future<_i8.AddressCheckResult>>);

  @override
  _i10.Future<bool> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i8.AddressCheckResult> isHostReachable(
    _i8.AddressCheckOption? option,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#isHostReachable, [option]),
            returnValue: _i10.Future<_i8.AddressCheckResult>.value(
              _FakeAddressCheckResult_10(
                this,
                Invocation.method(#isHostReachable, [option]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i8.AddressCheckResult>.value(
              _FakeAddressCheckResult_10(
                this,
                Invocation.method(#isHostReachable, [option]),
              ),
            ),
          )
          as _i10.Future<_i8.AddressCheckResult>);

  @override
  _i10.Future<void> maybeEmitStatusUpdate({
    _i10.Timer? timer,
    Function? cancelCallback,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#maybeEmitStatusUpdate, [], {
              #timer: timer,
              #cancelCallback: cancelCallback,
            }),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void emitStatus(_i8.InternetConnectionStatus? newStatus) => super.noSuchMethod(
    Invocation.method(#emitStatus, [newStatus]),
    returnValueForMissingStub: null,
  );

  @override
  void startMonitoring() => super.noSuchMethod(
    Invocation.method(#startMonitoring, []),
    returnValueForMissingStub: null,
  );

  @override
  void cancelStatusUpdate() => super.noSuchMethod(
    Invocation.method(#cancelStatusUpdate, []),
    returnValueForMissingStub: null,
  );

  @override
  void configure({
    Duration? timeout,
    Duration? interval,
    List<_i8.AddressCheckOption>? addresses,
    _i8.SlowConnectionConfig? slowConnectionConfig,
  }) => super.noSuchMethod(
    Invocation.method(#configure, [], {
      #timeout: timeout,
      #interval: interval,
      #addresses: addresses,
      #slowConnectionConfig: slowConnectionConfig,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Mapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapper<I, O> extends _i1.Mock implements _i19.Mapper<I, O> {
  @override
  O map(I? input) =>
      (super.noSuchMethod(
            Invocation.method(#map, [input]),
            returnValue: _i14.dummyValue<O>(
              this,
              Invocation.method(#map, [input]),
            ),
            returnValueForMissingStub: _i14.dummyValue<O>(
              this,
              Invocation.method(#map, [input]),
            ),
          )
          as O);

  @override
  List<O> mapList(Iterable<I>? input) =>
      (super.noSuchMethod(
            Invocation.method(#mapList, [input]),
            returnValue: <O>[],
            returnValueForMissingStub: <O>[],
          )
          as List<O>);
}

/// A class which mocks [ContextMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockContextMapper<I, O> extends _i1.Mock implements _i20.ContextMapper<I, O> {
  @override
  O map(_i5.BuildContext? context, I? input) =>
      (super.noSuchMethod(
            Invocation.method(#map, [context, input]),
            returnValue: _i14.dummyValue<O>(
              this,
              Invocation.method(#map, [context, input]),
            ),
            returnValueForMissingStub: _i14.dummyValue<O>(
              this,
              Invocation.method(#map, [context, input]),
            ),
          )
          as O);

  @override
  List<O> mapList(_i5.BuildContext? context, List<I>? input) =>
      (super.noSuchMethod(
            Invocation.method(#mapList, [context, input]),
            returnValue: <O>[],
            returnValueForMissingStub: <O>[],
          )
          as List<O>);
}

/// A class which mocks [PidRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPidRepository extends _i1.Mock implements _i21.PidRepository {
  @override
  _i10.Future<String> getPidIssuanceUrl() =>
      (super.noSuchMethod(
            Invocation.method(#getPidIssuanceUrl, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#getPidIssuanceUrl, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#getPidIssuanceUrl, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<String> getPidRenewalUrl() =>
      (super.noSuchMethod(
            Invocation.method(#getPidRenewalUrl, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#getPidRenewalUrl, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#getPidRenewalUrl, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<List<_i22.DataAttribute>> continuePidIssuance(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#continuePidIssuance, [uri]),
            returnValue: _i10.Future<List<_i22.DataAttribute>>.value(
              <_i22.DataAttribute>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i22.DataAttribute>>.value(
              <_i22.DataAttribute>[],
            ),
          )
          as _i10.Future<List<_i22.DataAttribute>>);

  @override
  _i10.Future<void> cancelIssuance() =>
      (super.noSuchMethod(
            Invocation.method(#cancelIssuance, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<bool> hasActiveIssuanceSession() =>
      (super.noSuchMethod(
            Invocation.method(#hasActiveIssuanceSession, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i21.TransferState> acceptIssuance(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#acceptIssuance, [pin]),
            returnValue: _i10.Future<_i21.TransferState>.value(
              _i21.TransferState.available,
            ),
            returnValueForMissingStub: _i10.Future<_i21.TransferState>.value(
              _i21.TransferState.available,
            ),
          )
          as _i10.Future<_i21.TransferState>);
}

/// A class which mocks [DisclosureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDisclosureRepository extends _i1.Mock implements _i23.DisclosureRepository {
  @override
  _i10.Future<_i24.StartDisclosureResult> startDisclosure(
    String? disclosureUri, {
    required bool? isQrCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #startDisclosure,
              [disclosureUri],
              {#isQrCode: isQrCode},
            ),
            returnValue: _i10.Future<_i24.StartDisclosureResult>.value(
              _i14.dummyValue<_i24.StartDisclosureResult>(
                this,
                Invocation.method(
                  #startDisclosure,
                  [disclosureUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i24.StartDisclosureResult>.value(
              _i14.dummyValue<_i24.StartDisclosureResult>(
                this,
                Invocation.method(
                  #startDisclosure,
                  [disclosureUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
          )
          as _i10.Future<_i24.StartDisclosureResult>);

  @override
  _i10.Future<String?> cancelDisclosure() =>
      (super.noSuchMethod(
            Invocation.method(#cancelDisclosure, []),
            returnValue: _i10.Future<String?>.value(),
            returnValueForMissingStub: _i10.Future<String?>.value(),
          )
          as _i10.Future<String?>);

  @override
  _i10.Future<bool> hasActiveDisclosureSession() =>
      (super.noSuchMethod(
            Invocation.method(#hasActiveDisclosureSession, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<String?> acceptDisclosure(
    String? pin,
    List<int>? selectedIndices,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#acceptDisclosure, [pin, selectedIndices]),
            returnValue: _i10.Future<String?>.value(),
            returnValueForMissingStub: _i10.Future<String?>.value(),
          )
          as _i10.Future<String?>);
}

/// A class which mocks [WalletRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletRepository extends _i1.Mock implements _i25.WalletRepository {
  @override
  _i10.Stream<bool> get isLockedStream =>
      (super.noSuchMethod(
            Invocation.getter(#isLockedStream),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);

  @override
  _i10.Future<void> createWallet(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#createWallet, [pin]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<bool> isRegistered() =>
      (super.noSuchMethod(
            Invocation.method(#isRegistered, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i26.WalletInstructionResult> unlockWallet(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#unlockWallet, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#unlockWallet, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#unlockWallet, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<void> unlockWalletWithBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#unlockWalletWithBiometrics, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> lockWallet() =>
      (super.noSuchMethod(
            Invocation.method(#lockWallet, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<bool> containsPid() =>
      (super.noSuchMethod(
            Invocation.method(#containsPid, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<void> resetWallet() =>
      (super.noSuchMethod(
            Invocation.method(#resetWallet, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i27.WalletState> getWalletState() =>
      (super.noSuchMethod(
            Invocation.method(#getWalletState, []),
            returnValue: _i10.Future<_i27.WalletState>.value(
              _i14.dummyValue<_i27.WalletState>(
                this,
                Invocation.method(#getWalletState, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i27.WalletState>.value(
              _i14.dummyValue<_i27.WalletState>(
                this,
                Invocation.method(#getWalletState, []),
              ),
            ),
          )
          as _i10.Future<_i27.WalletState>);
}

/// A class which mocks [PinRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPinRepository extends _i1.Mock implements _i28.PinRepository {
  @override
  _i10.Future<void> validatePin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#validatePin, [pin]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletInstructionResult> checkPin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#checkPin, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#checkPin, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#checkPin, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<String> createPinRecoveryRedirectUri() =>
      (super.noSuchMethod(
            Invocation.method(#createPinRecoveryRedirectUri, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPinRecoveryRedirectUri, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPinRecoveryRedirectUri, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<void> continuePinRecovery(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#continuePinRecovery, [uri]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> completePinRecovery(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#completePinRecovery, [pin]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> cancelPinRecovery() =>
      (super.noSuchMethod(
            Invocation.method(#cancelPinRecovery, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletInstructionResult> changePin(
    String? oldPin,
    String? newPin,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changePin, [oldPin, newPin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#changePin, [oldPin, newPin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#changePin, [oldPin, newPin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> continueChangePin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#continueChangePin, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#continueChangePin, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#continueChangePin, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);
}

/// A class which mocks [WalletCardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletCardRepository extends _i1.Mock implements _i29.WalletCardRepository {
  @override
  _i10.Stream<List<_i9.WalletCard>> observeWalletCards() =>
      (super.noSuchMethod(
            Invocation.method(#observeWalletCards, []),
            returnValue: _i10.Stream<List<_i9.WalletCard>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i9.WalletCard>>.empty(),
          )
          as _i10.Stream<List<_i9.WalletCard>>);

  @override
  _i10.Future<bool> exists(String? attestationId) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [attestationId]),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<List<_i9.WalletCard>> readAll() =>
      (super.noSuchMethod(
            Invocation.method(#readAll, []),
            returnValue: _i10.Future<List<_i9.WalletCard>>.value(
              <_i9.WalletCard>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i9.WalletCard>>.value(
              <_i9.WalletCard>[],
            ),
          )
          as _i10.Future<List<_i9.WalletCard>>);

  @override
  _i10.Future<_i9.WalletCard> read(String? attestationId) =>
      (super.noSuchMethod(
            Invocation.method(#read, [attestationId]),
            returnValue: _i10.Future<_i9.WalletCard>.value(
              _FakeWalletCard_11(
                this,
                Invocation.method(#read, [attestationId]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i9.WalletCard>.value(
              _FakeWalletCard_11(
                this,
                Invocation.method(#read, [attestationId]),
              ),
            ),
          )
          as _i10.Future<_i9.WalletCard>);
}

/// A class which mocks [WalletEventRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletEventRepository extends _i1.Mock implements _i30.WalletEventRepository {
  @override
  _i10.Future<List<_i31.WalletEvent>> getEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getEvents, []),
            returnValue: _i10.Future<List<_i31.WalletEvent>>.value(
              <_i31.WalletEvent>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i31.WalletEvent>>.value(<_i31.WalletEvent>[]),
          )
          as _i10.Future<List<_i31.WalletEvent>>);

  @override
  _i10.Future<List<_i31.WalletEvent>> getEventsForCard(String? attestationId) =>
      (super.noSuchMethod(
            Invocation.method(#getEventsForCard, [attestationId]),
            returnValue: _i10.Future<List<_i31.WalletEvent>>.value(
              <_i31.WalletEvent>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i31.WalletEvent>>.value(<_i31.WalletEvent>[]),
          )
          as _i10.Future<List<_i31.WalletEvent>>);

  @override
  _i10.Stream<List<_i31.WalletEvent>> observeRecentEvents() =>
      (super.noSuchMethod(
            Invocation.method(#observeRecentEvents, []),
            returnValue: _i10.Stream<List<_i31.WalletEvent>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i31.WalletEvent>>.empty(),
          )
          as _i10.Stream<List<_i31.WalletEvent>>);

  @override
  _i10.Future<_i31.DisclosureEvent?> readMostRecentDisclosureEvent(
    String? attestationId,
    _i31.EventStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readMostRecentDisclosureEvent, [
              attestationId,
              status,
            ]),
            returnValue: _i10.Future<_i31.DisclosureEvent?>.value(),
            returnValueForMissingStub: _i10.Future<_i31.DisclosureEvent?>.value(),
          )
          as _i10.Future<_i31.DisclosureEvent?>);

  @override
  _i10.Future<_i31.IssuanceEvent?> readMostRecentIssuanceEvent(
    String? attestationId,
    _i31.EventStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readMostRecentIssuanceEvent, [
              attestationId,
              status,
            ]),
            returnValue: _i10.Future<_i31.IssuanceEvent?>.value(),
            returnValueForMissingStub: _i10.Future<_i31.IssuanceEvent?>.value(),
          )
          as _i10.Future<_i31.IssuanceEvent?>);
}

/// A class which mocks [ConfigurationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigurationRepository extends _i1.Mock implements _i32.ConfigurationRepository {
  @override
  _i10.Stream<_i33.FlutterAppConfiguration> get appConfiguration =>
      (super.noSuchMethod(
            Invocation.getter(#appConfiguration),
            returnValue: _i10.Stream<_i33.FlutterAppConfiguration>.empty(),
            returnValueForMissingStub: _i10.Stream<_i33.FlutterAppConfiguration>.empty(),
          )
          as _i10.Stream<_i33.FlutterAppConfiguration>);
}

/// A class which mocks [LanguageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageRepository extends _i1.Mock implements _i34.LanguageRepository {
  @override
  _i10.Stream<_i11.Locale?> get preferredLocale =>
      (super.noSuchMethod(
            Invocation.getter(#preferredLocale),
            returnValue: _i10.Stream<_i11.Locale?>.empty(),
            returnValueForMissingStub: _i10.Stream<_i11.Locale?>.empty(),
          )
          as _i10.Stream<_i11.Locale?>);

  @override
  _i10.Future<List<_i11.Locale>> getAvailableLocales() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableLocales, []),
            returnValue: _i10.Future<List<_i11.Locale>>.value(<_i11.Locale>[]),
            returnValueForMissingStub: _i10.Future<List<_i11.Locale>>.value(
              <_i11.Locale>[],
            ),
          )
          as _i10.Future<List<_i11.Locale>>);

  @override
  _i10.Future<void> setPreferredLocale(_i11.Locale? locale) =>
      (super.noSuchMethod(
            Invocation.method(#setPreferredLocale, [locale]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);
}

/// A class which mocks [BiometricRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricRepository extends _i1.Mock implements _i35.BiometricRepository {
  @override
  _i10.Future<bool> isBiometricLoginEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricLoginEnabled, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<void> enableBiometricLogin() =>
      (super.noSuchMethod(
            Invocation.method(#enableBiometricLogin, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> disableBiometricLogin() =>
      (super.noSuchMethod(
            Invocation.method(#disableBiometricLogin, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);
}

/// A class which mocks [VersionStateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVersionStateRepository extends _i1.Mock implements _i36.VersionStateRepository {
  @override
  _i10.Stream<_i37.VersionState> observeVersionState() =>
      (super.noSuchMethod(
            Invocation.method(#observeVersionState, []),
            returnValue: _i10.Stream<_i37.VersionState>.empty(),
            returnValueForMissingStub: _i10.Stream<_i37.VersionState>.empty(),
          )
          as _i10.Stream<_i37.VersionState>);
}

/// A class which mocks [TourRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTourRepository extends _i1.Mock implements _i38.TourRepository {
  @override
  _i10.Stream<bool> get showTourBanner =>
      (super.noSuchMethod(
            Invocation.getter(#showTourBanner),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);

  @override
  _i10.Future<void> setShowTourBanner({required bool? showTourBanner}) =>
      (super.noSuchMethod(
            Invocation.method(#setShowTourBanner, [], {
              #showTourBanner: showTourBanner,
            }),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);
}

/// A class which mocks [IssuanceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIssuanceRepository extends _i1.Mock implements _i39.IssuanceRepository {
  @override
  _i10.Future<_i24.StartDisclosureResult> startIssuance(
    String? disclosureUri, {
    required bool? isQrCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #startIssuance,
              [disclosureUri],
              {#isQrCode: isQrCode},
            ),
            returnValue: _i10.Future<_i24.StartDisclosureResult>.value(
              _i14.dummyValue<_i24.StartDisclosureResult>(
                this,
                Invocation.method(
                  #startIssuance,
                  [disclosureUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i24.StartDisclosureResult>.value(
              _i14.dummyValue<_i24.StartDisclosureResult>(
                this,
                Invocation.method(
                  #startIssuance,
                  [disclosureUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
          )
          as _i10.Future<_i24.StartDisclosureResult>);

  @override
  _i10.Future<List<_i9.WalletCard>> discloseForIssuance(
    String? pin,
    List<int>? selectedIndices,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#discloseForIssuance, [pin, selectedIndices]),
            returnValue: _i10.Future<List<_i9.WalletCard>>.value(
              <_i9.WalletCard>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i9.WalletCard>>.value(
              <_i9.WalletCard>[],
            ),
          )
          as _i10.Future<List<_i9.WalletCard>>);

  @override
  _i10.Future<void> acceptIssuance(
    String? pin,
    Iterable<_i9.WalletCard>? cards,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#acceptIssuance, [pin, cards]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<String?> cancelIssuance() =>
      (super.noSuchMethod(
            Invocation.method(#cancelIssuance, []),
            returnValue: _i10.Future<String?>.value(),
            returnValueForMissingStub: _i10.Future<String?>.value(),
          )
          as _i10.Future<String?>);
}

/// A class which mocks [TransferRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferRepository extends _i1.Mock implements _i40.TransferRepository {
  @override
  _i10.Future<String> initWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#initWalletTransfer, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#initWalletTransfer, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#initWalletTransfer, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<void> acknowledgeWalletTransfer(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#acknowledgeWalletTransfer, [uri]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletInstructionResult> transferWallet(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#transferWallet, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#transferWallet, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#transferWallet, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<void> receiveWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#receiveWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> cancelWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#cancelWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i41.WalletTransferStatus> getWalletTransferState() =>
      (super.noSuchMethod(
            Invocation.method(#getWalletTransferState, []),
            returnValue: _i10.Future<_i41.WalletTransferStatus>.value(
              _i41.WalletTransferStatus.waitingForScan,
            ),
            returnValueForMissingStub: _i10.Future<_i41.WalletTransferStatus>.value(
              _i41.WalletTransferStatus.waitingForScan,
            ),
          )
          as _i10.Future<_i41.WalletTransferStatus>);

  @override
  _i10.Future<void> skipWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#skipWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);
}

/// A class which mocks [TypedWalletCore].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypedWalletCore extends _i1.Mock implements _i42.TypedWalletCore {
  @override
  _i10.Stream<bool> get isLocked =>
      (super.noSuchMethod(
            Invocation.getter(#isLocked),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);

  @override
  _i10.Future<_i26.PinValidationResult> isValidPin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#isValidPin, [pin]),
            returnValue: _i10.Future<_i26.PinValidationResult>.value(
              _i26.PinValidationResult.Ok,
            ),
            returnValueForMissingStub: _i10.Future<_i26.PinValidationResult>.value(
              _i26.PinValidationResult.Ok,
            ),
          )
          as _i10.Future<_i26.PinValidationResult>);

  @override
  _i10.Future<void> register(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#register, [pin]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<bool> isRegistered() =>
      (super.noSuchMethod(
            Invocation.method(#isRegistered, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<void> lockWallet() =>
      (super.noSuchMethod(
            Invocation.method(#lockWallet, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletInstructionResult> unlockWallet(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#unlockWallet, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#unlockWallet, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#unlockWallet, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> checkPin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#checkPin, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#checkPin, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#checkPin, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> changePin(
    String? oldPin,
    dynamic newPin,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changePin, [oldPin, newPin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#changePin, [oldPin, newPin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#changePin, [oldPin, newPin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> continueChangePin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#continueChangePin, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#continueChangePin, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#continueChangePin, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Stream<_i26.FlutterConfiguration> observeConfig() =>
      (super.noSuchMethod(
            Invocation.method(#observeConfig, []),
            returnValue: _i10.Stream<_i26.FlutterConfiguration>.empty(),
            returnValueForMissingStub: _i10.Stream<_i26.FlutterConfiguration>.empty(),
          )
          as _i10.Stream<_i26.FlutterConfiguration>);

  @override
  _i10.Stream<_i26.FlutterVersionState> observeVersionState() =>
      (super.noSuchMethod(
            Invocation.method(#observeVersionState, []),
            returnValue: _i10.Stream<_i26.FlutterVersionState>.empty(),
            returnValueForMissingStub: _i10.Stream<_i26.FlutterVersionState>.empty(),
          )
          as _i10.Stream<_i26.FlutterVersionState>);

  @override
  _i10.Future<String> createPidIssuanceRedirectUri() =>
      (super.noSuchMethod(
            Invocation.method(#createPidIssuanceRedirectUri, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPidIssuanceRedirectUri, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPidIssuanceRedirectUri, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<String> createPidRenewalRedirectUri() =>
      (super.noSuchMethod(
            Invocation.method(#createPidRenewalRedirectUri, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPidRenewalRedirectUri, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPidRenewalRedirectUri, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<_i26.IdentifyUriResult> identifyUri(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#identifyUri, [uri]),
            returnValue: _i10.Future<_i26.IdentifyUriResult>.value(
              _i26.IdentifyUriResult.PidIssuance,
            ),
            returnValueForMissingStub: _i10.Future<_i26.IdentifyUriResult>.value(
              _i26.IdentifyUriResult.PidIssuance,
            ),
          )
          as _i10.Future<_i26.IdentifyUriResult>);

  @override
  _i10.Future<void> cancelIssuance() =>
      (super.noSuchMethod(
            Invocation.method(#cancelIssuance, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<List<_i26.AttestationPresentation>> continuePidIssuance(
    String? uri,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#continuePidIssuance, [uri]),
            returnValue: _i10.Future<List<_i26.AttestationPresentation>>.value(
              <_i26.AttestationPresentation>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i26.AttestationPresentation>>.value(
              <_i26.AttestationPresentation>[],
            ),
          )
          as _i10.Future<List<_i26.AttestationPresentation>>);

  @override
  _i10.Future<_i26.DisclosureBasedIssuanceResult> continueDisclosureBasedIssuance(
    String? pin,
    List<int>? selectedIndices,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#continueDisclosureBasedIssuance, [
              pin,
              selectedIndices,
            ]),
            returnValue: _i10.Future<_i26.DisclosureBasedIssuanceResult>.value(
              _i14.dummyValue<_i26.DisclosureBasedIssuanceResult>(
                this,
                Invocation.method(#continueDisclosureBasedIssuance, [
                  pin,
                  selectedIndices,
                ]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.DisclosureBasedIssuanceResult>.value(
              _i14.dummyValue<_i26.DisclosureBasedIssuanceResult>(
                this,
                Invocation.method(#continueDisclosureBasedIssuance, [
                  pin,
                  selectedIndices,
                ]),
              ),
            ),
          )
          as _i10.Future<_i26.DisclosureBasedIssuanceResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> acceptIssuance(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#acceptIssuance, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#acceptIssuance, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#acceptIssuance, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.PidIssuanceResult> acceptPidIssuance(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#acceptPidIssuance, [pin]),
            returnValue: _i10.Future<_i26.PidIssuanceResult>.value(
              _i14.dummyValue<_i26.PidIssuanceResult>(
                this,
                Invocation.method(#acceptPidIssuance, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.PidIssuanceResult>.value(
              _i14.dummyValue<_i26.PidIssuanceResult>(
                this,
                Invocation.method(#acceptPidIssuance, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.PidIssuanceResult>);

  @override
  _i10.Future<bool> hasActiveIssuanceSession() =>
      (super.noSuchMethod(
            Invocation.method(#hasActiveIssuanceSession, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i26.StartDisclosureResult> startDisclosure(
    String? uri, {
    bool? isQrCode = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startDisclosure, [uri], {#isQrCode: isQrCode}),
            returnValue: _i10.Future<_i26.StartDisclosureResult>.value(
              _i14.dummyValue<_i26.StartDisclosureResult>(
                this,
                Invocation.method(
                  #startDisclosure,
                  [uri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.StartDisclosureResult>.value(
              _i14.dummyValue<_i26.StartDisclosureResult>(
                this,
                Invocation.method(
                  #startDisclosure,
                  [uri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
          )
          as _i10.Future<_i26.StartDisclosureResult>);

  @override
  _i10.Future<String?> cancelDisclosure() =>
      (super.noSuchMethod(
            Invocation.method(#cancelDisclosure, []),
            returnValue: _i10.Future<String?>.value(),
            returnValueForMissingStub: _i10.Future<String?>.value(),
          )
          as _i10.Future<String?>);

  @override
  _i10.Future<_i26.AcceptDisclosureResult> acceptDisclosure(
    String? pin,
    List<int>? selectedIndices,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#acceptDisclosure, [pin, selectedIndices]),
            returnValue: _i10.Future<_i26.AcceptDisclosureResult>.value(
              _i14.dummyValue<_i26.AcceptDisclosureResult>(
                this,
                Invocation.method(#acceptDisclosure, [pin, selectedIndices]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.AcceptDisclosureResult>.value(
              _i14.dummyValue<_i26.AcceptDisclosureResult>(
                this,
                Invocation.method(#acceptDisclosure, [
                  pin,
                  selectedIndices,
                ]),
              ),
            ),
          )
          as _i10.Future<_i26.AcceptDisclosureResult>);

  @override
  _i10.Future<bool> hasActiveDisclosureSession() =>
      (super.noSuchMethod(
            Invocation.method(#hasActiveDisclosureSession, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Stream<List<_i26.AttestationPresentation>> observeCards() =>
      (super.noSuchMethod(
            Invocation.method(#observeCards, []),
            returnValue: _i10.Stream<List<_i26.AttestationPresentation>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i26.AttestationPresentation>>.empty(),
          )
          as _i10.Stream<List<_i26.AttestationPresentation>>);

  @override
  _i10.Future<void> resetWallet() =>
      (super.noSuchMethod(
            Invocation.method(#resetWallet, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<List<_i26.WalletEvent>> getHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getHistory, []),
            returnValue: _i10.Future<List<_i26.WalletEvent>>.value(
              <_i26.WalletEvent>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i26.WalletEvent>>.value(<_i26.WalletEvent>[]),
          )
          as _i10.Future<List<_i26.WalletEvent>>);

  @override
  _i10.Future<List<_i26.WalletEvent>> getHistoryForCard(
    String? attestationId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getHistoryForCard, [attestationId]),
            returnValue: _i10.Future<List<_i26.WalletEvent>>.value(
              <_i26.WalletEvent>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i26.WalletEvent>>.value(<_i26.WalletEvent>[]),
          )
          as _i10.Future<List<_i26.WalletEvent>>);

  @override
  _i10.Stream<List<_i26.WalletEvent>> observeRecentHistory() =>
      (super.noSuchMethod(
            Invocation.method(#observeRecentHistory, []),
            returnValue: _i10.Stream<List<_i26.WalletEvent>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i26.WalletEvent>>.empty(),
          )
          as _i10.Stream<List<_i26.WalletEvent>>);

  @override
  _i10.Future<bool> isBiometricLoginEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricLoginEnabled, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<void> setBiometricUnlock({required bool? enabled}) =>
      (super.noSuchMethod(
            Invocation.method(#setBiometricUnlock, [], {#enabled: enabled}),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> unlockWithBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#unlockWithBiometrics, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<String> getVersionString() =>
      (super.noSuchMethod(
            Invocation.method(#getVersionString, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#getVersionString, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#getVersionString, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<String> createPinRecoveryRedirectUri() =>
      (super.noSuchMethod(
            Invocation.method(#createPinRecoveryRedirectUri, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPinRecoveryRedirectUri, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#createPinRecoveryRedirectUri, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<void> continuePinRecovery(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#continuePinRecovery, [uri]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> completePinRecovery(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#completePinRecovery, [pin]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> cancelPinRecovery() =>
      (super.noSuchMethod(
            Invocation.method(#cancelPinRecovery, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<String> initWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#initWalletTransfer, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#initWalletTransfer, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#initWalletTransfer, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<void> acknowledgeWalletTransfer(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#acknowledgeWalletTransfer, [uri]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletInstructionResult> transferWallet(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#transferWallet, [pin]),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#transferWallet, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#transferWallet, [pin]),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<void> receiveWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#receiveWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> cancelWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#cancelWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.TransferSessionState> getWalletTransferState() =>
      (super.noSuchMethod(
            Invocation.method(#getWalletTransferState, []),
            returnValue: _i10.Future<_i26.TransferSessionState>.value(
              _i26.TransferSessionState.Created,
            ),
            returnValueForMissingStub: _i10.Future<_i26.TransferSessionState>.value(
              _i26.TransferSessionState.Created,
            ),
          )
          as _i10.Future<_i26.TransferSessionState>);

  @override
  _i10.Future<void> skipWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#skipWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletState> getWalletState() =>
      (super.noSuchMethod(
            Invocation.method(#getWalletState, []),
            returnValue: _i10.Future<_i26.WalletState>.value(
              _i14.dummyValue<_i26.WalletState>(
                this,
                Invocation.method(#getWalletState, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletState>.value(
              _i14.dummyValue<_i26.WalletState>(
                this,
                Invocation.method(#getWalletState, []),
              ),
            ),
          )
          as _i10.Future<_i26.WalletState>);

  @override
  _i10.Future<T> call<T>(_i10.Future<T> Function()? runnable) =>
      (super.noSuchMethod(
            Invocation.method(#call, [runnable]),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#call, [runnable]),
                  ),
                  (T v) => _i10.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(this, Invocation.method(#call, [runnable])),
            returnValueForMissingStub:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#call, [runnable]),
                  ),
                  (T v) => _i10.Future<T>.value(v),
                ) ??
                _FakeFuture_12<T>(this, Invocation.method(#call, [runnable])),
          )
          as _i10.Future<T>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i43.NavigationService {
  @override
  _i10.Future<void> handleNavigationRequest(
    _i44.NavigationRequest? request, {
    bool? queueIfNotReady = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleNavigationRequest,
              [request],
              {#queueIfNotReady: queueIfNotReady},
            ),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> processQueue() =>
      (super.noSuchMethod(
            Invocation.method(#processQueue, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> showDialog(
    _i43.WalletDialogType? type, {
    bool? dismissOpenDialogs = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showDialog,
              [type],
              {#dismissOpenDialogs: dismissOpenDialogs},
            ),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> processUpdateNotification(
    _i45.UpdateNotification? notification,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#processUpdateNotification, [notification]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Stream<bool> observeUpdateNotificationDialogVisible() =>
      (super.noSuchMethod(
            Invocation.method(#observeUpdateNotificationDialogVisible, []),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);
}

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock implements _i46.LocalAuthentication {
  @override
  _i10.Future<bool> get canCheckBiometrics =>
      (super.noSuchMethod(
            Invocation.getter(#canCheckBiometrics),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<bool> authenticate({
    required String? localizedReason,
    Iterable<_i47.AuthMessages>? authMessages = const [
      _i48.IOSAuthMessages(),
      _i47.AndroidAuthMessages(),
      _i49.WindowsAuthMessages(),
    ],
    _i47.AuthenticationOptions? options = const _i47.AuthenticationOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, [], {
              #localizedReason: localizedReason,
              #authMessages: authMessages,
              #options: options,
            }),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<bool> stopAuthentication() =>
      (super.noSuchMethod(
            Invocation.method(#stopAuthentication, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<bool> isDeviceSupported() =>
      (super.noSuchMethod(
            Invocation.method(#isDeviceSupported, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<List<_i47.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBiometrics, []),
            returnValue: _i10.Future<List<_i47.BiometricType>>.value(
              <_i47.BiometricType>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i47.BiometricType>>.value(
              <_i47.BiometricType>[],
            ),
          )
          as _i10.Future<List<_i47.BiometricType>>);
}

/// A class which mocks [ActiveLocaleProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveLocaleProvider extends _i1.Mock implements _i50.ActiveLocaleProvider {
  @override
  _i11.Locale get activeLocale =>
      (super.noSuchMethod(
            Invocation.getter(#activeLocale),
            returnValue: _FakeLocale_13(this, Invocation.getter(#activeLocale)),
            returnValueForMissingStub: _FakeLocale_13(
              this,
              Invocation.getter(#activeLocale),
            ),
          )
          as _i11.Locale);

  @override
  _i10.Stream<_i11.Locale> observe() =>
      (super.noSuchMethod(
            Invocation.method(#observe, []),
            returnValue: _i10.Stream<_i11.Locale>.empty(),
            returnValueForMissingStub: _i10.Stream<_i11.Locale>.empty(),
          )
          as _i10.Stream<_i11.Locale>);
}

/// A class which mocks [BiometricUnlockManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricUnlockManager extends _i1.Mock implements _i51.BiometricUnlockManager {
  @override
  bool get shouldTriggerUnlock =>
      (super.noSuchMethod(
            Invocation.getter(#shouldTriggerUnlock),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool getAndSetShouldTriggerUnlock({required bool? updatedValue}) =>
      (super.noSuchMethod(
            Invocation.method(#getAndSetShouldTriggerUnlock, [], {
              #updatedValue: updatedValue,
            }),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [SemanticsEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSemanticsEventService extends _i1.Mock implements _i52.SemanticsEventService {
  @override
  _i10.Stream<_i11.SemanticsActionEvent> get actionEventStream =>
      (super.noSuchMethod(
            Invocation.getter(#actionEventStream),
            returnValue: _i10.Stream<_i11.SemanticsActionEvent>.empty(),
            returnValueForMissingStub: _i10.Stream<_i11.SemanticsActionEvent>.empty(),
          )
          as _i10.Stream<_i11.SemanticsActionEvent>);
}

/// A class which mocks [AppEventCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppEventCoordinator extends _i1.Mock implements _i53.AppEventCoordinator {
  @override
  void addListener(_i54.AppEventListener? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i54.AppEventListener? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void onDashboardShown() => super.noSuchMethod(
    Invocation.method(#onDashboardShown, []),
    returnValueForMissingStub: null,
  );

  @override
  void onWalletUnlocked() => super.noSuchMethod(
    Invocation.method(#onWalletUnlocked, []),
    returnValueForMissingStub: null,
  );

  @override
  void onWalletLocked() => super.noSuchMethod(
    Invocation.method(#onWalletLocked, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppEventListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppEventListener extends _i1.Mock implements _i54.AppEventListener {}

/// A class which mocks [AutoLockService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAutoLockService extends _i1.Mock implements _i55.AutoLockService {
  @override
  _i10.Stream<void> get activityStream =>
      (super.noSuchMethod(
            Invocation.getter(#activityStream),
            returnValue: _i10.Stream<void>.empty(),
            returnValueForMissingStub: _i10.Stream<void>.empty(),
          )
          as _i10.Stream<void>);

  @override
  bool get autoLockEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#autoLockEnabled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i10.Stream<bool> get autoLockStream =>
      (super.noSuchMethod(
            Invocation.getter(#autoLockStream),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);

  @override
  void resetIdleTimeout() => super.noSuchMethod(
    Invocation.method(#resetIdleTimeout, []),
    returnValueForMissingStub: null,
  );

  @override
  void setAutoLock({required bool? enabled}) => super.noSuchMethod(
    Invocation.method(#setAutoLock, [], {#enabled: enabled}),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DecodeUriUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecodeUriUseCase extends _i1.Mock implements _i56.DecodeUriUseCase {
  @override
  _i10.Future<_i57.Result<_i44.NavigationRequest>> invoke(Uri? uri) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [uri]),
            returnValue: _i10.Future<_i57.Result<_i44.NavigationRequest>>.value(
              _i14.dummyValue<_i57.Result<_i44.NavigationRequest>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i44.NavigationRequest>>.value(
              _i14.dummyValue<_i57.Result<_i44.NavigationRequest>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<_i44.NavigationRequest>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [IsWalletInitializedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsWalletInitializedUseCase extends _i1.Mock implements _i58.IsWalletInitializedUseCase {
  @override
  _i10.Future<bool> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [IsWalletInitializedWithPidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsWalletInitializedWithPidUseCase extends _i1.Mock implements _i59.IsWalletInitializedWithPidUseCase {
  @override
  _i10.Future<bool> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ObserveWalletLockedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletLockedUseCase extends _i1.Mock implements _i60.ObserveWalletLockedUseCase {
  @override
  _i10.Stream<bool> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CheckPinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckPinUseCase extends _i1.Mock implements _i61.CheckPinUseCase {
  @override
  _i10.Future<_i57.Result<dynamic>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<dynamic>>.value(
              _i14.dummyValue<_i57.Result<dynamic>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<dynamic>>.value(
              _i14.dummyValue<_i57.Result<dynamic>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<dynamic>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [SetupMockedWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetupMockedWalletUseCase extends _i1.Mock implements _i62.SetupMockedWalletUseCase {
  @override
  _i10.Future<void> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [NetworkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkRepository extends _i1.Mock implements _i63.NetworkRepository {
  @override
  _i10.Future<bool> hasInternet() =>
      (super.noSuchMethod(
            Invocation.method(#hasInternet, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);
}

/// A class which mocks [PerformPreNavigationActionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformPreNavigationActionsUseCase extends _i1.Mock implements _i44.PerformPreNavigationActionsUseCase {
  @override
  _i10.Future<void> invoke(List<_i44.PreNavigationAction>? actions) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [actions]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CheckNavigationPrerequisitesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckNavigationPrerequisitesUseCase extends _i1.Mock implements _i64.CheckNavigationPrerequisitesUseCase {
  @override
  _i10.Future<bool> invoke(List<_i44.NavigationPrerequisite>? prerequisites) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [prerequisites]),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [AcceptOfferedPidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptOfferedPidUseCase extends _i1.Mock implements _i65.AcceptOfferedPidUseCase {
  @override
  _i10.Future<_i57.Result<_i21.TransferState>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<_i21.TransferState>>.value(
              _i14.dummyValue<_i57.Result<_i21.TransferState>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i21.TransferState>>.value(
              _i14.dummyValue<_i57.Result<_i21.TransferState>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<_i21.TransferState>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [AcceptSignAgreementUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptSignAgreementUseCase extends _i1.Mock implements _i66.AcceptSignAgreementUseCase {
  @override
  _i10.Future<_i57.Result<String?>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String?>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [AcceptDisclosureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptDisclosureUseCase extends _i1.Mock implements _i67.AcceptDisclosureUseCase {
  @override
  _i10.Future<_i57.Result<String?>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String?>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [AcceptIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptIssuanceUseCase extends _i1.Mock implements _i68.AcceptIssuanceUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [StartDisclosureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartDisclosureUseCase extends _i1.Mock implements _i69.StartDisclosureUseCase {
  @override
  _i10.Future<_i57.Result<_i24.StartDisclosureResult>> invoke(
    String? disclosureUri, {
    bool? isQrCode = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [disclosureUri], {#isQrCode: isQrCode}),
            returnValue: _i10.Future<_i57.Result<_i24.StartDisclosureResult>>.value(
              _i14.dummyValue<_i57.Result<_i24.StartDisclosureResult>>(
                this,
                Invocation.method(
                  #invoke,
                  [disclosureUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i24.StartDisclosureResult>>.value(
              _i14.dummyValue<_i57.Result<_i24.StartDisclosureResult>>(
                this,
                Invocation.method(
                  #invoke,
                  [disclosureUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
          )
          as _i10.Future<_i57.Result<_i24.StartDisclosureResult>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CancelDisclosureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelDisclosureUseCase extends _i1.Mock implements _i70.CancelDisclosureUseCase {
  @override
  _i10.Future<_i57.Result<String?>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String?>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ObserveWalletCardsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletCardsUseCase extends _i1.Mock implements _i71.ObserveWalletCardsUseCase {
  @override
  _i10.Stream<List<_i9.WalletCard>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Stream<List<_i9.WalletCard>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i9.WalletCard>>.empty(),
          )
          as _i10.Stream<List<_i9.WalletCard>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ObserveRecentWalletEventsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveRecentWalletEventsUseCase extends _i1.Mock implements _i72.ObserveRecentWalletEventsUseCase {
  @override
  _i10.Stream<List<_i31.WalletEvent>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Stream<List<_i31.WalletEvent>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i31.WalletEvent>>.empty(),
          )
          as _i10.Stream<List<_i31.WalletEvent>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ObserveShowTourBannerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveShowTourBannerUseCase extends _i1.Mock implements _i73.ObserveShowTourBannerUseCase {
  @override
  _i10.Stream<bool> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetMostRecentWalletEventUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMostRecentWalletEventUseCase extends _i1.Mock implements _i74.GetMostRecentWalletEventUseCase {
  @override
  _i10.Future<_i31.WalletEvent?> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i31.WalletEvent?>.value(),
            returnValueForMissingStub: _i10.Future<_i31.WalletEvent?>.value(),
          )
          as _i10.Future<_i31.WalletEvent?>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CheckIsValidPinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckIsValidPinUseCase extends _i1.Mock implements _i75.CheckIsValidPinUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CreateWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateWalletUseCase extends _i1.Mock implements _i76.CreateWalletUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [UnlockWalletWithPinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnlockWalletWithPinUseCase extends _i1.Mock implements _i77.UnlockWalletWithPinUseCase {
  @override
  _i10.Future<_i57.Result<String?>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String?>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ResetWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetWalletUseCase extends _i1.Mock implements _i78.ResetWalletUseCase {
  @override
  _i10.Future<void> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ObserveWalletCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletCardUseCase extends _i1.Mock implements _i79.ObserveWalletCardUseCase {
  @override
  _i10.Stream<_i9.WalletCard> invoke(String? cardId) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [cardId]),
            returnValue: _i10.Stream<_i9.WalletCard>.empty(),
            returnValueForMissingStub: _i10.Stream<_i9.WalletCard>.empty(),
          )
          as _i10.Stream<_i9.WalletCard>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetWalletCardsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletCardsUseCase extends _i1.Mock implements _i80.GetWalletCardsUseCase {
  @override
  _i10.Future<_i57.Result<List<_i9.WalletCard>>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<List<_i9.WalletCard>>>.value(
              _i14.dummyValue<_i57.Result<List<_i9.WalletCard>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<List<_i9.WalletCard>>>.value(
              _i14.dummyValue<_i57.Result<List<_i9.WalletCard>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<List<_i9.WalletCard>>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetPidIssuanceUrlUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPidIssuanceUrlUseCase extends _i1.Mock implements _i81.GetPidIssuanceUrlUseCase {
  @override
  _i10.Future<_i57.Result<String>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CancelPidIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelPidIssuanceUseCase extends _i1.Mock implements _i82.CancelPidIssuanceUseCase {
  @override
  _i10.Future<_i57.Result<bool>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<bool>>.value(
              _i14.dummyValue<_i57.Result<bool>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<bool>>.value(
              _i14.dummyValue<_i57.Result<bool>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<bool>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ContinuePidIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockContinuePidIssuanceUseCase extends _i1.Mock implements _i83.ContinuePidIssuanceUseCase {
  @override
  _i10.Future<_i57.Result<List<_i22.Attribute>>> invoke(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [uri]),
            returnValue: _i10.Future<_i57.Result<List<_i22.Attribute>>>.value(
              _i14.dummyValue<_i57.Result<List<_i22.Attribute>>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<List<_i22.Attribute>>>.value(
              _i14.dummyValue<_i57.Result<List<_i22.Attribute>>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<List<_i22.Attribute>>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ObserveWalletCardDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletCardDetailUseCase extends _i1.Mock implements _i84.ObserveWalletCardDetailUseCase {
  @override
  _i10.Stream<_i85.WalletCardDetail> invoke(String? cardId) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [cardId]),
            returnValue: _i10.Stream<_i85.WalletCardDetail>.empty(),
            returnValueForMissingStub: _i10.Stream<_i85.WalletCardDetail>.empty(),
          )
          as _i10.Stream<_i85.WalletCardDetail>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetWalletCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletCardUseCase extends _i1.Mock implements _i86.GetWalletCardUseCase {
  @override
  _i10.Future<_i57.Result<_i9.WalletCard>> invoke(String? attestationId) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [attestationId]),
            returnValue: _i10.Future<_i57.Result<_i9.WalletCard>>.value(
              _i14.dummyValue<_i57.Result<_i9.WalletCard>>(
                this,
                Invocation.method(#invoke, [attestationId]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i9.WalletCard>>.value(
              _i14.dummyValue<_i57.Result<_i9.WalletCard>>(
                this,
                Invocation.method(#invoke, [attestationId]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<_i9.WalletCard>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetWalletEventsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletEventsUseCase extends _i1.Mock implements _i87.GetWalletEventsUseCase {
  @override
  _i10.Future<_i57.Result<List<_i31.WalletEvent>>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<List<_i31.WalletEvent>>>.value(
              _i14.dummyValue<_i57.Result<List<_i31.WalletEvent>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<List<_i31.WalletEvent>>>.value(
              _i14.dummyValue<_i57.Result<List<_i31.WalletEvent>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<List<_i31.WalletEvent>>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetWalletEventsForCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletEventsForCardUseCase extends _i1.Mock implements _i88.GetWalletEventsForCardUseCase {
  @override
  _i10.Future<_i57.Result<List<_i31.WalletEvent>>> invoke(
    String? attestationId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [attestationId]),
            returnValue: _i10.Future<_i57.Result<List<_i31.WalletEvent>>>.value(
              _i14.dummyValue<_i57.Result<List<_i31.WalletEvent>>>(
                this,
                Invocation.method(#invoke, [attestationId]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<List<_i31.WalletEvent>>>.value(
              _i14.dummyValue<_i57.Result<List<_i31.WalletEvent>>>(
                this,
                Invocation.method(#invoke, [attestationId]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<List<_i31.WalletEvent>>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [StartSignUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartSignUseCase extends _i1.Mock implements _i89.StartSignUseCase {
  @override
  _i10.Future<_i57.Result<_i90.StartSignResult>> invoke(String? signUri) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [signUri]),
            returnValue: _i10.Future<_i57.Result<_i90.StartSignResult>>.value(
              _i14.dummyValue<_i57.Result<_i90.StartSignResult>>(
                this,
                Invocation.method(#invoke, [signUri]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i90.StartSignResult>>.value(
              _i14.dummyValue<_i57.Result<_i90.StartSignResult>>(
                this,
                Invocation.method(#invoke, [signUri]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<_i90.StartSignResult>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [RejectSignAgreementUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRejectSignAgreementUseCase extends _i1.Mock implements _i91.RejectSignAgreementUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [StartIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartIssuanceUseCase extends _i1.Mock implements _i92.StartIssuanceUseCase {
  @override
  _i10.Future<_i57.Result<_i24.StartDisclosureResult>> invoke(
    String? issuanceUri, {
    bool? isQrCode = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [issuanceUri], {#isQrCode: isQrCode}),
            returnValue: _i10.Future<_i57.Result<_i24.StartDisclosureResult>>.value(
              _i14.dummyValue<_i57.Result<_i24.StartDisclosureResult>>(
                this,
                Invocation.method(
                  #invoke,
                  [issuanceUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i24.StartDisclosureResult>>.value(
              _i14.dummyValue<_i57.Result<_i24.StartDisclosureResult>>(
                this,
                Invocation.method(
                  #invoke,
                  [issuanceUri],
                  {#isQrCode: isQrCode},
                ),
              ),
            ),
          )
          as _i10.Future<_i57.Result<_i24.StartDisclosureResult>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CancelIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelIssuanceUseCase extends _i1.Mock implements _i93.CancelIssuanceUseCase {
  @override
  _i10.Future<_i57.Result<String?>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String?>>.value(
              _i14.dummyValue<_i57.Result<String?>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String?>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [LockWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLockWalletUseCase extends _i1.Mock implements _i94.LockWalletUseCase {
  @override
  _i10.Future<void> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [DiscloseForIssuanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscloseForIssuanceUseCase extends _i1.Mock implements _i95.DiscloseForIssuanceUseCase {
  @override
  _i10.Future<_i57.Result<List<_i9.WalletCard>>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<List<_i9.WalletCard>>>.value(
              _i14.dummyValue<_i57.Result<List<_i9.WalletCard>>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<List<_i9.WalletCard>>>.value(
              _i14.dummyValue<_i57.Result<List<_i9.WalletCard>>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<List<_i9.WalletCard>>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [DecodeQrUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecodeQrUseCase extends _i1.Mock implements _i96.DecodeQrUseCase {
  @override
  _i10.Future<_i57.Result<_i44.NavigationRequest>> invoke(
    _i97.Barcode? barcode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [barcode]),
            returnValue: _i10.Future<_i57.Result<_i44.NavigationRequest>>.value(
              _i14.dummyValue<_i57.Result<_i44.NavigationRequest>>(
                this,
                Invocation.method(#invoke, [barcode]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i44.NavigationRequest>>.value(
              _i14.dummyValue<_i57.Result<_i44.NavigationRequest>>(
                this,
                Invocation.method(#invoke, [barcode]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<_i44.NavigationRequest>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CheckHasPermissionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckHasPermissionUseCase extends _i1.Mock implements _i12.CheckHasPermissionUseCase {
  @override
  _i10.Future<_i12.PermissionCheckResult> invoke(_i98.Permission? permission) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [permission]),
            returnValue: _i10.Future<_i12.PermissionCheckResult>.value(
              _FakePermissionCheckResult_14(
                this,
                Invocation.method(#invoke, [permission]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i12.PermissionCheckResult>.value(
              _FakePermissionCheckResult_14(
                this,
                Invocation.method(#invoke, [permission]),
              ),
            ),
          )
          as _i10.Future<_i12.PermissionCheckResult>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ChangePinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePinUseCase extends _i1.Mock implements _i99.ChangePinUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? oldPin, String? newPin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [oldPin, newPin]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [oldPin, newPin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [oldPin, newPin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetAvailableBiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAvailableBiometricsUseCase extends _i1.Mock implements _i100.GetAvailableBiometricsUseCase {
  @override
  _i10.Future<_i101.Biometrics> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i101.Biometrics>.value(
              _i101.Biometrics.face,
            ),
            returnValueForMissingStub: _i10.Future<_i101.Biometrics>.value(
              _i101.Biometrics.face,
            ),
          )
          as _i10.Future<_i101.Biometrics>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [SetBiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetBiometricsUseCase extends _i1.Mock implements _i102.SetBiometricsUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke({
    required bool? enable,
    required bool? authenticateBeforeEnabling,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {
              #enable: enable,
              #authenticateBeforeEnabling: authenticateBeforeEnabling,
            }),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [], {
                  #enable: enable,
                  #authenticateBeforeEnabling: authenticateBeforeEnabling,
                }),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [], {
                  #enable: enable,
                  #authenticateBeforeEnabling: authenticateBeforeEnabling,
                }),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetSupportedBiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSupportedBiometricsUseCase extends _i1.Mock implements _i103.GetSupportedBiometricsUseCase {
  @override
  _i10.Future<_i101.Biometrics> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i101.Biometrics>.value(
              _i101.Biometrics.face,
            ),
            returnValueForMissingStub: _i10.Future<_i101.Biometrics>.value(
              _i101.Biometrics.face,
            ),
          )
          as _i10.Future<_i101.Biometrics>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [IsBiometricLoginEnabledUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsBiometricLoginEnabledUseCase extends _i1.Mock implements _i104.IsBiometricLoginEnabledUseCase {
  @override
  _i10.Future<bool> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ObserveVersionStateUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveVersionStateUsecase extends _i1.Mock implements _i105.ObserveVersionStateUsecase {
  @override
  _i10.Stream<_i37.VersionState> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Stream<_i37.VersionState>.empty(),
            returnValueForMissingStub: _i10.Stream<_i37.VersionState>.empty(),
          )
          as _i10.Stream<_i37.VersionState>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetVersionStringUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVersionStringUseCase extends _i1.Mock implements _i106.GetVersionStringUseCase {
  @override
  _i10.Future<_i57.Result<String>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [RequestBiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestBiometricsUseCase extends _i1.Mock implements _i107.RequestBiometricsUseCase {
  @override
  _i10.Future<_i57.Result<_i108.BiometricAuthenticationResult>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<_i108.BiometricAuthenticationResult>>.value(
              _i14.dummyValue<_i57.Result<_i108.BiometricAuthenticationResult>>(this, Invocation.method(#invoke, [])),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<_i108.BiometricAuthenticationResult>>.value(
              _i14.dummyValue<_i57.Result<_i108.BiometricAuthenticationResult>>(this, Invocation.method(#invoke, [])),
            ),
          )
          as _i10.Future<_i57.Result<_i108.BiometricAuthenticationResult>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [TourOverviewViewedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTourOverviewViewedUseCase extends _i1.Mock implements _i109.TourOverviewViewedUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [FetchTourVideosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchTourVideosUseCase extends _i1.Mock implements _i110.FetchTourVideosUseCase {
  @override
  _i10.Future<_i57.Result<List<_i111.TourVideo>>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<List<_i111.TourVideo>>>.value(
              _i14.dummyValue<_i57.Result<List<_i111.TourVideo>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<List<_i111.TourVideo>>>.value(
              _i14.dummyValue<_i57.Result<List<_i111.TourVideo>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<List<_i111.TourVideo>>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetPidRenewalUrlUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPidRenewalUrlUseCase extends _i1.Mock implements _i112.GetPidRenewalUrlUseCase {
  @override
  _i10.Future<_i57.Result<String>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetPidCardsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPidCardsUseCase extends _i1.Mock implements _i113.GetPidCardsUseCase {
  @override
  _i10.Future<_i57.Result<List<_i9.WalletCard>>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<List<_i9.WalletCard>>>.value(
              _i14.dummyValue<_i57.Result<List<_i9.WalletCard>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<List<_i9.WalletCard>>>.value(
              _i14.dummyValue<_i57.Result<List<_i9.WalletCard>>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<List<_i9.WalletCard>>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [StartWalletTransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartWalletTransferUseCase extends _i1.Mock implements _i114.StartWalletTransferUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CancelWalletTransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelWalletTransferUseCase extends _i1.Mock implements _i115.CancelWalletTransferUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [AcknowledgeWalletTransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcknowledgeWalletTransferUseCase extends _i1.Mock implements _i116.AcknowledgeWalletTransferUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [uri]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetWalletTransferStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletTransferStatusUseCase extends _i1.Mock implements _i117.GetWalletTransferStatusUseCase {
  @override
  _i10.Stream<_i41.WalletTransferStatus> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Stream<_i41.WalletTransferStatus>.empty(),
            returnValueForMissingStub: _i10.Stream<_i41.WalletTransferStatus>.empty(),
          )
          as _i10.Stream<_i41.WalletTransferStatus>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [InitWalletTransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitWalletTransferUseCase extends _i1.Mock implements _i118.InitWalletTransferUseCase {
  @override
  _i10.Future<_i57.Result<String>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [SkipWalletTransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSkipWalletTransferUseCase extends _i1.Mock implements _i119.SkipWalletTransferUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CreatePinRecoveryRedirectUriUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreatePinRecoveryRedirectUriUseCase extends _i1.Mock implements _i120.CreatePinRecoveryRedirectUriUseCase {
  @override
  _i10.Future<_i57.Result<String>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<String>>.value(
              _i14.dummyValue<_i57.Result<String>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<String>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ContinuePinRecoveryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockContinuePinRecoveryUseCase extends _i1.Mock implements _i121.ContinuePinRecoveryUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [uri]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [uri]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CancelPinRecoveryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelPinRecoveryUseCase extends _i1.Mock implements _i122.CancelPinRecoveryUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [CompletePinRecoveryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompletePinRecoveryUseCase extends _i1.Mock implements _i123.CompletePinRecoveryUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [pin]),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, [pin]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [GetWalletStateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletStateUseCase extends _i1.Mock implements _i124.GetWalletStateUseCase {
  @override
  _i10.Future<_i27.WalletState> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i27.WalletState>.value(
              _i14.dummyValue<_i27.WalletState>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i27.WalletState>.value(
              _i14.dummyValue<_i27.WalletState>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i27.WalletState>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [ReceiveWalletTransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReceiveWalletTransferUseCase extends _i1.Mock implements _i125.ReceiveWalletTransferUseCase {
  @override
  _i10.Future<_i57.Result<void>> invoke() =>
      (super.noSuchMethod(
            Invocation.method(#invoke, []),
            returnValue: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<void>>.value(
              _i14.dummyValue<_i57.Result<void>>(
                this,
                Invocation.method(#invoke, []),
              ),
            ),
          )
          as _i10.Future<_i57.Result<void>>);

  @override
  _i10.Future<_i57.Result<T>> tryCatch<T>(
    _i10.Future<T> Function()? future,
    String? errorDescription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryCatch, [future, errorDescription]),
            returnValue: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i57.Result<T>>.value(
              _i14.dummyValue<_i57.Result<T>>(
                this,
                Invocation.method(#tryCatch, [future, errorDescription]),
              ),
            ),
          )
          as _i10.Future<_i57.Result<T>>);
}

/// A class which mocks [WalletCoreApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletCoreApi extends _i1.Mock implements _i26.WalletCoreApi {
  @override
  _i10.Future<_i26.AcceptDisclosureResult> crateApiFullAcceptDisclosure({
    required List<int>? selectedIndices,
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullAcceptDisclosure, [], {
              #selectedIndices: selectedIndices,
              #pin: pin,
            }),
            returnValue: _i10.Future<_i26.AcceptDisclosureResult>.value(
              _i14.dummyValue<_i26.AcceptDisclosureResult>(
                this,
                Invocation.method(#crateApiFullAcceptDisclosure, [], {
                  #selectedIndices: selectedIndices,
                  #pin: pin,
                }),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.AcceptDisclosureResult>.value(
              _i14.dummyValue<_i26.AcceptDisclosureResult>(
                this,
                Invocation.method(#crateApiFullAcceptDisclosure, [], {
                  #selectedIndices: selectedIndices,
                  #pin: pin,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.AcceptDisclosureResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> crateApiFullAcceptIssuance({
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullAcceptIssuance, [], {#pin: pin}),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullAcceptIssuance, [], {#pin: pin}),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullAcceptIssuance, [], {
                  #pin: pin,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.PidIssuanceResult> crateApiFullAcceptPidIssuance({
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullAcceptPidIssuance, [], {#pin: pin}),
            returnValue: _i10.Future<_i26.PidIssuanceResult>.value(
              _i14.dummyValue<_i26.PidIssuanceResult>(
                this,
                Invocation.method(#crateApiFullAcceptPidIssuance, [], {
                  #pin: pin,
                }),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.PidIssuanceResult>.value(
              _i14.dummyValue<_i26.PidIssuanceResult>(
                this,
                Invocation.method(#crateApiFullAcceptPidIssuance, [], {
                  #pin: pin,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.PidIssuanceResult>);

  @override
  _i10.Future<void> crateApiFullAcknowledgeWalletTransfer({
    required String? uri,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullAcknowledgeWalletTransfer, [], {
              #uri: uri,
            }),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<String?> crateApiFullCancelDisclosure() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCancelDisclosure, []),
            returnValue: _i10.Future<String?>.value(),
            returnValueForMissingStub: _i10.Future<String?>.value(),
          )
          as _i10.Future<String?>);

  @override
  _i10.Future<void> crateApiFullCancelIssuance() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCancelIssuance, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullCancelPinRecovery() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCancelPinRecovery, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullCancelWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCancelWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletInstructionResult> crateApiFullChangePin({
    required String? oldPin,
    required String? newPin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullChangePin, [], {
              #oldPin: oldPin,
              #newPin: newPin,
            }),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullChangePin, [], {
                  #oldPin: oldPin,
                  #newPin: newPin,
                }),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullChangePin, [], {
                  #oldPin: oldPin,
                  #newPin: newPin,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> crateApiFullCheckPin({
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCheckPin, [], {#pin: pin}),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullCheckPin, [], {#pin: pin}),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullCheckPin, [], {#pin: pin}),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<void> crateApiFullClearAttestationsStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullClearAttestationsStream, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullClearConfigurationStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullClearConfigurationStream, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullClearLockStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullClearLockStream, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullClearRecentHistoryStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullClearRecentHistoryStream, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullClearVersionStateStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullClearVersionStateStream, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullCompletePinRecovery({required String? pin}) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCompletePinRecovery, [], {
              #pin: pin,
            }),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.WalletInstructionResult> crateApiFullContinueChangePin({
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullContinueChangePin, [], {#pin: pin}),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullContinueChangePin, [], {
                  #pin: pin,
                }),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullContinueChangePin, [], {
                  #pin: pin,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.DisclosureBasedIssuanceResult> crateApiFullContinueDisclosureBasedIssuance({
    required List<int>? selectedIndices,
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #crateApiFullContinueDisclosureBasedIssuance,
              [],
              {#selectedIndices: selectedIndices, #pin: pin},
            ),
            returnValue: _i10.Future<_i26.DisclosureBasedIssuanceResult>.value(
              _i14.dummyValue<_i26.DisclosureBasedIssuanceResult>(
                this,
                Invocation.method(
                  #crateApiFullContinueDisclosureBasedIssuance,
                  [],
                  {#selectedIndices: selectedIndices, #pin: pin},
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.DisclosureBasedIssuanceResult>.value(
              _i14.dummyValue<_i26.DisclosureBasedIssuanceResult>(
                this,
                Invocation.method(
                  #crateApiFullContinueDisclosureBasedIssuance,
                  [],
                  {#selectedIndices: selectedIndices, #pin: pin},
                ),
              ),
            ),
          )
          as _i10.Future<_i26.DisclosureBasedIssuanceResult>);

  @override
  _i10.Future<List<_i26.AttestationPresentation>> crateApiFullContinuePidIssuance({required String? uri}) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullContinuePidIssuance, [], {
              #uri: uri,
            }),
            returnValue: _i10.Future<List<_i26.AttestationPresentation>>.value(
              <_i26.AttestationPresentation>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i26.AttestationPresentation>>.value(
              <_i26.AttestationPresentation>[],
            ),
          )
          as _i10.Future<List<_i26.AttestationPresentation>>);

  @override
  _i10.Future<void> crateApiFullContinuePinRecovery({required String? uri}) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullContinuePinRecovery, [], {
              #uri: uri,
            }),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<String> crateApiFullCreatePidIssuanceRedirectUri() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCreatePidIssuanceRedirectUri, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(
                  #crateApiFullCreatePidIssuanceRedirectUri,
                  [],
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(
                  #crateApiFullCreatePidIssuanceRedirectUri,
                  [],
                ),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<String> crateApiFullCreatePidRenewalRedirectUri() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCreatePidRenewalRedirectUri, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#crateApiFullCreatePidRenewalRedirectUri, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#crateApiFullCreatePidRenewalRedirectUri, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<String> crateApiFullCreatePinRecoveryRedirectUri() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullCreatePinRecoveryRedirectUri, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(
                  #crateApiFullCreatePinRecoveryRedirectUri,
                  [],
                ),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(
                  #crateApiFullCreatePinRecoveryRedirectUri,
                  [],
                ),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<List<_i26.WalletEvent>> crateApiFullGetHistory() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullGetHistory, []),
            returnValue: _i10.Future<List<_i26.WalletEvent>>.value(
              <_i26.WalletEvent>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i26.WalletEvent>>.value(<_i26.WalletEvent>[]),
          )
          as _i10.Future<List<_i26.WalletEvent>>);

  @override
  _i10.Future<List<_i26.WalletEvent>> crateApiFullGetHistoryForCard({
    required String? attestationId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullGetHistoryForCard, [], {
              #attestationId: attestationId,
            }),
            returnValue: _i10.Future<List<_i26.WalletEvent>>.value(
              <_i26.WalletEvent>[],
            ),
            returnValueForMissingStub: _i10.Future<List<_i26.WalletEvent>>.value(<_i26.WalletEvent>[]),
          )
          as _i10.Future<List<_i26.WalletEvent>>);

  @override
  _i10.Future<String> crateApiFullGetVersionString() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullGetVersionString, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#crateApiFullGetVersionString, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#crateApiFullGetVersionString, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<_i26.WalletState> crateApiFullGetWalletState() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullGetWalletState, []),
            returnValue: _i10.Future<_i26.WalletState>.value(
              _i14.dummyValue<_i26.WalletState>(
                this,
                Invocation.method(#crateApiFullGetWalletState, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletState>.value(
              _i14.dummyValue<_i26.WalletState>(
                this,
                Invocation.method(#crateApiFullGetWalletState, []),
              ),
            ),
          )
          as _i10.Future<_i26.WalletState>);

  @override
  _i10.Future<_i26.TransferSessionState> crateApiFullGetWalletTransferState() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullGetWalletTransferState, []),
            returnValue: _i10.Future<_i26.TransferSessionState>.value(
              _i26.TransferSessionState.Created,
            ),
            returnValueForMissingStub: _i10.Future<_i26.TransferSessionState>.value(
              _i26.TransferSessionState.Created,
            ),
          )
          as _i10.Future<_i26.TransferSessionState>);

  @override
  _i10.Future<bool> crateApiFullHasActiveDisclosureSession() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullHasActiveDisclosureSession, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<bool> crateApiFullHasActiveIssuanceSession() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullHasActiveIssuanceSession, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<bool> crateApiFullHasRegistration() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullHasRegistration, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i26.IdentifyUriResult> crateApiFullIdentifyUri({
    required String? uri,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullIdentifyUri, [], {#uri: uri}),
            returnValue: _i10.Future<_i26.IdentifyUriResult>.value(
              _i26.IdentifyUriResult.PidIssuance,
            ),
            returnValueForMissingStub: _i10.Future<_i26.IdentifyUriResult>.value(
              _i26.IdentifyUriResult.PidIssuance,
            ),
          )
          as _i10.Future<_i26.IdentifyUriResult>);

  @override
  _i10.Future<void> crateApiFullInit() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullInit, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<String> crateApiFullInitWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullInitWalletTransfer, []),
            returnValue: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#crateApiFullInitWalletTransfer, []),
              ),
            ),
            returnValueForMissingStub: _i10.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#crateApiFullInitWalletTransfer, []),
              ),
            ),
          )
          as _i10.Future<String>);

  @override
  _i10.Future<bool> crateApiFullIsBiometricUnlockEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullIsBiometricUnlockEnabled, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<bool> crateApiFullIsInitialized() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullIsInitialized, []),
            returnValue: _i10.Future<bool>.value(false),
            returnValueForMissingStub: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<_i26.PinValidationResult> crateApiFullIsValidPin({
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullIsValidPin, [], {#pin: pin}),
            returnValue: _i10.Future<_i26.PinValidationResult>.value(
              _i26.PinValidationResult.Ok,
            ),
            returnValueForMissingStub: _i10.Future<_i26.PinValidationResult>.value(
              _i26.PinValidationResult.Ok,
            ),
          )
          as _i10.Future<_i26.PinValidationResult>);

  @override
  _i10.Future<void> crateApiFullLockWallet() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullLockWallet, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullReceiveWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullReceiveWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullRegister({required String? pin}) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullRegister, [], {#pin: pin}),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> crateApiFullResetWallet() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullResetWallet, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Stream<List<_i26.AttestationPresentation>> crateApiFullSetAttestationsStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullSetAttestationsStream, []),
            returnValue: _i10.Stream<List<_i26.AttestationPresentation>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i26.AttestationPresentation>>.empty(),
          )
          as _i10.Stream<List<_i26.AttestationPresentation>>);

  @override
  _i10.Future<void> crateApiFullSetBiometricUnlock({required bool? enable}) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullSetBiometricUnlock, [], {
              #enable: enable,
            }),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Stream<_i26.FlutterConfiguration> crateApiFullSetConfigurationStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullSetConfigurationStream, []),
            returnValue: _i10.Stream<_i26.FlutterConfiguration>.empty(),
            returnValueForMissingStub: _i10.Stream<_i26.FlutterConfiguration>.empty(),
          )
          as _i10.Stream<_i26.FlutterConfiguration>);

  @override
  _i10.Stream<bool> crateApiFullSetLockStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullSetLockStream, []),
            returnValue: _i10.Stream<bool>.empty(),
            returnValueForMissingStub: _i10.Stream<bool>.empty(),
          )
          as _i10.Stream<bool>);

  @override
  _i10.Stream<List<_i26.WalletEvent>> crateApiFullSetRecentHistoryStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullSetRecentHistoryStream, []),
            returnValue: _i10.Stream<List<_i26.WalletEvent>>.empty(),
            returnValueForMissingStub: _i10.Stream<List<_i26.WalletEvent>>.empty(),
          )
          as _i10.Stream<List<_i26.WalletEvent>>);

  @override
  _i10.Stream<_i26.FlutterVersionState> crateApiFullSetVersionStateStream() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullSetVersionStateStream, []),
            returnValue: _i10.Stream<_i26.FlutterVersionState>.empty(),
            returnValueForMissingStub: _i10.Stream<_i26.FlutterVersionState>.empty(),
          )
          as _i10.Stream<_i26.FlutterVersionState>);

  @override
  _i10.Future<void> crateApiFullSkipWalletTransfer() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullSkipWalletTransfer, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i26.StartDisclosureResult> crateApiFullStartDisclosure({
    required String? uri,
    required bool? isQrCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullStartDisclosure, [], {
              #uri: uri,
              #isQrCode: isQrCode,
            }),
            returnValue: _i10.Future<_i26.StartDisclosureResult>.value(
              _i14.dummyValue<_i26.StartDisclosureResult>(
                this,
                Invocation.method(#crateApiFullStartDisclosure, [], {
                  #uri: uri,
                  #isQrCode: isQrCode,
                }),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.StartDisclosureResult>.value(
              _i14.dummyValue<_i26.StartDisclosureResult>(
                this,
                Invocation.method(#crateApiFullStartDisclosure, [], {
                  #uri: uri,
                  #isQrCode: isQrCode,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.StartDisclosureResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> crateApiFullTransferWallet({
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullTransferWallet, [], {#pin: pin}),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullTransferWallet, [], {#pin: pin}),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullTransferWallet, [], {
                  #pin: pin,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<_i26.WalletInstructionResult> crateApiFullUnlockWallet({
    required String? pin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullUnlockWallet, [], {#pin: pin}),
            returnValue: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullUnlockWallet, [], {#pin: pin}),
              ),
            ),
            returnValueForMissingStub: _i10.Future<_i26.WalletInstructionResult>.value(
              _i14.dummyValue<_i26.WalletInstructionResult>(
                this,
                Invocation.method(#crateApiFullUnlockWallet, [], {
                  #pin: pin,
                }),
              ),
            ),
          )
          as _i10.Future<_i26.WalletInstructionResult>);

  @override
  _i10.Future<void> crateApiFullUnlockWalletWithBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#crateApiFullUnlockWalletWithBiometrics, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);
}
