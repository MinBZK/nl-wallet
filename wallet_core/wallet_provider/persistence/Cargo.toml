[package]
name = "wallet_provider_persistence"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[lib]
doctest = false

[[test]]
name = "wallet_user"
path = "tests/wallet_user.rs"
required-features = ["db_test"]

[[test]]
name = "wallet_user_keys"
path = "tests/wallet_user_key.rs"
required-features = ["db_test"]

[features]
# Include mock implementations and constructors for testing
mock = ["mockall", "dep:rand_core"]
# Include and run test that depend on an external PostgreSQL database
db_test = [
    "dep:ctor",
    "dep:rand_core",
    "dep:thiserror",
    "tokio/macros",
    "dep:tracing-subscriber",
    "sea-orm/debug-print",
    "wallet_provider_domain/mock",
]

[dependencies]
base64.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
ctor = { workspace = true, optional = true }
p256 = { workspace = true, features = ["ecdsa", "pkcs8", "std"] }
rand_core = { workspace = true, optional = true }
sea-orm = { workspace = true, features = [
    "macros",
    "runtime-tokio-rustls",
    "sqlx-postgres",
    "with-chrono",
    "with-uuid",
] }
thiserror = { workspace = true, optional = true }
tokio = { workspace = true, features = ["parking_lot", "rt"] }
tracing.workspace = true
tracing-subscriber = { workspace = true, optional = true, features = [
    "std",
    "fmt",
    "ansi",
    "tracing-log",
    "parking_lot",
] }
uuid.workspace = true

mockall = { workspace = true, optional = true }

apple_app_attest.path = "../../apple_app_attest"
hsm.path = "../../hsm"
wallet_provider_database_settings.path = "../database_settings"
wallet_provider_domain.path = "../domain"
wallet_common.path = "../../wallet_common"

[dev-dependencies]
assert_matches.workspace = true
