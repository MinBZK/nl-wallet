//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "wallet_user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub wallet_id: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub hw_pubkey_der: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub encrypted_pin_pubkey_sec1: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub pin_pubkey_iv: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub encrypted_previous_pin_pubkey_sec1: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub previous_pin_pubkey_iv: Option<Vec<u8>>,
    pub instruction_sequence_number: i32,
    pub pin_entries: i16,
    pub last_unsuccessful_pin: Option<DateTimeWithTimeZone>,
    pub state: String,
    pub attestation_date_time: DateTimeWithTimeZone,
    #[sea_orm(unique)]
    pub apple_attestation_id: Option<Uuid>,
    #[sea_orm(unique)]
    pub android_attestation_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::wallet_user_android_attestation::Entity",
        from = "Column::AndroidAttestationId",
        to = "super::wallet_user_android_attestation::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WalletUserAndroidAttestation,
    #[sea_orm(
        belongs_to = "super::wallet_user_apple_attestation::Entity",
        from = "Column::AppleAttestationId",
        to = "super::wallet_user_apple_attestation::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WalletUserAppleAttestation,
    #[sea_orm(has_one = "super::wallet_user_instruction_challenge::Entity")]
    WalletUserInstructionChallenge,
    #[sea_orm(has_many = "super::wallet_user_key::Entity")]
    WalletUserKey,
}

impl Related<super::wallet_user_android_attestation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletUserAndroidAttestation.def()
    }
}

impl Related<super::wallet_user_apple_attestation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletUserAppleAttestation.def()
    }
}

impl Related<super::wallet_user_instruction_challenge::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletUserInstructionChallenge.def()
    }
}

impl Related<super::wallet_user_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletUserKey.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
