// hw_keystore module

// Error type returned from native code
[Error]
interface KeyStoreError {
    KeyError(string reason); // All exceptions in native code are represented by this error
    BridgingError(string reason); // Reserved for UnexpectedUniFFICallbackError
};

// This bridge grants access to EC keys that are securely stored in hardware.
// The identifier represents a string uniquely identifying a particular EC key pair.
// These keys will lazily be created on first use.
// Note that the namespace for the identifiers is completely separate from that of EncryptionKeyBridge.
[Trait, WithForeign]
interface SigningKeyBridge {
    [Throws=KeyStoreError]
    sequence<u8> public_key(string identifier); // The public key in DER encoding

    [Throws=KeyStoreError]
    sequence<u8> sign(string identifier, sequence<u8> payload); // Returns a DER encoded signature

    [Throws=KeyStoreError]
    void delete(string identifier);
};

// This bridge grants access to encryption keys that are securely stored in hardware.
// The identifier represents a string uniquely identifying a particular key.
// These keys will lazily be created on first use.
// The actual implementations on Android and iOS are slightly different,
// with Android using an actual AES key, while iOS uses ECIES for encryption and decryption.
// Note that the namespace for the identifiers is completely separate from that of SigningKeyBridge.
[Trait, WithForeign]
interface EncryptionKeyBridge {
    [Throws=KeyStoreError]
    sequence<u8> encrypt(string identifier, sequence<u8> payload); // Returns encrypted payload

    [Throws=KeyStoreError]
    sequence<u8> decrypt(string identifier, sequence<u8> payload); // Returns decrypted payload

    [Throws=KeyStoreError]
    void delete(string identifier);
};

// attested_key module

/// The error type used for all methods on AttestedKeyBridge.
[Error]
interface AttestedKeyError {
    /// Key and app attestation is not supported on this device.
    AttestationNotSupported();
    /// The method called on the bridge is not implemented for this platform.
    MethodUnimplemented();
    /// An Apple or Google server could not be reached. If this occurs during
    /// attestation, the generated identifier should be retained for later retries.
    ServerUnreachable(string details);
    /// Any other error that can occur.
    Other(string reason);
};

/// Return type for `key_type()`.
enum AttestedKeyType {
    "Apple",
    "Google",
};

/// Return type for `attest()`, contains attestation data specific to the platform.
[Enum]
interface AttestationData {
    Apple(sequence<u8> attestation_data);
    Google(sequence<sequence<u8>> certificate_chain, string app_attestation_token);
};

/// Combines a collection of methods that unify working with attested keys on both
/// iOS and Android. App attestation for Android is combined with key attestation.
[Trait, WithForeign]
interface AttestedKeyBridge {
    /// Simply returns the platform we are on.
    AttestedKeyType key_type();

    /// Generate an identifier for the attested key. On iOS this actually creates a key,
    /// while on Android this simply generates a unique random string.
    [Async, Throws=AttestedKeyError]
    string generate();

    /// Actually perform key and app attestation, with a result that differs depending on the platform.
    /// Note the use of "IdentifierAttestedKeyError" to convey error data.
    [Async, Throws=AttestedKeyError]
    AttestationData attest(string identifier, sequence<u8> challenge, u64 google_cloud_project_id);

    /// Sign an arbitrary payload. The result is a DER encoded ECDSA signature on Android,
    /// while on iOS this produces proprietary binary assertion data.
    [Async, Throws=AttestedKeyError]
    sequence<u8> sign(string identifier, sequence<u8> payload);

    /// The public key in DER format. This will return an error on iOS, as retrieving
    /// the public key outside of the initial attestation is not supported.
    [Async, Throws=AttestedKeyError]
    sequence<u8> public_key(string identifier);

    /// Delete the key with the specified identifier. This will return an error
    /// on iOS, since it does not support attested key deletion.
    [Async, Throws=AttestedKeyError]
    void delete(string identifier);
};

// utils module

[Error]
interface UtilitiesError {
    PlatformError(string reason); // All exceptions in native code are represented by this error
    BridgingError(string reason); // Reserved for UnexpectedUniFFICallbackError
};

[Trait, WithForeign]
interface UtilitiesBridge {
    [Throws=UtilitiesError]
    string get_storage_path();
};

// all modules

namespace platform_support {
    // Initialization function, this MUST be called by native code
    // so that Rust is able to use the bridge callbacks
    void init_platform_support(
        SigningKeyBridge signing_key,
        EncryptionKeyBridge encryption_key,
        AttestedKeyBridge attested_key,
        UtilitiesBridge utils
    );
};
