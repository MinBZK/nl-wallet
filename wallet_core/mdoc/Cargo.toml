[package]
name = "mdoc"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[features]
# Include code for generating certificates and keys
generate = ["dep:rcgen"]
# Include examples from the ISO specification
examples = []
# Include miscellaneous test utilities
test = ["dep:assert_matches", "dep:rstest", "dep:regex", "generate", "mock", "sd_jwt/example_constructors"]
# Include mock implementations and constructors for testing
mock = []
# Include example based constructors to several types for testing
mock_example_constructors = [
    "test",                          # TODO PVW-4130: either cleanly separarate test and mock, or merge the two
    "examples",
    "mock",
    "wallet_common/examples",
    "wallet_common/mock_remote_key",
]

[dependencies]
aes-gcm = { workspace = true, features = ["std"] }
base64.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
ciborium.workspace = true
coset = { workspace = true, features = ["std"] }
derive_more = { workspace = true, features = ["as_ref", "debug", "display"] }
futures = { workspace = true, features = ["std", "async-await"] }
hex.workspace = true
indexmap = { workspace = true, features = ["serde"] }
itertools.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdh", "ecdsa", "pem", "serde", "std"] }
rand_core.workspace = true
reqwest = { workspace = true, features = ["json", "rustls-tls-webpki-roots"] }
ring.workspace = true
rustls-pki-types.workspace = true
rustls-webpki.workspace = true
serde = { workspace = true, features = ["derive"] }
serde-aux.workspace = true
serde_bytes = { workspace = true, features = ["std"] }
serde_json.workspace = true
serde_repr.workspace = true
serde_urlencoded.workspace = true
serde_with = { workspace = true, features = ["base64", "chrono", "hex", "indexmap_2"] }
ssri.workspace = true
strum = { workspace = true, features = ["derive"] }
thiserror.workspace = true
time.workspace = true
tokio = { workspace = true, features = ["parking_lot"] }
tracing.workspace = true
url = { workspace = true, features = ["serde"] }
x509-parser = { workspace = true, features = ["verify", "validate"] }
yoke = { workspace = true, features = ["derive"] }

anyhow = { workspace = true, optional = true }
assert_matches = { workspace = true, optional = true }
hex-literal = { workspace = true, optional = true }
rcgen = { workspace = true, optional = true, features = ["x509-parser", "aws_lc_rs"] }
regex = { workspace = true, optional = true }
rstest = { workspace = true, optional = true }

error_category.path = "../error_category"
sd_jwt.path = "../sd_jwt"
wallet_common.path = "../wallet_common"

[dev-dependencies]
anyhow.workspace = true
assert_matches.workspace = true
hex-literal.workspace = true
http.workspace = true
rcgen = { workspace = true, features = ["x509-parser", "aws_lc_rs"] }
regex.workspace = true
rstest.workspace = true
tokio = { workspace = true, features = ["macros"] }

sd_jwt = { path = "../sd_jwt", features = ["example_constructors"] }
wallet_common = { path = "../wallet_common", features = [
    "examples",
    "mock_remote_key",
    "mock_secure_keys",
    "mock_time",
] }
