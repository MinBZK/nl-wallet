[package]
name = "openid4vc"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[[test]]
name = "issuance"
path = "tests/issuance.rs"
required-features = ["integration"]

[[test]]
name = "disclosure"
path = "tests/disclosure.rs"
required-features = ["integration"]

[features]
# Include implementations of the axum IntoResponse trait.
axum = ["dep:axum"]
# Allow the disclosure return URL and its prefix to use http://
allow_insecure_url = []
# Include mock implementations for testing
mock = ["dep:mockall"]
# Include miscellaneous test utilities
test = ["wallet_common/mock_remote_key", "dep:assert_matches", "dep:parking_lot"]
# All features needed to run the integration test
integration = ["mock", "test"]

[dependencies]
base64.workspace = true
biscuit.workspace = true
cfg-if.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
ciborium.workspace = true
dashmap.workspace = true
derive_more = { workspace = true, features = ["as_ref", "display", "from", "from_str", "into", "into_iterator"] }
futures = { workspace = true, features = ["std", "async-await"] }
hex.workspace = true
http.workspace = true
http-serde.workspace = true
indexmap.workspace = true
itertools.workspace = true
josekit = { workspace = true, features = ["vendored"] }
jsonwebtoken.workspace = true
mime.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdsa", "pem", "serde", "std"] }
rand_core.workspace = true
regex.workspace = true
reqwest = { workspace = true, features = ["json"] }
ring.workspace = true
rustls-pki-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
serde_urlencoded.workspace = true
serde_valid.workspace = true
serde_with.workspace = true
strfmt.workspace = true
strum = { workspace = true, features = ["derive"] }
thiserror.workspace = true
tokio.workspace = true
tracing.workspace = true
trait-variant.workspace = true
url = { workspace = true, features = ["serde"] }
x509-parser.workspace = true

assert_matches = { workspace = true, optional = true }
axum = { workspace = true, optional = true, features = ["json"] }
mockall = { workspace = true, optional = true }
parking_lot = { workspace = true, optional = true }

error_category.path = "../error_category"
nl_wallet_mdoc.path = "../mdoc"
sd_jwt.path = "../sd_jwt"
wallet_common.path = "../wallet_common"

[dev-dependencies]
assert_matches.workspace = true
http.workspace = true
mockall.workspace = true
parking_lot.workspace = true
rstest.workspace = true
serde_bytes = { workspace = true, features = ["std"] }
tracing-test.workspace = true
wiremock.workspace = true

nl_wallet_mdoc = { path = "../mdoc", features = ["generate", "test", "mock_example_constructors"] }
sd_jwt = { path = "../sd_jwt", features = ["example_constructors"] }
wallet_common = { path = "../wallet_common", features = [
    "examples",
    "insecure_http_client",
    "mock_remote_key",
    "mock_time",
] }
