[package]
name = "openid4vc_server"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
exclude = ["resources"]

[lints]
workspace = true

[lib]
doctest = false

[features]
default = ["disclosure", "postgres"]
# Include session storage in PostgreSQL
postgres = ["dep:sea-orm", "dep:serde_json", "dep:strum"]
# Enable issuance
issuance = [
    "axum/form",
    "dep:axum-extra",
    "dep:ciborium",
    "dep:futures",
    "dep:indexmap",
    "dep:reqwest",
    "dep:serde_json",
    "dep:serde_urlencoded",
]
# Enable disclosure
disclosure = ["serde_with/hex", "wallet_common/axum", "dep:ring", "dep:serde_json", "dep:strum"]

[dependencies]
anyhow.workspace = true
axum = { workspace = true, features = ["form", "http1", "json", "query", "tokio", "tower-log", "tracing"] }
base64.workspace = true
cfg-if.workspace = true
chrono = { workspace = true, features = ["clock", "serde", "std"] }
config = { workspace = true, features = ["toml"] }
derive_more = { workspace = true, features = ["as_ref", "from", "into_iterator"] }
http.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdsa", "pkcs8"] }
rustls-pki-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_with = { workspace = true, features = ["base64"] }
thiserror.workspace = true
tokio = { workspace = true, features = ["parking_lot", "rt-multi-thread", "net"] }
tower-http = { workspace = true, features = ["auth", "cors", "set-header", "trace"] }
tracing.workspace = true
tracing-subscriber = { workspace = true, features = [
    "std",
    "env-filter",
    "fmt",
    "json",
    "ansi",
    "smallvec",
    "tracing-log",
    "parking_lot",
] }
url = { workspace = true, features = ["serde"] }

axum-extra = { workspace = true, optional = true, features = ["typed-header"] }
ciborium = { workspace = true, optional = true }
futures = { workspace = true, optional = true, features = ["std", "async-await"] }
indexmap = { workspace = true, optional = true, features = ["serde"] }
itertools = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true, features = ["rustls-tls-webpki-roots"] }
ring = { workspace = true, optional = true }
sea-orm = { workspace = true, optional = true, features = [
    "macros",
    "runtime-tokio-rustls",
    "sqlx-postgres",
    "with-chrono",
    "with-json",
] }
serde_json = { workspace = true, optional = true }
serde_urlencoded = { workspace = true, optional = true }
serial_test = { workspace = true, optional = true }
strum = { workspace = true, optional = true, features = ["derive"] }

nl_wallet_mdoc.path = "../mdoc"
openid4vc = { path = "../openid4vc", features = ["axum"] }
sd_jwt.path = "../sd_jwt"
wallet_common = { path = "../wallet_common", features = ["axum"] }

[dev-dependencies]
assert_matches.workspace = true
indexmap.workspace = true
itertools.workspace = true
parking_lot.workspace = true
rand_core.workspace = true
reqwest = { workspace = true, features = ["rustls-tls-webpki-roots"] }
rstest.workspace = true
serde_urlencoded.workspace = true
tokio = { workspace = true, features = ["macros", "test-util"] }

nl_wallet_mdoc = { path = "../mdoc", features = ["generate", "mock_example_constructors"] }
sd_jwt = { path = "../sd_jwt", features = ["example_constructors"] }
wallet_common = { path = "../wallet_common", features = ["insecure_http_client", "mock_remote_key", "mock_time"] }
