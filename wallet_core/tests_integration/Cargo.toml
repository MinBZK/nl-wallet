[package]
name = "tests_integration"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[[bin]]
name = "performance_test"
required-features = ["performance_test"]

[[test]]
name = "gba_pid_test"
path = "tests/gba_pid_test.rs"
required-features = ["gba_pid_test"]

[[test]]
name = "config_server"
path = "tests/config_server.rs"
required-features = ["integration_test"]

[[test]]
name = "digid_issuance"
path = "tests/digid_issuance.rs"
required-features = ["digid_test"]

[[test]]
name = "disclosure"
path = "tests/disclosure.rs"
required-features = ["integration_test"]

[[test]]
name = "issuance"
path = "tests/issuance.rs"
required-features = ["integration_test"]

[[test]]
name = "locking"
path = "tests/locking.rs"
required-features = ["integration_test"]

[[test]]
name = "registration"
path = "tests/registration.rs"
required-features = ["integration_test"]

[[test]]
name = "update_policy_server"
path = "tests/update_policy_server.rs"
required-features = ["integration_test"]

[features]
# Allow the disclosure return URL and its prefix to use http://
allow_insecure_url = ["openid4vc?/allow_insecure_url", "wallet_common?/allow_insecure_url"]
# Initialize global logging using tracing-subscriber
logging = ["dep:tracing", "dep:tracing-subscriber"]
# Include the common submodule, which includes code all integration tests use.
test_common = [
    "logging",
    "dep:android_attest",
    "dep:apple_app_attest",
    "dep:chrono",
    "dep:ctor",
    "dep:indexmap",
    "dep:jsonwebtoken",
    "dep:reqwest",
    "dep:sea-orm",
    "dep:serde_json",
    "dep:tokio",
    "dep:configuration_server",
    "dep:gba_hc_converter",
    "dep:nl_wallet_mdoc",
    "dep:openid4vc",
    "dep:platform_support",
    "dep:semver",
    "dep:sd_jwt",
    "dep:tempfile",
    "dep:update_policy_server",
    "dep:uuid",
    "dep:url",
    "dep:wallet",
    "dep:wallet_common",
    "dep:wallet_provider",
    "dep:wallet_provider_persistence",
    "dep:wallet_provider_service",
    "dep:wallet_server",
]
# Include the fake_digid submodule
fake_digid = ["dep:reqwest", "dep:url", "dep:wallet_common"]
# Include and run test that depend on an external PostgreSQL database
db_test = ["wallet_provider_persistence?/db_test", "wallet_provider_service?/db_test", "wallet_server?/db_test"]
# Include and run test that depend on a configured HSM
hsm_test = ["wallet_provider?/hsm_test"]
# Feature used for enabling all integration tests
integration_test = [
    "allow_insecure_url",
    "test_common",
    "db_test",
    "hsm_test",
    "dep:assert_matches",
    "dep:p256",
    "dep:rand_core",
    "dep:regex",
    "dep:rstest",
    "dep:serde_urlencoded",
    "dep:serial_test",
    "dep:tokio",
    "tokio/macros",
    "tokio/sync",
]
# Optional feature for running integration tests that depend on the DigiD connector
digid_test = ["fake_digid", "test_common", "dep:gba_hc_converter", "dep:rustls-pki-types"]
# Should be enabled when building the performance_test binary
performance_test = [
    "logging",
    "fake_digid",
    "dep:ctor",
    "dep:apple_app_attest",
    "dep:indexmap",
    "dep:reqwest",
    "dep:tokio",
    "dep:tracing",
    "dep:url",
    "dep:uuid",
    "dep:nl_wallet_mdoc",
    "dep:openid4vc",
    "dep:platform_support",
    "dep:serde_urlencoded",
    "dep:tempfile",
    "dep:wallet",
    "dep:wallet_common",
    "dep:wallet_server",
    "dep:dotenvy",
    "platform_support/mock_attested_key_apple_ca",
]
gba_pid_test = [
    "logging",
    "fake_digid",
    "dep:apple_app_attest",
    "dep:ctor",
    "dep:indexmap",
    "dep:insta",
    "dep:reqwest",
    "dep:tracing",
    "dep:url",
    "dep:uuid",
    "dep:nl_wallet_mdoc",
    "dep:openid4vc",
    "dep:platform_support",
    "dep:rstest",
    "dep:serial_test",
    "dep:serde_urlencoded",
    "dep:tokio",
    "dep:wallet",
    "dep:wallet_common",
    "dep:wallet_server",
    "platform_support/mock_attested_key_apple_ca",
    "wallet/snapshot_test",
]

[dependencies]
assert_matches = { workspace = true, optional = true }
ctor = { workspace = true, optional = true }
chrono = { workspace = true, optional = true }
indexmap = { workspace = true, optional = true }
insta = { workspace = true, optional = true, features = ["ron"] }
jsonwebtoken = { workspace = true, optional = true, features = ["use_pem"] }
reqwest = { workspace = true, optional = true, features = ["rustls-tls-webpki-roots"] }
sea-orm = { workspace = true, optional = true, features = [
    "sqlx-postgres",
    "runtime-tokio-rustls",
    "macros",
    "with-uuid",
    "debug-print",
] }
semver = { workspace = true, optional = true }
serde_json = { workspace = true, optional = true }
p256 = { workspace = true, optional = true, features = ["pkcs8"] }
rand_core = { workspace = true, optional = true }
regex = { workspace = true, optional = true }
rstest = { workspace = true, optional = true }
rustls-pki-types = { workspace = true, optional = true }
serde_urlencoded = { workspace = true, optional = true }
serial_test = { workspace = true, optional = true }
tempfile = { workspace = true, optional = true }
tokio = { workspace = true, optional = true, features = ["rt", "time", "parking_lot"] }
tracing = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true, features = [
    "std",
    "fmt",
    "ansi",
    "tracing-log",
    "parking_lot",
] }
url = { workspace = true, optional = true }
uuid = { workspace = true, optional = true }

android_attest = { path = "../android_attest", optional = true }
apple_app_attest = { path = "../apple_app_attest", optional = true, features = ["mock"] }
configuration_server = { path = "../configuration_server", optional = true }
gba_hc_converter = { path = "../gba_hc_converter", optional = true }
nl_wallet_mdoc = { path = "../mdoc", optional = true, features = ["generate", "test"] }
openid4vc = { path = "../openid4vc", optional = true }
platform_support = { path = "../platform_support", optional = true, features = ["mock"] }
sd_jwt = { path = "../sd_jwt", optional = true, features = ["example_constructors"] }
update_policy_server = { path = "../update_policy_server", optional = true }
wallet = { path = "../wallet", optional = true, features = ["mock", "wallet_deps", "test"] }
wallet_common = { path = "../wallet_common", optional = true, features = ["mock_remote_key"] }
wallet_provider = { path = "../wallet_provider", optional = true }
wallet_provider_persistence = { path = "../wallet_provider/persistence", optional = true }
wallet_provider_service = { path = "../wallet_provider/service", optional = true, features = ["mock"] }
wallet_server = { path = "../wallet_server", optional = true, features = ["issuance", "disclosure", "mock"] }

[build-dependencies]
dotenvy = { workspace = true, optional = true }

[dev-dependencies]
# This enables the automatic running of unit and integration tests for these crates when tests
# are run from the workspace. The following features are not included in this:
# * hsm_test
# * db_test
openid4vc = { path = "../openid4vc", features = ["integration"] }
platform_support = { path = "../platform_support", features = ["persistent_mock_attested_key"] }
wallet_server = { path = "../wallet_server", features = ["issuance", "integration_test"] }
