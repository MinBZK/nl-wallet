[package]
name = "wallet"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[lib]
doctest = false

[features]
# Allow the disclosure return URL and its prefix to use http://
allow_insecure_url = ["openid4vc/allow_insecure_url"]
# Use fake Apple attested keys for use in the iOS simulator
fake_attestation = [
    "dep:apple_app_attest",
    "platform_support/persistent_mock_attested_key",
    "platform_support/xcode_env",
]
# Include mock implementations and constructors for testing
mock = ["dep:mockall", "mdoc/generate", "mdoc/mock", "openid4vc/mock"]
# Export the traits and actual implementations of the Wallet dependencies
wallet_deps = []
# Adds serializability for snapshot tests
snapshot_test = []
# Various test related functionality
test = []

[dependencies]
thiserror.workspace = true
base64.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
cfg-if.workspace = true
ciborium.workspace = true
derive_more = { workspace = true, features = ["constructor", "debug"] }
futures = { workspace = true, features = ["std", "async-await"] }
http.workspace = true
indexmap.workspace = true
itertools.workspace = true
mime.workspace = true
nutype.workspace = true
p256 = { workspace = true, features = ["ecdsa", "std"] }
parking_lot.workspace = true
regex.workspace = true
reqwest = { workspace = true, features = ["json", "rustls-tls-webpki-roots"] }
ring = { workspace = true, features = ["std"] }
rustls-pki-types.workspace = true
sanitize-filename.workspace = true
sea-orm = { workspace = true, features = ["sqlx-sqlite", "runtime-tokio-rustls", "with-uuid"] }
sea-query.workspace = true
semver.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
serde_urlencoded.workspace = true
serde_with = { workspace = true, features = ["base64"] }
strum = { workspace = true, features = ["derive"] }
tokio = { workspace = true, features = ["sync", "fs"] }
tracing.workspace = true
trait-variant.workspace = true
url.workspace = true
uuid = { workspace = true, features = ["v4", "v7"] }

mockall = { workspace = true, optional = true }

configuration.path = "../wallet_configuration/configuration"
crypto.path = "../crypto"
entity.path = "entity"
error_category = { path = "../error_category", features = ["sentry"] }
jwt.path = "../jwt"
wallet_migrations.path = "migrations"
mdoc.path = "../mdoc"
openid4vc.path = "../openid4vc"
platform_support.path = "../platform_support"
poa.path = "../poa"
sd_jwt_vc_metadata.path = "../sd_jwt_vc_metadata"
wallet_account = { path = "../wallet_provider/wallet_account", features = ["client"] }
wallet_common.path = "../wallet_common"

apple_app_attest = { path = "../apple_app_attest", optional = true }

[dev-dependencies]
aes-gcm = { workspace = true, features = ["std"] }
assert_matches.workspace = true
jsonwebtoken.workspace = true
mockall.workspace = true
rand_core.workspace = true
rstest.workspace = true
serial_test.workspace = true
tempfile.workspace = true
tokio = { workspace = true, features = ["rt", "macros", "test-util", "parking_lot"] }
wiremock.workspace = true

apple_app_attest = { path = "../apple_app_attest", features = ["mock"] }
configuration = { path = "../wallet_configuration/configuration", features = ["insecure_http_client"] }
crypto = { path = "../crypto", features = ["mock_secure_keys", "mock_remote_key"] }
mdoc = { path = "../mdoc", features = ["generate", "mock_example_constructors", "test"] }
openid4vc = { path = "../openid4vc", features = ["mock", "test"] }
# enable the "mock" feature for platform_support when running tests
platform_support = { path = "../platform_support", features = ["mock"] }
sd_jwt_vc_metadata = { path = "../sd_jwt_vc_metadata", features = ["example_constructors"] }
wallet_account = { path = "../wallet_provider/wallet_account", features = ["client", "server"] }

[build-dependencies]
serde.workspace = true
serde_json.workspace = true

configuration.path = "../wallet_configuration/configuration"
wallet_common.path = "../wallet_common"
