[package]
name = "mdoc"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[features]
# Include examples from the ISO specification
examples = []
# Include miscellaneous test utilities
test = ["crypto/generate", "crypto/mock", "dep:regex"]
# Include mock implementations and constructors for testing
mock = []
# Include example based constructors to several types for testing
mock_example_constructors = [
    "examples",
    "test",
    "attestation_types/pid_constants",
    "crypto/examples",
    "utils/mock_time",
    "dep:sd_jwt_vc_metadata"
]

[dependencies]
aes-gcm = { workspace = true, features = ["std"] }
base64.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
ciborium.workspace = true
coset = { workspace = true, features = ["std"] }
derive_more = { workspace = true, features = ["debug"] }
futures = { workspace = true, features = ["std", "async-await"] }
hex.workspace = true
indexmap = { workspace = true, features = ["serde"] }
itertools.workspace = true
nom.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdh", "ecdsa", "pem", "serde", "std"] }
rand_core.workspace = true
ring.workspace = true
rustls-pki-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde-aux.workspace = true
serde_bytes = { workspace = true, features = ["std"] }
serde_repr.workspace = true
serde_with = { workspace = true, features = ["base64", "chrono", "hex", "indexmap_2", "macros"] }
ssri.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = ["parking_lot"] }
tracing.workspace = true
url = { workspace = true, features = ["serde"] }

regex = { workspace = true, optional = true }

attestation_types.path = "../attestation_types"
crypto.path = "../crypto"
error_category.path = "../error_category"
http_utils.path = "../http_utils"
token_status_list.path = "../token_status_list"
utils.path = "../utils"

sd_jwt_vc_metadata = { path = "../sd_jwt_vc_metadata", optional = true, features = ["example_constructors"] }

[dev-dependencies]
assert_matches.workspace = true
hex-literal.workspace = true
regex.workspace = true
rstest.workspace = true
tokio = { workspace = true, features = ["macros"] }

attestation_types = { path = "../attestation_types", features = ["pid_constants"] }
crypto = { path = "../crypto", features = ["examples", "generate", "mock", "mock_secure_keys"] }
sd_jwt_vc_metadata = { path = "../sd_jwt_vc_metadata", features = ["example_constructors"] }
utils = { path = "../utils", features = ["mock_time"] }
