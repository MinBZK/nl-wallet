[package]
name = "mdoc"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[features]
# Include examples from the ISO specification
examples = [
    "test",
] # TODO PVW-4130: either cleanly separarate test and mock, or merge the two
# Include miscellaneous test utilities
test = [
    "dep:assert_matches",
    "dep:rstest",
    "dep:regex",
    "mock",
    "crypto/generate",
    "sd_jwt_vc_metadata/example_constructors",
    "utils/mock_time",
]
# Include mock implementations and constructors for testing
mock = ["crypto/mock"]
# Include example based constructors to several types for testing
mock_example_constructors = [
    "test",                   # TODO PVW-4130: either cleanly separarate test and mock, or merge the two
    "examples",
    "mock",
    "crypto/examples",
    "crypto/mock_remote_key",
]

[dependencies]
aes-gcm = { workspace = true, features = ["std"] }
base64.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
ciborium.workspace = true
coset = { workspace = true, features = ["std"] }
derive_more = { workspace = true, features = ["debug", "display", "as_ref", "constructor"] }
futures = { workspace = true, features = ["std", "async-await"] }
hex.workspace = true
indexmap = { workspace = true, features = ["serde"] }
itertools.workspace = true
nom.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdh", "ecdsa", "pem", "serde", "std"] }
rand_core.workspace = true
ring.workspace = true
rustls-pki-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde-aux.workspace = true
serde_bytes = { workspace = true, features = ["std"] }
serde_json.workspace = true
serde_repr.workspace = true
serde_with = { workspace = true, features = ["base64", "chrono", "hex", "indexmap_2", "macros"] }
ssri.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = ["parking_lot"] }
tracing.workspace = true
url = { workspace = true, features = ["serde"] }

assert_matches = { workspace = true, optional = true }
hex-literal = { workspace = true, optional = true }
regex = { workspace = true, optional = true }
rstest = { workspace = true, optional = true }

attestation_types.path = "../attestation_types"
crypto.path = "../crypto"
error_category.path = "../error_category"
http_utils.path = "../http_utils"
jwt.path = "../jwt"
sd_jwt.path = "../sd_jwt"
sd_jwt_vc_metadata.path = "../sd_jwt_vc_metadata"
utils.path = "../utils"

[dev-dependencies]
assert_matches.workspace = true
hex-literal.workspace = true
regex.workspace = true
rstest.workspace = true
serde_json.workspace = true
tokio = { workspace = true, features = ["macros"] }

crypto = { path = "../crypto", features = ["examples", "generate", "mock", "mock_secure_keys", "mock_remote_key"] }
sd_jwt_vc_metadata = { path = "../sd_jwt_vc_metadata", features = ["example_constructors"] }
utils = { path = "../utils", features = ["mock_time"] }
