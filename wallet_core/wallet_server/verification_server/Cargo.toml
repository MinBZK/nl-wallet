[package]
name = "verification_server"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[[bin]]
name = "verification_server"

[lib]
doctest = false

[[test]]
name = "verifier_api"
path = "tests/verifier_api.rs"
required-features = ["integration_test"]

[[test]]
name = "postgres"
path = "tests/postgres.rs"
required-features = ["db_test"]

[[test]]
name = "settings"
path = "tests/settings.rs"
required-features = ["integration_test"]

[features]
default = ["postgres"]
# Allow the disclosure return URL and its prefix to use http://
allow_insecure_url = ["openid4vc/allow_insecure_url", "wallet_common/allow_insecure_url"]
# Include session storage in PostgreSQL
postgres = ["server_utils/postgres"]
# Enable integration tests
integration_test = ["allow_insecure_url", "openid4vc/test", "server_utils/integration_test"]
# Include and run integration tests that depend on an external PostgreSQL database
db_test = ["integration_test", "postgres", "futures/std", "futures/async-await", "dep:serial_test", "tokio/sync"]

[dependencies]
anyhow.workspace = true
axum = { workspace = true, features = ["form", "http1", "json", "query", "tokio", "tower-log", "tracing"] }
base64.workspace = true
chrono = { workspace = true, features = ["clock", "serde", "std"] }
config = { workspace = true, features = ["toml"] }
derive_more = { workspace = true, features = ["as_ref", "from", "into_iterator"] }
futures.workspace = true
http.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdsa", "pkcs8"] }
ring.workspace = true
rustls-pki-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
serde_with = { workspace = true, features = ["base64", "hex"] }
thiserror.workspace = true
tokio = { workspace = true, features = ["parking_lot", "rt-multi-thread", "net"] }
tower-http = { workspace = true, features = ["auth", "cors", "set-header", "trace"] }
tracing.workspace = true
url = { workspace = true, features = ["serde"] }

indexmap = { workspace = true, optional = true, features = ["serde"] }
itertools = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true, features = ["rustls-tls-webpki-roots"] }
serde_urlencoded = { workspace = true, optional = true }
serial_test = { workspace = true, optional = true }

hsm = { path = "../../hsm", features = ["settings"] }
mdoc.path = "../../mdoc"
openid4vc = { path = "../../openid4vc", features = ["axum"] }
openid4vc_server = { path = "../../openid4vc_server", features = ["disclosure"] }
sd_jwt.path = "../../sd_jwt"
server_utils.path = "../server_utils"
wallet_common = { path = "../../wallet_common", features = ["axum"] }

[dev-dependencies]
assert_matches.workspace = true
indexmap.workspace = true
itertools.workspace = true
parking_lot.workspace = true
reqwest = { workspace = true, features = ["rustls-tls-webpki-roots"] }
rstest.workspace = true
serde_urlencoded.workspace = true
tokio = { workspace = true, features = ["macros", "test-util"] }

configuration = { path = "../../wallet_configuration/configuration", features = ["insecure_http_client"] }
crypto = { path = "../../crypto", features = ["mock_remote_key"] }
mdoc = { path = "../../mdoc", features = ["generate", "mock_example_constructors"] }
sd_jwt = { path = "../../sd_jwt", features = ["example_constructors"] }
wallet_common = { path = "../../wallet_common", features = ["mock_time"] }
