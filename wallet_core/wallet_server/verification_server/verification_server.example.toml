# Example verification_server config

# Whether HTTP requests/responses should be logged, default value: false
log_requests = false

# Emit logs in JSON format, default value: false
structured_logging = false

# The ephemeral ID secret is used for (rotating) QR code generation, hex
# encoded, minimally 32 bytes (64 characters)
ephemeral_id_secret = ""

# Array of CAs with trusted issuers
issuer_trust_anchors = ["MII..."]

# Array of CAs which sign use case certificates
reader_trust_anchors = ["MII..."]

# The wallet must be able to reach the server at this URL
public_url = "http://localhost:8001/"

# The base of the Universal Link (UL) of the wallet, used in QRs/ULs
# Default value: walletdebuginteraction://wallet.edi.rijksoverheid.nl/
universal_link_base_url = "walletdebuginteraction://wallet.edi.rijksoverheid.nl/"

# The `client_id` values that this server accepts, identifying the wallet
# implementation (not individual instances, i.e., the `client_id` value of
# a wallet implementation is constant across all wallets of that implementation)
# Default value: https://wallet.edi.rijksoverheid.nl
wallet_client_ids = ["https://wallet.edi.rijksoverheid.nl"]

# Optional, can be used to accept disclosed attestations having a vct that extends the one being requested.
[extending_vct_values]
"eudi:pid:1" = [
    "eudi:pid:extended:1",
    "eudi:pid:extended:2",
    "eudi:pid:extended:3"
]

# CORS settings. To allow all origins: allow_origins = "*"
allow_origins = ["http://localhost:8080"]

# Optional, but required if the `requester_server` section is absent
[requester_server.authentication]
api_key = "your_secret_key"

# Optional private endpoint for the requester, wallet_server is used if absent
[requester_server]
ip = "127.0.0.1"
port = 8002

# Public endpoint for the wallet, also private if requester_server is absent
[wallet_server]
ip = "127.0.0.1"
port = 8001

# Where to store session state. can be `memory://` or a `postgres://..` url
# Memory is ephemeral, default value: memory://
[storage]
url = "postgres://postgres:postgres@localhost:5432/verification_server"

# Optional, when using an HSM
[hsm]
library_path = "/path/to/hsm.so"
user_pin = "12345678"
max_sessions = 3
max_session_lifetime_in_sec = 900

# Usecases are defined as [usecases.some_name], where "some_name" is an
# identifier indicating the purpose of the usecase, which is freely choosable
# and has to be present in the QR/UL that starts the session.
#
# Configuration fields for usecases:
# * private_key_type: Can be hsm or software, when hsm private_key
#   should contain a string identifying the private key in the HSM
# * private_key: Base64 encoded DER format private key, or string
# * certificate: Base64 encoded DER format certificate
# * session_type_return_url: Can be both, same_device (default), or neither
#

# Example driving_license usecase
[usecases.driving_license]
private_key_type = "software"
private_key = "MII..."
certificate = "MII..."
session_type_return_url = "both"

# Example parking_permit usecase
[usecases.parking_permit]
private_key_type = "hsm"
private_key = "some_private_key"
certificate = "MII..."
session_type_return_url = "same_device"
