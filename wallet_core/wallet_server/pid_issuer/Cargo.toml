[package]
name = "pid_issuer"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
exclude = ["resources"]

[lints]
workspace = true

[lib]
doctest = false

[[bin]]
name = "pid_issuer"

[[test]]
name = "postgres"
path = "tests/postgres.rs"
required-features = ["db_test"]

[[test]]
name = "settings"
path = "tests/settings.rs"
required-features = ["integration_test"]

[features]
default = ["postgres"]
# Allow the disclosure return URL and its prefix to use http://
allow_insecure_url = ["openid4vc/allow_insecure_url", "http_utils/allow_insecure_url"]
# Include session storage in PostgreSQL
postgres = ["server_utils/postgres", "dep:sea-orm"]
# Include and run integration tests that depend on an external PostgreSQL database
db_test = ["postgres", "allow_insecure_url", "openid4vc/test", "tokio/sync"]
# Enable mock PID issuance
mock = ["dep:derive_more", "openid4vc/mock"]
# Enable integration tests
integration_test = ["allow_insecure_url", "server_utils/parsed_key_pair_conversion"]

[dependencies]
anyhow.workspace = true
axum = { workspace = true, features = ["form", "http1", "json", "query", "tokio", "tower-log", "tracing"] }
chrono = { workspace = true, features = ["serde", "std"] }
config = { workspace = true, features = ["toml", "preserve_order"] }
futures = { workspace = true, features = ["std", "async-await"] }
hex.workspace = true
indexmap = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdsa", "pkcs8"] }
reqwest = { workspace = true, features = ["rustls-tls-webpki-roots"] }
ring.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
serde_with = { workspace = true, features = ["base64"] }
thiserror.workspace = true
tokio = { workspace = true, features = ["parking_lot", "rt-multi-thread", "net"] }
tracing.workspace = true
url = { workspace = true, features = ["serde"] }

derive_more = { workspace = true, optional = true, features = ["constructor"] }
sea-orm = { workspace = true, optional = true, features = [
    "macros",
    "runtime-tokio-rustls",
    "sqlx-postgres",
    "with-chrono",
    "with-json",
] }

attestation_data.path = "../../lib/attestation_data"
crypto.path = "../../lib/crypto"
dcql.path = "../../lib/dcql"
issuer_settings.path = "../issuer_settings"
hsm = { path = "../../lib/hsm", features = ["settings"] }
http_utils = { path = "../../lib/http_utils", features = ["server"] }
jwt.path = "../../lib/jwt"
openid4vc = { path = "../../lib/openid4vc", features = ["axum"] }
openid4vc_server = { path = "../../lib/openid4vc_server", features = ["issuance"] }
utils = { path = "../../lib/utils" }
sd_jwt_vc_metadata.path = "../../lib/sd_jwt_vc_metadata"
server_utils.path = "../server_utils"

[dev-dependencies]
assert_matches.workspace = true
rstest.workspace = true
tokio = { workspace = true, features = ["macros", "test-util"] }

attestation_data = { path = "../../lib/attestation_data", features = ["generate", "mock"] }
crypto = { path = "../../lib/crypto", features = ["mock_remote_key"] }
sd_jwt_vc_metadata = { path = "../../lib/sd_jwt_vc_metadata", features = ["example_constructors"] }
utils = { path = "../../lib/utils", features = ["mock_time"] }
