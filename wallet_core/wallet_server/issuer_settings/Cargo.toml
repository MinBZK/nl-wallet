[package]
name = "issuer_settings"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[lib]
doctest = false

[dependencies]
chrono.workspace = true
derive_more = { workspace = true, features = ["as_ref", "from"] }
futures = { workspace = true }
indexmap = { workspace = true, features = ["serde"] }
rustls-pki-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
thiserror.workspace = true
tracing.workspace = true

attestation_data.path = "../../lib/attestation_data"
attestation_types.path = "../../lib/attestation_types"
crypto.path = "../../lib/crypto"
hsm = { path = "../../lib/hsm", features = ["settings"] }
http_utils.path = "../../lib/http_utils"
openid4vc.path = "../../lib/openid4vc"
sd_jwt_vc_metadata.path = "../../lib/sd_jwt_vc_metadata"
utils.path = "../../lib/utils"
server_utils.path = "../server_utils"

[dev-dependencies]
assert_matches.workspace = true

attestation_data = { path = "../../lib/attestation_data", features = ["generate", "mock"] }
crypto = { path = "../../lib/crypto", features = ["generate", "mock", "mock_secure_keys"] }
openid4vc = { path = "../../lib/openid4vc", features = ["mock"] }
sd_jwt_vc_metadata = { path = "../../lib/sd_jwt_vc_metadata", features = ["example_constructors"] }
server_utils = { path = "../server_utils", features = ["parsed_key_pair_conversion"] }
